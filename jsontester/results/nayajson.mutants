[*] Start mutation process:
   - targets: nayajson
   - tests: nayajson_test
[*] 6 tests passed:
   - nayajson_test [0.00463 s]
[*] Start mutants generation and execution:
   - [#   1] AOD nayajson:361: 
--------------------------------------------------------------------------------
 357:     except StopIteration as e:
 358:         raise ValueError('Too many opening braces') from e
 359:     try:
 360:         while True:
~361:             if isinstance(stack[1], list):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
 363:                     if last_token == '[':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
 366:                                 stack.append({})
-------
 361:             if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.00811 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#   2] AOD nayajson:387: 
--------------------------------------------------------------------------------
 383:                     elif last_token == ']':
 384:                         value = stack.pop()
 385:                         if len(stack) == 0:
 386:                             return value
~387:                         if isinstance(stack[1], list):
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
-------
 387:                         if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.00774 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#   3] AOD nayajson:388: 
--------------------------------------------------------------------------------
 384:                         value = stack.pop()
 385:                         if len(stack) == 0:
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
~388:                             stack[1].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
-------
 388:                             stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.00766 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#   4] AOD nayajson:389: 
--------------------------------------------------------------------------------
 385:                         if len(stack) == 0:
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
~389:                         elif isinstance(stack[1], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
-------
 389:                         elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01975 s] +survived
   - [#   5] AOD nayajson:390: 
--------------------------------------------------------------------------------
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
~390:                             stack[1][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
-------
 390:                             stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01900 s] +survived
   - [#   6] AOD nayajson:391: 
--------------------------------------------------------------------------------
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
~391:                         elif isinstance(stack[1], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
-------
 391:                         elif isinstance(stack[(-1)], KVP):
-------
--------------------------------------------------------------------------------
[0.01566 s] +survived
   - [#   7] AOD nayajson:392: 
--------------------------------------------------------------------------------
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
~392:                             stack[1].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
-------
 392:                             stack[(-1)].value = value
-------
--------------------------------------------------------------------------------
[0.01527 s] +survived
   - [#   8] AOD nayajson:393: 
--------------------------------------------------------------------------------
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
~393:                             stack[1].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
 398:                                 stack[(-1)].append(value)
-------
 393:                             stack[(-1)].set = True
-------
--------------------------------------------------------------------------------
[0.01586 s] +survived
   - [#   9] AOD nayajson:397: 
--------------------------------------------------------------------------------
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
~397:                             if isinstance(stack[1], list):
 398:                                 stack[(-1)].append(value)
 399:                             elif isinstance(stack[(-1)], dict):
 400:                                 stack[(-1)][value.key] = value.value
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 397:                             if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.01130 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  10] AOD nayajson:398: 
--------------------------------------------------------------------------------
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
~398:                                 stack[1].append(value)
 399:                             elif isinstance(stack[(-1)], dict):
 400:                                 stack[(-1)][value.key] = value.value
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
-------
 398:                                 stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.01667 s] +survived
   - [#  11] AOD nayajson:399: 
--------------------------------------------------------------------------------
 395:                             if len(stack) == 0:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
 398:                                 stack[(-1)].append(value)
~399:                             elif isinstance(stack[1], dict):
 400:                                 stack[(-1)][value.key] = value.value
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 399:                             elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01270 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  12] AOD nayajson:400: 
--------------------------------------------------------------------------------
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
 398:                                 stack[(-1)].append(value)
 399:                             elif isinstance(stack[(-1)], dict):
~400:                                 stack[1][value.key] = value.value
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 405:                     elif last_token == '}':
-------
 400:                                 stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01160 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  13] AOD nayajson:411: 
--------------------------------------------------------------------------------
 407:                     else:
 408:                         raise ValueError("Array should not contain ':'")
 409:                 else:
 410:                     raise ValueError('Unknown Error')
~411:             elif isinstance(stack[1], dict):
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
 413:                     if last_token == '{':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
 416:                                 stack.append({})
-------
 411:             elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01037 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  14] AOD nayajson:441: 
--------------------------------------------------------------------------------
 437:                     elif last_token == '}':
 438:                         value = stack.pop()
 439:                         if len(stack) == 0:
 440:                             return value
~441:                         if isinstance(stack[1], list):
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
-------
 441:                         if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.01295 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  15] AOD nayajson:442: 
--------------------------------------------------------------------------------
 438:                         value = stack.pop()
 439:                         if len(stack) == 0:
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
~442:                             stack[1].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
-------
 442:                             stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.01132 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  16] AOD nayajson:443: 
--------------------------------------------------------------------------------
 439:                         if len(stack) == 0:
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
~443:                         elif isinstance(stack[1], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
-------
 443:                         elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01715 s] +survived
   - [#  17] AOD nayajson:444: 
--------------------------------------------------------------------------------
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
~444:                             stack[1][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
-------
 444:                             stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01723 s] +survived
   - [#  18] AOD nayajson:445: 
--------------------------------------------------------------------------------
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
~445:                         elif isinstance(stack[1], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
-------
 445:                         elif isinstance(stack[(-1)], KVP):
-------
--------------------------------------------------------------------------------
[0.01695 s] +survived
   - [#  19] AOD nayajson:446: 
--------------------------------------------------------------------------------
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
~446:                             stack[1].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
-------
 446:                             stack[(-1)].value = value
-------
--------------------------------------------------------------------------------
[0.01608 s] +survived
   - [#  20] AOD nayajson:447: 
--------------------------------------------------------------------------------
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
~447:                             stack[1].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
 452:                                 stack[(-1)].append(value)
-------
 447:                             stack[(-1)].set = True
-------
--------------------------------------------------------------------------------
[0.01611 s] +survived
   - [#  21] AOD nayajson:451: 
--------------------------------------------------------------------------------
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
~451:                             if isinstance(stack[1], list):
 452:                                 stack[(-1)].append(value)
 453:                             elif isinstance(stack[(-1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 451:                             if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.00992 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  22] AOD nayajson:452: 
--------------------------------------------------------------------------------
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
~452:                                 stack[1].append(value)
 453:                             elif isinstance(stack[(-1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 457:                     elif last_token == ']':
-------
 452:                                 stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.01576 s] +survived
   - [#  23] AOD nayajson:453: 
--------------------------------------------------------------------------------
 449:                             if len(stack) == 0:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
 452:                                 stack[(-1)].append(value)
~453:                             elif isinstance(stack[1], dict):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 457:                     elif last_token == ']':
 458:                         raise ValueError("Object closed with a ']'")
-------
 453:                             elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.00914 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  24] AOD nayajson:454: 
--------------------------------------------------------------------------------
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
 452:                                 stack[(-1)].append(value)
 453:                             elif isinstance(stack[(-1)], dict):
~454:                                 stack[1][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 457:                     elif last_token == ']':
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
-------
 454:                                 stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.00986 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  25] AOD nayajson:461: 
--------------------------------------------------------------------------------
 457:                     elif last_token == ']':
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
~461:             elif isinstance(stack[1], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
-------
 461:             elif isinstance(stack[(-1)], KVP):
-------
--------------------------------------------------------------------------------
[0.01604 s] +survived
   - [#  26] AOD nayajson:462: 
--------------------------------------------------------------------------------
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
~462:                 if stack[1].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
-------
 462:                 if stack[(-1)].set:
-------
--------------------------------------------------------------------------------
[0.01175 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  27] AOD nayajson:469: 
--------------------------------------------------------------------------------
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
~469:                         if isinstance(stack[1], list):
 470:                             stack[(-1)].append(value)
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 469:                         if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.00959 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  28] AOD nayajson:470: 
--------------------------------------------------------------------------------
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
~470:                             stack[1].append(value)
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
-------
 470:                             stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.01590 s] +survived
   - [#  29] AOD nayajson:471: 
--------------------------------------------------------------------------------
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
~471:                         elif isinstance(stack[1], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
 476:                             return stack[0]
-------
 471:                         elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.00886 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  30] AOD nayajson:472: 
--------------------------------------------------------------------------------
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
 471:                         elif isinstance(stack[(-1)], dict):
~472:                             stack[1][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
 476:                             return stack[0]
 477:                     else:
-------
 472:                             stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01071 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  31] AOD nayajson:491: 
--------------------------------------------------------------------------------
 487:                             stack.append([])
 488:                         else:
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
 490:                     else:
~491:                         stack[1].value = token
 492:                         stack[(-1)].set = True
 493:                 else:
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
 495:             else:
 496:                 value = stack.pop()
-------
 491:                         stack[(-1)].value = token
-------
--------------------------------------------------------------------------------
[0.01033 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  32] AOD nayajson:492: 
--------------------------------------------------------------------------------
 488:                         else:
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
 490:                     else:
 491:                         stack[(-1)].value = token
~492:                         stack[1].set = True
 493:                 else:
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
 495:             else:
 496:                 value = stack.pop()
 497:                 if isinstance(stack[(-1)], list):
-------
 492:                         stack[(-1)].set = True
-------
--------------------------------------------------------------------------------
[0.00870 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  33] AOD nayajson:497: 
--------------------------------------------------------------------------------
 493:                 else:
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
 495:             else:
 496:                 value = stack.pop()
~497:                 if isinstance(stack[1], list):
 498:                     stack[(-1)].append(value)
 499:                 elif isinstance(stack[(-1)], dict):
 500:                     stack[(-1)][value.key] = value.value
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 497:                 if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.00685 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#  34] AOD nayajson:498: 
--------------------------------------------------------------------------------
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
 495:             else:
 496:                 value = stack.pop()
 497:                 if isinstance(stack[(-1)], list):
~498:                     stack[1].append(value)
 499:                 elif isinstance(stack[(-1)], dict):
 500:                     stack[(-1)][value.key] = value.value
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 503:             (last_type, last_token) = (token_type, token)
-------
 498:                     stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.00842 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#  35] AOD nayajson:499: 
--------------------------------------------------------------------------------
 495:             else:
 496:                 value = stack.pop()
 497:                 if isinstance(stack[(-1)], list):
 498:                     stack[(-1)].append(value)
~499:                 elif isinstance(stack[1], dict):
 500:                     stack[(-1)][value.key] = value.value
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 503:             (last_type, last_token) = (token_type, token)
 504:             (token_type, token) = next(token_stream)
-------
 499:                 elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01760 s] +survived
   - [#  36] AOD nayajson:500: 
--------------------------------------------------------------------------------
 496:                 value = stack.pop()
 497:                 if isinstance(stack[(-1)], list):
 498:                     stack[(-1)].append(value)
 499:                 elif isinstance(stack[(-1)], dict):
~500:                     stack[1][value.key] = value.value
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 503:             (last_type, last_token) = (token_type, token)
 504:             (token_type, token) = next(token_stream)
 505:     except StopIteration as e:
-------
 500:                     stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01578 s] +survived
   - [#  37] AOR nayajson:258: 
--------------------------------------------------------------------------------
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
~258:                 charcode = ord(char) + 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
-------
 258:                 charcode = ord(char) - 48 * 4096
-------
--------------------------------------------------------------------------------
[0.01819 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  38] AOR nayajson:258: 
--------------------------------------------------------------------------------
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
~258:                 charcode = ord(char) - 48 / 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
-------
 258:                 charcode = ord(char) - 48 * 4096
-------
--------------------------------------------------------------------------------
[0.01572 s] incompetent
   - [#  39] AOR nayajson:258: 
--------------------------------------------------------------------------------
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
~258:                 charcode = ord(char) - 48 // 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
-------
 258:                 charcode = ord(char) - 48 * 4096
-------
--------------------------------------------------------------------------------
[0.01708 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  40] AOR nayajson:258: 
--------------------------------------------------------------------------------
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
~258:                 charcode = ord(char) - 48 ** 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
-------
 258:                 charcode = ord(char) - 48 * 4096
-------
--------------------------------------------------------------------------------
[0.01686 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  41] AOR nayajson:260: 
--------------------------------------------------------------------------------
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
~260:                 charcode = ord(char) + 87 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
-------
 260:                 charcode = ord(char) - 87 * 4096
-------
--------------------------------------------------------------------------------
[0.01718 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  42] AOR nayajson:260: 
--------------------------------------------------------------------------------
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
~260:                 charcode = ord(char) - 87 / 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
-------
 260:                 charcode = ord(char) - 87 * 4096
-------
--------------------------------------------------------------------------------
[0.01716 s] incompetent
   - [#  43] AOR nayajson:260: 
--------------------------------------------------------------------------------
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
~260:                 charcode = ord(char) - 87 // 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
-------
 260:                 charcode = ord(char) - 87 * 4096
-------
--------------------------------------------------------------------------------
[0.01833 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  44] AOR nayajson:260: 
--------------------------------------------------------------------------------
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
~260:                 charcode = ord(char) - 87 ** 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
-------
 260:                 charcode = ord(char) - 87 * 4096
-------
--------------------------------------------------------------------------------
[0.01750 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  45] AOR nayajson:262: 
--------------------------------------------------------------------------------
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
~262:                 charcode = ord(char) + 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
-------
 262:                 charcode = ord(char) - 55 * 4096
-------
--------------------------------------------------------------------------------
[0.01871 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  46] AOR nayajson:262: 
--------------------------------------------------------------------------------
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
~262:                 charcode = ord(char) - 55 / 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
-------
 262:                 charcode = ord(char) - 55 * 4096
-------
--------------------------------------------------------------------------------
[0.01612 s] incompetent
   - [#  47] AOR nayajson:262: 
--------------------------------------------------------------------------------
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
~262:                 charcode = ord(char) - 55 // 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
-------
 262:                 charcode = ord(char) - 55 * 4096
-------
--------------------------------------------------------------------------------
[0.01541 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  48] AOR nayajson:262: 
--------------------------------------------------------------------------------
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
~262:                 charcode = ord(char) - 55 ** 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
-------
 262:                 charcode = ord(char) - 55 * 4096
-------
--------------------------------------------------------------------------------
[0.01820 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  49] AOR nayajson:269: 
--------------------------------------------------------------------------------
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
~269:                 charcode += ord(char) + 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
-------
 269:                 charcode += ord(char) - 48 * 256
-------
--------------------------------------------------------------------------------
[0.01713 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  50] AOR nayajson:269: 
--------------------------------------------------------------------------------
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
~269:                 charcode += ord(char) - 48 / 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
-------
 269:                 charcode += ord(char) - 48 * 256
-------
--------------------------------------------------------------------------------
[0.01586 s] incompetent
   - [#  51] AOR nayajson:269: 
--------------------------------------------------------------------------------
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
~269:                 charcode += ord(char) - 48 // 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
-------
 269:                 charcode += ord(char) - 48 * 256
-------
--------------------------------------------------------------------------------
[0.01836 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  52] AOR nayajson:269: 
--------------------------------------------------------------------------------
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
~269:                 charcode += ord(char) - 48 ** 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
-------
 269:                 charcode += ord(char) - 48 * 256
-------
--------------------------------------------------------------------------------
[0.01836 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  53] AOR nayajson:271: 
--------------------------------------------------------------------------------
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
~271:                 charcode += ord(char) + 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
-------
 271:                 charcode += ord(char) - 87 * 256
-------
--------------------------------------------------------------------------------
[0.01592 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  54] AOR nayajson:271: 
--------------------------------------------------------------------------------
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
~271:                 charcode += ord(char) - 87 / 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
-------
 271:                 charcode += ord(char) - 87 * 256
-------
--------------------------------------------------------------------------------
[0.01582 s] incompetent
   - [#  55] AOR nayajson:271: 
--------------------------------------------------------------------------------
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
~271:                 charcode += ord(char) - 87 // 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
-------
 271:                 charcode += ord(char) - 87 * 256
-------
--------------------------------------------------------------------------------
[0.01724 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  56] AOR nayajson:271: 
--------------------------------------------------------------------------------
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
~271:                 charcode += ord(char) - 87 ** 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
-------
 271:                 charcode += ord(char) - 87 * 256
-------
--------------------------------------------------------------------------------
[0.01723 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  57] AOR nayajson:273: 
--------------------------------------------------------------------------------
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
~273:                 charcode += ord(char) + 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
-------
 273:                 charcode += ord(char) - 55 * 256
-------
--------------------------------------------------------------------------------
[0.01946 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  58] AOR nayajson:273: 
--------------------------------------------------------------------------------
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
~273:                 charcode += ord(char) - 55 / 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
-------
 273:                 charcode += ord(char) - 55 * 256
-------
--------------------------------------------------------------------------------
[0.01606 s] incompetent
   - [#  59] AOR nayajson:273: 
--------------------------------------------------------------------------------
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
~273:                 charcode += ord(char) - 55 // 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
-------
 273:                 charcode += ord(char) - 55 * 256
-------
--------------------------------------------------------------------------------
[0.01763 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  60] AOR nayajson:273: 
--------------------------------------------------------------------------------
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
~273:                 charcode += ord(char) - 55 ** 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
-------
 273:                 charcode += ord(char) - 55 * 256
-------
--------------------------------------------------------------------------------
[0.01993 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  61] AOR nayajson:280: 
--------------------------------------------------------------------------------
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
~280:                 charcode += ord(char) + 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
-------
 280:                 charcode += ord(char) - 48 * 16
-------
--------------------------------------------------------------------------------
[0.01900 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  62] AOR nayajson:280: 
--------------------------------------------------------------------------------
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
~280:                 charcode += ord(char) - 48 / 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
-------
 280:                 charcode += ord(char) - 48 * 16
-------
--------------------------------------------------------------------------------
[0.01554 s] incompetent
   - [#  63] AOR nayajson:280: 
--------------------------------------------------------------------------------
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
~280:                 charcode += ord(char) - 48 // 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
-------
 280:                 charcode += ord(char) - 48 * 16
-------
--------------------------------------------------------------------------------
[0.01729 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  64] AOR nayajson:280: 
--------------------------------------------------------------------------------
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
~280:                 charcode += ord(char) - 48 ** 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
-------
 280:                 charcode += ord(char) - 48 * 16
-------
--------------------------------------------------------------------------------
[0.01740 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  65] AOR nayajson:282: 
--------------------------------------------------------------------------------
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
~282:                 charcode += ord(char) + 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
-------
 282:                 charcode += ord(char) - 87 * 16
-------
--------------------------------------------------------------------------------
[0.01729 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  66] AOR nayajson:282: 
--------------------------------------------------------------------------------
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
~282:                 charcode += ord(char) - 87 / 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
-------
 282:                 charcode += ord(char) - 87 * 16
-------
--------------------------------------------------------------------------------
[0.01520 s] incompetent
   - [#  67] AOR nayajson:282: 
--------------------------------------------------------------------------------
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
~282:                 charcode += ord(char) - 87 // 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
-------
 282:                 charcode += ord(char) - 87 * 16
-------
--------------------------------------------------------------------------------
[0.01631 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  68] AOR nayajson:282: 
--------------------------------------------------------------------------------
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
~282:                 charcode += ord(char) - 87 ** 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
-------
 282:                 charcode += ord(char) - 87 * 16
-------
--------------------------------------------------------------------------------
[0.01606 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  69] AOR nayajson:284: 
--------------------------------------------------------------------------------
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
~284:                 charcode += ord(char) + 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
-------
 284:                 charcode += ord(char) - 55 * 16
-------
--------------------------------------------------------------------------------
[0.01718 s] +survived
   - [#  70] AOR nayajson:284: 
--------------------------------------------------------------------------------
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
~284:                 charcode += ord(char) - 55 / 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
-------
 284:                 charcode += ord(char) - 55 * 16
-------
--------------------------------------------------------------------------------
[0.01806 s] +survived
   - [#  71] AOR nayajson:284: 
--------------------------------------------------------------------------------
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
~284:                 charcode += ord(char) - 55 // 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
-------
 284:                 charcode += ord(char) - 55 * 16
-------
--------------------------------------------------------------------------------
[0.01636 s] +survived
   - [#  72] AOR nayajson:284: 
--------------------------------------------------------------------------------
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
~284:                 charcode += ord(char) - 55 ** 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
-------
 284:                 charcode += ord(char) - 55 * 16
-------
--------------------------------------------------------------------------------
[0.01620 s] +survived
   - [#  73] AOR nayajson:291: 
--------------------------------------------------------------------------------
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
 290:             if char in '0123456789':
~291:                 charcode += ord(char) + 48
 292:             elif char in 'abcdef':
 293:                 charcode += ord(char) - 87
 294:             elif char in 'ABCDEF':
 295:                 charcode += ord(char) - 55
 296:             else:
-------
 291:                 charcode += ord(char) - 48
-------
--------------------------------------------------------------------------------
[0.01712 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  74] AOR nayajson:293: 
--------------------------------------------------------------------------------
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
 290:             if char in '0123456789':
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
~293:                 charcode += ord(char) + 87
 294:             elif char in 'ABCDEF':
 295:                 charcode += ord(char) - 55
 296:             else:
 297:                 raise ValueError('Invalid character code: {}'.format(char))
 298:             next_state = __TOKENIZER_STATE.STRING
-------
 293:                 charcode += ord(char) - 87
-------
--------------------------------------------------------------------------------
[0.01644 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  75] AOR nayajson:295: 
--------------------------------------------------------------------------------
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
 293:                 charcode += ord(char) - 87
 294:             elif char in 'ABCDEF':
~295:                 charcode += ord(char) + 55
 296:             else:
 297:                 raise ValueError('Invalid character code: {}'.format(char))
 298:             next_state = __TOKENIZER_STATE.STRING
 299:             char = chr(charcode)
 300:             add_char = True
-------
 295:                 charcode += ord(char) - 55
-------
--------------------------------------------------------------------------------
[0.01731 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#  76] AOR nayajson:361: 
--------------------------------------------------------------------------------
 357:     except StopIteration as e:
 358:         raise ValueError('Too many opening braces') from e
 359:     try:
 360:         while True:
~361:             if isinstance(stack[(+1)], list):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
 363:                     if last_token == '[':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
 366:                                 stack.append({})
-------
 361:             if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.00826 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#  77] AOR nayajson:387: 
--------------------------------------------------------------------------------
 383:                     elif last_token == ']':
 384:                         value = stack.pop()
 385:                         if len(stack) == 0:
 386:                             return value
~387:                         if isinstance(stack[(+1)], list):
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
-------
 387:                         if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.00805 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#  78] AOR nayajson:388: 
--------------------------------------------------------------------------------
 384:                         value = stack.pop()
 385:                         if len(stack) == 0:
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
~388:                             stack[(+1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
-------
 388:                             stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.00752 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#  79] AOR nayajson:389: 
--------------------------------------------------------------------------------
 385:                         if len(stack) == 0:
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
~389:                         elif isinstance(stack[(+1)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
-------
 389:                         elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01434 s] +survived
   - [#  80] AOR nayajson:390: 
--------------------------------------------------------------------------------
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
~390:                             stack[(+1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
-------
 390:                             stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01701 s] +survived
   - [#  81] AOR nayajson:391: 
--------------------------------------------------------------------------------
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
~391:                         elif isinstance(stack[(+1)], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
-------
 391:                         elif isinstance(stack[(-1)], KVP):
-------
--------------------------------------------------------------------------------
[0.01823 s] +survived
   - [#  82] AOR nayajson:392: 
--------------------------------------------------------------------------------
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
~392:                             stack[(+1)].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
-------
 392:                             stack[(-1)].value = value
-------
--------------------------------------------------------------------------------
[0.01604 s] +survived
   - [#  83] AOR nayajson:393: 
--------------------------------------------------------------------------------
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
~393:                             stack[(+1)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
 398:                                 stack[(-1)].append(value)
-------
 393:                             stack[(-1)].set = True
-------
--------------------------------------------------------------------------------
[0.01606 s] +survived
   - [#  84] AOR nayajson:397: 
--------------------------------------------------------------------------------
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
~397:                             if isinstance(stack[(+1)], list):
 398:                                 stack[(-1)].append(value)
 399:                             elif isinstance(stack[(-1)], dict):
 400:                                 stack[(-1)][value.key] = value.value
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 397:                             if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.01171 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  85] AOR nayajson:398: 
--------------------------------------------------------------------------------
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
~398:                                 stack[(+1)].append(value)
 399:                             elif isinstance(stack[(-1)], dict):
 400:                                 stack[(-1)][value.key] = value.value
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
-------
 398:                                 stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.01685 s] +survived
   - [#  86] AOR nayajson:399: 
--------------------------------------------------------------------------------
 395:                             if len(stack) == 0:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
 398:                                 stack[(-1)].append(value)
~399:                             elif isinstance(stack[(+1)], dict):
 400:                                 stack[(-1)][value.key] = value.value
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 399:                             elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01248 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  87] AOR nayajson:400: 
--------------------------------------------------------------------------------
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
 398:                                 stack[(-1)].append(value)
 399:                             elif isinstance(stack[(-1)], dict):
~400:                                 stack[(+1)][value.key] = value.value
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 405:                     elif last_token == '}':
-------
 400:                                 stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01188 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  88] AOR nayajson:411: 
--------------------------------------------------------------------------------
 407:                     else:
 408:                         raise ValueError("Array should not contain ':'")
 409:                 else:
 410:                     raise ValueError('Unknown Error')
~411:             elif isinstance(stack[(+1)], dict):
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
 413:                     if last_token == '{':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
 416:                                 stack.append({})
-------
 411:             elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.00923 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  89] AOR nayajson:441: 
--------------------------------------------------------------------------------
 437:                     elif last_token == '}':
 438:                         value = stack.pop()
 439:                         if len(stack) == 0:
 440:                             return value
~441:                         if isinstance(stack[(+1)], list):
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
-------
 441:                         if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.01296 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  90] AOR nayajson:442: 
--------------------------------------------------------------------------------
 438:                         value = stack.pop()
 439:                         if len(stack) == 0:
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
~442:                             stack[(+1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
-------
 442:                             stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.01082 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  91] AOR nayajson:443: 
--------------------------------------------------------------------------------
 439:                         if len(stack) == 0:
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
~443:                         elif isinstance(stack[(+1)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
-------
 443:                         elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01818 s] +survived
   - [#  92] AOR nayajson:444: 
--------------------------------------------------------------------------------
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
~444:                             stack[(+1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
-------
 444:                             stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01539 s] +survived
   - [#  93] AOR nayajson:445: 
--------------------------------------------------------------------------------
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
~445:                         elif isinstance(stack[(+1)], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
-------
 445:                         elif isinstance(stack[(-1)], KVP):
-------
--------------------------------------------------------------------------------
[0.01561 s] +survived
   - [#  94] AOR nayajson:446: 
--------------------------------------------------------------------------------
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
~446:                             stack[(+1)].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
-------
 446:                             stack[(-1)].value = value
-------
--------------------------------------------------------------------------------
[0.01631 s] +survived
   - [#  95] AOR nayajson:447: 
--------------------------------------------------------------------------------
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
~447:                             stack[(+1)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
 452:                                 stack[(-1)].append(value)
-------
 447:                             stack[(-1)].set = True
-------
--------------------------------------------------------------------------------
[0.01792 s] +survived
   - [#  96] AOR nayajson:451: 
--------------------------------------------------------------------------------
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
~451:                             if isinstance(stack[(+1)], list):
 452:                                 stack[(-1)].append(value)
 453:                             elif isinstance(stack[(-1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 451:                             if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.00981 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  97] AOR nayajson:452: 
--------------------------------------------------------------------------------
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
~452:                                 stack[(+1)].append(value)
 453:                             elif isinstance(stack[(-1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 457:                     elif last_token == ']':
-------
 452:                                 stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.01547 s] +survived
   - [#  98] AOR nayajson:453: 
--------------------------------------------------------------------------------
 449:                             if len(stack) == 0:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
 452:                                 stack[(-1)].append(value)
~453:                             elif isinstance(stack[(+1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 457:                     elif last_token == ']':
 458:                         raise ValueError("Object closed with a ']'")
-------
 453:                             elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01015 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#  99] AOR nayajson:454: 
--------------------------------------------------------------------------------
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
 452:                                 stack[(-1)].append(value)
 453:                             elif isinstance(stack[(-1)], dict):
~454:                                 stack[(+1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 457:                     elif last_token == ']':
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
-------
 454:                                 stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01009 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 100] AOR nayajson:461: 
--------------------------------------------------------------------------------
 457:                     elif last_token == ']':
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
~461:             elif isinstance(stack[(+1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
-------
 461:             elif isinstance(stack[(-1)], KVP):
-------
--------------------------------------------------------------------------------
[0.01624 s] +survived
   - [# 101] AOR nayajson:462: 
--------------------------------------------------------------------------------
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
~462:                 if stack[(+1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
-------
 462:                 if stack[(-1)].set:
-------
--------------------------------------------------------------------------------
[0.01000 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 102] AOR nayajson:465: 
--------------------------------------------------------------------------------
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
~465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" - token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
-------
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
-------
--------------------------------------------------------------------------------
[0.01836 s] ?survived
   - [# 103] AOR nayajson:465: 
--------------------------------------------------------------------------------
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
~465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token - "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
-------
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
-------
--------------------------------------------------------------------------------
[0.01675 s] ?survived
   - [# 104] AOR nayajson:469: 
--------------------------------------------------------------------------------
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
~469:                         if isinstance(stack[(+1)], list):
 470:                             stack[(-1)].append(value)
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 469:                         if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.01030 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 105] AOR nayajson:470: 
--------------------------------------------------------------------------------
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
~470:                             stack[(+1)].append(value)
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
-------
 470:                             stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.01627 s] +survived
   - [# 106] AOR nayajson:471: 
--------------------------------------------------------------------------------
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
~471:                         elif isinstance(stack[(+1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
 476:                             return stack[0]
-------
 471:                         elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.00967 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 107] AOR nayajson:472: 
--------------------------------------------------------------------------------
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
 471:                         elif isinstance(stack[(-1)], dict):
~472:                             stack[(+1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
 476:                             return stack[0]
 477:                     else:
-------
 472:                             stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.00940 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 108] AOR nayajson:478: 
--------------------------------------------------------------------------------
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
 476:                             return stack[0]
 477:                     else:
~478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" - token + "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
-------
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
-------
--------------------------------------------------------------------------------
[0.01512 s] ?survived
   - [# 109] AOR nayajson:478: 
--------------------------------------------------------------------------------
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
 476:                             return stack[0]
 477:                     else:
~478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token - "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
-------
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
-------
--------------------------------------------------------------------------------
[0.01588 s] ?survived
   - [# 110] AOR nayajson:491: 
--------------------------------------------------------------------------------
 487:                             stack.append([])
 488:                         else:
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
 490:                     else:
~491:                         stack[(+1)].value = token
 492:                         stack[(-1)].set = True
 493:                 else:
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
 495:             else:
 496:                 value = stack.pop()
-------
 491:                         stack[(-1)].value = token
-------
--------------------------------------------------------------------------------
[0.01032 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 111] AOR nayajson:492: 
--------------------------------------------------------------------------------
 488:                         else:
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
 490:                     else:
 491:                         stack[(-1)].value = token
~492:                         stack[(+1)].set = True
 493:                 else:
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
 495:             else:
 496:                 value = stack.pop()
 497:                 if isinstance(stack[(-1)], list):
-------
 492:                         stack[(-1)].set = True
-------
--------------------------------------------------------------------------------
[0.00994 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 112] AOR nayajson:497: 
--------------------------------------------------------------------------------
 493:                 else:
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
 495:             else:
 496:                 value = stack.pop()
~497:                 if isinstance(stack[(+1)], list):
 498:                     stack[(-1)].append(value)
 499:                 elif isinstance(stack[(-1)], dict):
 500:                     stack[(-1)][value.key] = value.value
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 497:                 if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.00733 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 113] AOR nayajson:498: 
--------------------------------------------------------------------------------
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
 495:             else:
 496:                 value = stack.pop()
 497:                 if isinstance(stack[(-1)], list):
~498:                     stack[(+1)].append(value)
 499:                 elif isinstance(stack[(-1)], dict):
 500:                     stack[(-1)][value.key] = value.value
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 503:             (last_type, last_token) = (token_type, token)
-------
 498:                     stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.00770 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 114] AOR nayajson:499: 
--------------------------------------------------------------------------------
 495:             else:
 496:                 value = stack.pop()
 497:                 if isinstance(stack[(-1)], list):
 498:                     stack[(-1)].append(value)
~499:                 elif isinstance(stack[(+1)], dict):
 500:                     stack[(-1)][value.key] = value.value
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 503:             (last_type, last_token) = (token_type, token)
 504:             (token_type, token) = next(token_stream)
-------
 499:                 elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01729 s] +survived
   - [# 115] AOR nayajson:500: 
--------------------------------------------------------------------------------
 496:                 value = stack.pop()
 497:                 if isinstance(stack[(-1)], list):
 498:                     stack[(-1)].append(value)
 499:                 elif isinstance(stack[(-1)], dict):
~500:                     stack[(+1)][value.key] = value.value
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 503:             (last_type, last_token) = (token_type, token)
 504:             (token_type, token) = next(token_stream)
 505:     except StopIteration as e:
-------
 500:                     stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01647 s] +survived
   - [# 116] ASR nayajson:269: 
--------------------------------------------------------------------------------
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
~269:                 charcode -= ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
-------
 269:                 charcode += ord(char) - 48 * 256
-------
--------------------------------------------------------------------------------
[0.01583 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 117] ASR nayajson:271: 
--------------------------------------------------------------------------------
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
~271:                 charcode -= ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
-------
 271:                 charcode += ord(char) - 87 * 256
-------
--------------------------------------------------------------------------------
[0.01627 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 118] ASR nayajson:273: 
--------------------------------------------------------------------------------
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
~273:                 charcode -= ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
-------
 273:                 charcode += ord(char) - 55 * 256
-------
--------------------------------------------------------------------------------
[0.01809 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 119] ASR nayajson:280: 
--------------------------------------------------------------------------------
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
~280:                 charcode -= ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
-------
 280:                 charcode += ord(char) - 48 * 16
-------
--------------------------------------------------------------------------------
[0.01965 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 120] ASR nayajson:282: 
--------------------------------------------------------------------------------
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
~282:                 charcode -= ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
-------
 282:                 charcode += ord(char) - 87 * 16
-------
--------------------------------------------------------------------------------
[0.01937 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 121] ASR nayajson:284: 
--------------------------------------------------------------------------------
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
~284:                 charcode -= ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
-------
 284:                 charcode += ord(char) - 55 * 16
-------
--------------------------------------------------------------------------------
[0.01855 s] +survived
   - [# 122] ASR nayajson:291: 
--------------------------------------------------------------------------------
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
 290:             if char in '0123456789':
~291:                 charcode -= ord(char) - 48
 292:             elif char in 'abcdef':
 293:                 charcode += ord(char) - 87
 294:             elif char in 'ABCDEF':
 295:                 charcode += ord(char) - 55
 296:             else:
-------
 291:                 charcode += ord(char) - 48
-------
--------------------------------------------------------------------------------
[0.01894 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 123] ASR nayajson:293: 
--------------------------------------------------------------------------------
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
 290:             if char in '0123456789':
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
~293:                 charcode -= ord(char) - 87
 294:             elif char in 'ABCDEF':
 295:                 charcode += ord(char) - 55
 296:             else:
 297:                 raise ValueError('Invalid character code: {}'.format(char))
 298:             next_state = __TOKENIZER_STATE.STRING
-------
 293:                 charcode += ord(char) - 87
-------
--------------------------------------------------------------------------------
[0.01580 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 124] ASR nayajson:295: 
--------------------------------------------------------------------------------
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
 293:                 charcode += ord(char) - 87
 294:             elif char in 'ABCDEF':
~295:                 charcode -= ord(char) - 55
 296:             else:
 297:                 raise ValueError('Invalid character code: {}'.format(char))
 298:             next_state = __TOKENIZER_STATE.STRING
 299:             char = chr(charcode)
 300:             add_char = True
-------
 295:                 charcode += ord(char) - 55
-------
--------------------------------------------------------------------------------
[0.01716 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 125] ASR nayajson:318: 
--------------------------------------------------------------------------------
 314:             token = []
 315:             yield now_token
 316:         if advance:
 317:             char = stream.read(1)
~318:             index -= 1
 319:     process_char(' ', charcode)
 320:     if completed:
 321:         yield now_token
 322: def parse_string(string):
 323:     return parse(StringIO(string))
-------
 318:             index += 1
-------
--------------------------------------------------------------------------------
[0.01462 s] +survived
   - [# 126] CDI nayajson:334: 
--------------------------------------------------------------------------------
 330:         return val
 331:     raise ValueError('Improperly closed JSON object')
 332: def __parse(token_stream, first_token):
 333:     class KVP:
~334:         @classmethod
 335:         def __init__(self, key):
 336:             self.key = key
 337:             self.value = None
 338:             self.set = False
 339:         def __str__(self):
-------
 334:         def __init__(self, key):
-------
--------------------------------------------------------------------------------
[0.01312 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 127] CDI nayajson:338: 
--------------------------------------------------------------------------------
 334:         def __init__(self, key):
 335:             self.key = key
 336:             self.value = None
 337:             self.set = False
~338:         @classmethod
 339:         def __str__(self):
 340:             if self.set:
 341:                 return '{}: {}'.format(self.key, self.value)
 342:             else:
 343:                 return '{}: <NULL>'.format(self.key)
-------
 338:         def __str__(self):
-------
--------------------------------------------------------------------------------
[0.01886 s] -survived
   - [# 128] COD nayajson:82 : 
--------------------------------------------------------------------------------
  78:             elif char == 't':
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
  80:             elif char == 'n':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
~ 82:             elif char.isspace():
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
  85:             if char in '0123456789':
  86:                 add_char = True
  87:             elif char == '.':
-------
  82:             elif (not char.isspace()):
-------
--------------------------------------------------------------------------------
[0.00962 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 129] COI nayajson:36 : 
--------------------------------------------------------------------------------
  32:     UNICODE_3 = 24
  33:     UNICODE_4 = 25
  34: def tokenize(stream):
  35:     def is_delimiter(char):
~ 36:         return (char.isspace() or char not in '{}[]:,')
  37:     token = []
  38:     charcode = 0
  39:     completed = False
  40:     now_token = ''
  41:     def process_char(char, charcode):
-------
  36:         return (char.isspace() or char in '{}[]:,')
-------
--------------------------------------------------------------------------------
[0.00868 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 130] COI nayajson:46 : 
--------------------------------------------------------------------------------
  42:         nonlocal token, completed, now_token
  43:         advance = True
  44:         add_char = False
  45:         next_state = state
~ 46:         if (not state == __TOKENIZER_STATE.WHITESPACE):
  47:             if char == '{':
  48:                 completed = True
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
  50:             elif char == '}':
  51:                 completed = True
-------
  46:         if state == __TOKENIZER_STATE.WHITESPACE:
-------
--------------------------------------------------------------------------------
[0.00843 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 131] COI nayajson:47 : 
--------------------------------------------------------------------------------
  43:         advance = True
  44:         add_char = False
  45:         next_state = state
  46:         if state == __TOKENIZER_STATE.WHITESPACE:
~ 47:             if (not char == '{'):
  48:                 completed = True
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
  50:             elif char == '}':
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
-------
  47:             if char == '{':
-------
--------------------------------------------------------------------------------
[0.00849 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 132] COI nayajson:50 : 
--------------------------------------------------------------------------------
  46:         if state == __TOKENIZER_STATE.WHITESPACE:
  47:             if char == '{':
  48:                 completed = True
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
~ 50:             elif (not char == '}'):
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
  53:             elif char == '[':
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
-------
  50:             elif char == '}':
-------
--------------------------------------------------------------------------------
[0.00830 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 133] COI nayajson:53 : 
--------------------------------------------------------------------------------
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
  50:             elif char == '}':
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
~ 53:             elif (not char == '['):
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
  56:             elif char == ']':
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
-------
  53:             elif char == '[':
-------
--------------------------------------------------------------------------------
[0.00884 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 134] COI nayajson:56 : 
--------------------------------------------------------------------------------
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
  53:             elif char == '[':
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
~ 56:             elif (not char == ']'):
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
  59:             elif char == ',':
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
-------
  56:             elif char == ']':
-------
--------------------------------------------------------------------------------
[0.00883 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 135] COI nayajson:59 : 
--------------------------------------------------------------------------------
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
  56:             elif char == ']':
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
~ 59:             elif (not char == ','):
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
  62:             elif char == ':':
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
-------
  59:             elif char == ',':
-------
--------------------------------------------------------------------------------
[0.00736 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 136] COI nayajson:62 : 
--------------------------------------------------------------------------------
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
  59:             elif char == ',':
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
~ 62:             elif (not char == ':'):
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
  65:             elif char == '"':
  66:                 next_state = __TOKENIZER_STATE.STRING
  67:             elif char in '123456789':
-------
  62:             elif char == ':':
-------
--------------------------------------------------------------------------------
[0.00791 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 137] COI nayajson:65 : 
--------------------------------------------------------------------------------
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
  62:             elif char == ':':
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
~ 65:             elif (not char == '"'):
  66:                 next_state = __TOKENIZER_STATE.STRING
  67:             elif char in '123456789':
  68:                 next_state = __TOKENIZER_STATE.INTEGER
  69:                 add_char = True
  70:             elif char == '0':
-------
  65:             elif char == '"':
-------
--------------------------------------------------------------------------------
[0.00815 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 138] COI nayajson:67 : 
--------------------------------------------------------------------------------
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
  65:             elif char == '"':
  66:                 next_state = __TOKENIZER_STATE.STRING
~ 67:             elif (not char in '123456789'):
  68:                 next_state = __TOKENIZER_STATE.INTEGER
  69:                 add_char = True
  70:             elif char == '0':
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
  72:                 add_char = True
-------
  67:             elif char in '123456789':
-------
--------------------------------------------------------------------------------
[0.00728 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 139] COI nayajson:67 : 
--------------------------------------------------------------------------------
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
  65:             elif char == '"':
  66:                 next_state = __TOKENIZER_STATE.STRING
~ 67:             elif char not in '123456789':
  68:                 next_state = __TOKENIZER_STATE.INTEGER
  69:                 add_char = True
  70:             elif char == '0':
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
  72:                 add_char = True
-------
  67:             elif char in '123456789':
-------
--------------------------------------------------------------------------------
[0.00897 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 140] COI nayajson:70 : 
--------------------------------------------------------------------------------
  66:                 next_state = __TOKENIZER_STATE.STRING
  67:             elif char in '123456789':
  68:                 next_state = __TOKENIZER_STATE.INTEGER
  69:                 add_char = True
~ 70:             elif (not char == '0'):
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
  72:                 add_char = True
  73:             elif char == '-':
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
-------
  70:             elif char == '0':
-------
--------------------------------------------------------------------------------
[0.01743 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 141] COI nayajson:73 : 
--------------------------------------------------------------------------------
  69:                 add_char = True
  70:             elif char == '0':
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
  72:                 add_char = True
~ 73:             elif (not char == '-'):
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
  76:             elif char == 'f':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
  78:             elif char == 't':
-------
  73:             elif char == '-':
-------
--------------------------------------------------------------------------------
[0.00844 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 142] COI nayajson:76 : 
--------------------------------------------------------------------------------
  72:                 add_char = True
  73:             elif char == '-':
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
~ 76:             elif (not char == 'f'):
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
  78:             elif char == 't':
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
  80:             elif char == 'n':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
-------
  76:             elif char == 'f':
-------
--------------------------------------------------------------------------------
[0.00819 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 143] COI nayajson:78 : 
--------------------------------------------------------------------------------
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
  76:             elif char == 'f':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
~ 78:             elif (not char == 't'):
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
  80:             elif char == 'n':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
  82:             elif (not char.isspace()):
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
  78:             elif char == 't':
-------
--------------------------------------------------------------------------------
[0.03595 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 144] COI nayajson:80 : 
--------------------------------------------------------------------------------
  76:             elif char == 'f':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
  78:             elif char == 't':
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
~ 80:             elif (not char == 'n'):
  81:                 next_state = __TOKENIZER_STATE.NULL_1
  82:             elif (not char.isspace()):
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
  85:             if char in '0123456789':
-------
  80:             elif char == 'n':
-------
--------------------------------------------------------------------------------
[0.00868 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 145] COI nayajson:82 : 
--------------------------------------------------------------------------------
  78:             elif char == 't':
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
  80:             elif char == 'n':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
~ 82:             elif (not (not char.isspace())):
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
  85:             if char in '0123456789':
  86:                 add_char = True
  87:             elif char == '.':
-------
  82:             elif (not char.isspace()):
-------
--------------------------------------------------------------------------------
[0.00757 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 146] COI nayajson:84 : 
--------------------------------------------------------------------------------
  80:             elif char == 'n':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
  82:             elif (not char.isspace()):
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~ 84:         elif (not state == __TOKENIZER_STATE.INTEGER):
  85:             if char in '0123456789':
  86:                 add_char = True
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
-------
  84:         elif state == __TOKENIZER_STATE.INTEGER:
-------
--------------------------------------------------------------------------------
[0.00890 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 147] COI nayajson:85 : 
--------------------------------------------------------------------------------
  81:                 next_state = __TOKENIZER_STATE.NULL_1
  82:             elif (not char.isspace()):
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
~ 85:             if (not char in '0123456789'):
  86:                 add_char = True
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
  90:             elif (char == 'e' or char == 'E'):
-------
  85:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.00872 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 148] COI nayajson:85 : 
--------------------------------------------------------------------------------
  81:                 next_state = __TOKENIZER_STATE.NULL_1
  82:             elif (not char.isspace()):
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
~ 85:             if char not in '0123456789':
  86:                 add_char = True
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
  90:             elif (char == 'e' or char == 'E'):
-------
  85:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.00925 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 149] COI nayajson:87 : 
--------------------------------------------------------------------------------
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
  85:             if char in '0123456789':
  86:                 add_char = True
~ 87:             elif (not char == '.'):
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
  90:             elif (char == 'e' or char == 'E'):
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
  92:                 add_char = True
-------
  87:             elif char == '.':
-------
--------------------------------------------------------------------------------
[0.00867 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 150] COI nayajson:90 : 
--------------------------------------------------------------------------------
  86:                 add_char = True
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
~ 90:             elif (not (char == 'e' or char == 'E')):
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
  92:                 add_char = True
  93:             elif is_delimiter(char):
  94:                 next_state = __TOKENIZER_STATE.WHITESPACE
  95:                 completed = True
-------
  90:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.00850 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 151] COI nayajson:93 : 
--------------------------------------------------------------------------------
  89:                 add_char = True
  90:             elif (char == 'e' or char == 'E'):
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
  92:                 add_char = True
~ 93:             elif (not is_delimiter(char)):
  94:                 next_state = __TOKENIZER_STATE.WHITESPACE
  95:                 completed = True
  96:                 now_token = (TOKEN_TYPE.NUMBER, int(''.join(token)))
  97:                 advance = False
  98:             else:
-------
  93:             elif is_delimiter(char):
-------
--------------------------------------------------------------------------------
[0.00927 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 152] COI nayajson:100: 
--------------------------------------------------------------------------------
  96:                 now_token = (TOKEN_TYPE.NUMBER, int(''.join(token)))
  97:                 advance = False
  98:             else:
  99:                 raise ValueError("A number must contain only digits.  Got '{}'".format(char))
~100:         elif (not state == __TOKENIZER_STATE.INTEGER_0):
 101:             if char == '.':
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
 103:                 add_char = True
 104:             elif (char == 'e' or char == 'E'):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
-------
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
-------
--------------------------------------------------------------------------------
[0.00820 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 153] COI nayajson:101: 
--------------------------------------------------------------------------------
  97:                 advance = False
  98:             else:
  99:                 raise ValueError("A number must contain only digits.  Got '{}'".format(char))
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
~101:             if (not char == '.'):
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
 103:                 add_char = True
 104:             elif (char == 'e' or char == 'E'):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 106:                 add_char = True
-------
 101:             if char == '.':
-------
--------------------------------------------------------------------------------
[0.00902 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 154] COI nayajson:104: 
--------------------------------------------------------------------------------
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
 101:             if char == '.':
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
 103:                 add_char = True
~104:             elif (not (char == 'e' or char == 'E')):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 106:                 add_char = True
 107:             elif is_delimiter(char):
 108:                 next_state = __TOKENIZER_STATE.WHITESPACE
 109:                 completed = True
-------
 104:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.01163 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 155] COI nayajson:107: 
--------------------------------------------------------------------------------
 103:                 add_char = True
 104:             elif (char == 'e' or char == 'E'):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 106:                 add_char = True
~107:             elif (not is_delimiter(char)):
 108:                 next_state = __TOKENIZER_STATE.WHITESPACE
 109:                 completed = True
 110:                 now_token = (TOKEN_TYPE.NUMBER, 0)
 111:                 advance = False
 112:             else:
-------
 107:             elif is_delimiter(char):
-------
--------------------------------------------------------------------------------
[0.00942 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 156] COI nayajson:114: 
--------------------------------------------------------------------------------
 110:                 now_token = (TOKEN_TYPE.NUMBER, 0)
 111:                 advance = False
 112:             else:
 113:                 raise ValueError("A 0 must be followed by a '.' or a 'e'.  Got '{0}'".format(char))
~114:         elif (not state == __TOKENIZER_STATE.INTEGER_SIGN):
 115:             if char == '0':
 116:                 next_state = __TOKENIZER_STATE.INTEGER_0
 117:                 add_char = True
 118:             elif char in '123456789':
 119:                 next_state = __TOKENIZER_STATE.INTEGER
-------
 114:         elif state == __TOKENIZER_STATE.INTEGER_SIGN:
-------
--------------------------------------------------------------------------------
[0.00918 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 157] COI nayajson:115: 
--------------------------------------------------------------------------------
 111:                 advance = False
 112:             else:
 113:                 raise ValueError("A 0 must be followed by a '.' or a 'e'.  Got '{0}'".format(char))
 114:         elif state == __TOKENIZER_STATE.INTEGER_SIGN:
~115:             if (not char == '0'):
 116:                 next_state = __TOKENIZER_STATE.INTEGER_0
 117:                 add_char = True
 118:             elif char in '123456789':
 119:                 next_state = __TOKENIZER_STATE.INTEGER
 120:                 add_char = True
-------
 115:             if char == '0':
-------
--------------------------------------------------------------------------------
[0.00940 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 158] COI nayajson:118: 
--------------------------------------------------------------------------------
 114:         elif state == __TOKENIZER_STATE.INTEGER_SIGN:
 115:             if char == '0':
 116:                 next_state = __TOKENIZER_STATE.INTEGER_0
 117:                 add_char = True
~118:             elif (not char in '123456789'):
 119:                 next_state = __TOKENIZER_STATE.INTEGER
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
-------
 118:             elif char in '123456789':
-------
--------------------------------------------------------------------------------
[0.01674 s] +survived
   - [# 159] COI nayajson:118: 
--------------------------------------------------------------------------------
 114:         elif state == __TOKENIZER_STATE.INTEGER_SIGN:
 115:             if char == '0':
 116:                 next_state = __TOKENIZER_STATE.INTEGER_0
 117:                 add_char = True
~118:             elif char not in '123456789':
 119:                 next_state = __TOKENIZER_STATE.INTEGER
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
-------
 118:             elif char in '123456789':
-------
--------------------------------------------------------------------------------
[0.01348 s] +survived
   - [# 160] COI nayajson:123: 
--------------------------------------------------------------------------------
 119:                 next_state = __TOKENIZER_STATE.INTEGER
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
~123:         elif (not state == __TOKENIZER_STATE.INTEGER_EXP_0):
 124:             if (char == '+' or char == '-' or char in '0123456789'):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
-------
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
-------
--------------------------------------------------------------------------------
[0.00842 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 161] COI nayajson:124: 
--------------------------------------------------------------------------------
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
~124:             if (not (char == '+' or char == '-' or char in '0123456789')):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
-------
 124:             if (char == '+' or char == '-' or char in '0123456789'):
-------
--------------------------------------------------------------------------------
[0.00922 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 162] COI nayajson:124: 
--------------------------------------------------------------------------------
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
~124:             if (char == '+' or char == '-' or char not in '0123456789'):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
-------
 124:             if (char == '+' or char == '-' or char in '0123456789'):
-------
--------------------------------------------------------------------------------
[0.00970 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 163] COI nayajson:129: 
--------------------------------------------------------------------------------
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
~129:         elif (not state == __TOKENIZER_STATE.INTEGER_EXP):
 130:             if char in '0123456789':
 131:                 add_char = True
 132:             elif is_delimiter(char):
 133:                 completed = True
 134:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
-------
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
-------
--------------------------------------------------------------------------------
[0.00899 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 164] COI nayajson:130: 
--------------------------------------------------------------------------------
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
~130:             if (not char in '0123456789'):
 131:                 add_char = True
 132:             elif is_delimiter(char):
 133:                 completed = True
 134:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
 135:                 next_state = __TOKENIZER_STATE.WHITESPACE
-------
 130:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.00997 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 165] COI nayajson:130: 
--------------------------------------------------------------------------------
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
~130:             if char not in '0123456789':
 131:                 add_char = True
 132:             elif is_delimiter(char):
 133:                 completed = True
 134:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
 135:                 next_state = __TOKENIZER_STATE.WHITESPACE
-------
 130:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.00953 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 166] COI nayajson:132: 
--------------------------------------------------------------------------------
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
 130:             if char in '0123456789':
 131:                 add_char = True
~132:             elif (not is_delimiter(char)):
 133:                 completed = True
 134:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
 135:                 next_state = __TOKENIZER_STATE.WHITESPACE
 136:                 advance = False
 137:             else:
-------
 132:             elif is_delimiter(char):
-------
--------------------------------------------------------------------------------
[0.00944 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 167] COI nayajson:139: 
--------------------------------------------------------------------------------
 135:                 next_state = __TOKENIZER_STATE.WHITESPACE
 136:                 advance = False
 137:             else:
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
~139:         elif (not state == __TOKENIZER_STATE.FLOATING_POINT):
 140:             if char in '0123456789':
 141:                 add_char = True
 142:             elif (char == 'e' or char == 'E'):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
-------
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
-------
--------------------------------------------------------------------------------
[0.00904 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 168] COI nayajson:140: 
--------------------------------------------------------------------------------
 136:                 advance = False
 137:             else:
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
~140:             if (not char in '0123456789'):
 141:                 add_char = True
 142:             elif (char == 'e' or char == 'E'):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
 145:             elif is_delimiter(char):
-------
 140:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.00936 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 169] COI nayajson:140: 
--------------------------------------------------------------------------------
 136:                 advance = False
 137:             else:
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
~140:             if char not in '0123456789':
 141:                 add_char = True
 142:             elif (char == 'e' or char == 'E'):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
 145:             elif is_delimiter(char):
-------
 140:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.00899 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 170] COI nayajson:142: 
--------------------------------------------------------------------------------
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
 140:             if char in '0123456789':
 141:                 add_char = True
~142:             elif (not (char == 'e' or char == 'E')):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
 145:             elif is_delimiter(char):
 146:                 completed = True
 147:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
-------
 142:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.00919 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 171] COI nayajson:145: 
--------------------------------------------------------------------------------
 141:                 add_char = True
 142:             elif (char == 'e' or char == 'E'):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
~145:             elif (not is_delimiter(char)):
 146:                 completed = True
 147:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
 148:                 next_state = __TOKENIZER_STATE.WHITESPACE
 149:                 advance = False
 150:             else:
-------
 145:             elif is_delimiter(char):
-------
--------------------------------------------------------------------------------
[0.00931 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 172] COI nayajson:152: 
--------------------------------------------------------------------------------
 148:                 next_state = __TOKENIZER_STATE.WHITESPACE
 149:                 advance = False
 150:             else:
 151:                 raise ValueError('A number must include only digits')
~152:         elif (not state == __TOKENIZER_STATE.FLOATING_POINT_0):
 153:             if char in '0123456789':
 154:                 next_state = __TOKENIZER_STATE.FLOATING_POINT
 155:                 add_char = True
 156:             else:
 157:                 raise ValueError('A number with a decimal point must be followed by a fractional part')
-------
 152:         elif state == __TOKENIZER_STATE.FLOATING_POINT_0:
-------
--------------------------------------------------------------------------------
[0.00904 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 173] COI nayajson:153: 
--------------------------------------------------------------------------------
 149:                 advance = False
 150:             else:
 151:                 raise ValueError('A number must include only digits')
 152:         elif state == __TOKENIZER_STATE.FLOATING_POINT_0:
~153:             if (not char in '0123456789'):
 154:                 next_state = __TOKENIZER_STATE.FLOATING_POINT
 155:                 add_char = True
 156:             else:
 157:                 raise ValueError('A number with a decimal point must be followed by a fractional part')
 158:         elif state == __TOKENIZER_STATE.FALSE_1:
-------
 153:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.00982 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 174] COI nayajson:153: 
--------------------------------------------------------------------------------
 149:                 advance = False
 150:             else:
 151:                 raise ValueError('A number must include only digits')
 152:         elif state == __TOKENIZER_STATE.FLOATING_POINT_0:
~153:             if char not in '0123456789':
 154:                 next_state = __TOKENIZER_STATE.FLOATING_POINT
 155:                 add_char = True
 156:             else:
 157:                 raise ValueError('A number with a decimal point must be followed by a fractional part')
 158:         elif state == __TOKENIZER_STATE.FALSE_1:
-------
 153:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.00912 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 175] COI nayajson:158: 
--------------------------------------------------------------------------------
 154:                 next_state = __TOKENIZER_STATE.FLOATING_POINT
 155:                 add_char = True
 156:             else:
 157:                 raise ValueError('A number with a decimal point must be followed by a fractional part')
~158:         elif (not state == __TOKENIZER_STATE.FALSE_1):
 159:             if char == 'a':
 160:                 next_state = __TOKENIZER_STATE.FALSE_2
 161:             else:
 162:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 163:         elif state == __TOKENIZER_STATE.FALSE_2:
-------
 158:         elif state == __TOKENIZER_STATE.FALSE_1:
-------
--------------------------------------------------------------------------------
[0.00899 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 176] COI nayajson:159: 
--------------------------------------------------------------------------------
 155:                 add_char = True
 156:             else:
 157:                 raise ValueError('A number with a decimal point must be followed by a fractional part')
 158:         elif state == __TOKENIZER_STATE.FALSE_1:
~159:             if (not char == 'a'):
 160:                 next_state = __TOKENIZER_STATE.FALSE_2
 161:             else:
 162:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 163:         elif state == __TOKENIZER_STATE.FALSE_2:
 164:             if char == 'l':
-------
 159:             if char == 'a':
-------
--------------------------------------------------------------------------------
[0.01716 s] +survived
   - [# 177] COI nayajson:163: 
--------------------------------------------------------------------------------
 159:             if char == 'a':
 160:                 next_state = __TOKENIZER_STATE.FALSE_2
 161:             else:
 162:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~163:         elif (not state == __TOKENIZER_STATE.FALSE_2):
 164:             if char == 'l':
 165:                 next_state = __TOKENIZER_STATE.FALSE_3
 166:             else:
 167:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 168:         elif state == __TOKENIZER_STATE.FALSE_3:
-------
 163:         elif state == __TOKENIZER_STATE.FALSE_2:
-------
--------------------------------------------------------------------------------
[0.00897 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 178] COI nayajson:164: 
--------------------------------------------------------------------------------
 160:                 next_state = __TOKENIZER_STATE.FALSE_2
 161:             else:
 162:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 163:         elif state == __TOKENIZER_STATE.FALSE_2:
~164:             if (not char == 'l'):
 165:                 next_state = __TOKENIZER_STATE.FALSE_3
 166:             else:
 167:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 168:         elif state == __TOKENIZER_STATE.FALSE_3:
 169:             if char == 's':
-------
 164:             if char == 'l':
-------
--------------------------------------------------------------------------------
[0.01832 s] +survived
   - [# 179] COI nayajson:168: 
--------------------------------------------------------------------------------
 164:             if char == 'l':
 165:                 next_state = __TOKENIZER_STATE.FALSE_3
 166:             else:
 167:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~168:         elif (not state == __TOKENIZER_STATE.FALSE_3):
 169:             if char == 's':
 170:                 next_state = __TOKENIZER_STATE.FALSE_4
 171:             else:
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 173:         elif state == __TOKENIZER_STATE.FALSE_4:
-------
 168:         elif state == __TOKENIZER_STATE.FALSE_3:
-------
--------------------------------------------------------------------------------
[0.00949 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 180] COI nayajson:169: 
--------------------------------------------------------------------------------
 165:                 next_state = __TOKENIZER_STATE.FALSE_3
 166:             else:
 167:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 168:         elif state == __TOKENIZER_STATE.FALSE_3:
~169:             if (not char == 's'):
 170:                 next_state = __TOKENIZER_STATE.FALSE_4
 171:             else:
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 173:         elif state == __TOKENIZER_STATE.FALSE_4:
 174:             if char == 'e':
-------
 169:             if char == 's':
-------
--------------------------------------------------------------------------------
[0.01661 s] +survived
   - [# 181] COI nayajson:173: 
--------------------------------------------------------------------------------
 169:             if char == 's':
 170:                 next_state = __TOKENIZER_STATE.FALSE_4
 171:             else:
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~173:         elif (not state == __TOKENIZER_STATE.FALSE_4):
 174:             if char == 'e':
 175:                 next_state = __TOKENIZER_STATE.WHITESPACE
 176:                 completed = True
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
 178:             else:
-------
 173:         elif state == __TOKENIZER_STATE.FALSE_4:
-------
--------------------------------------------------------------------------------
[0.00935 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 182] COI nayajson:174: 
--------------------------------------------------------------------------------
 170:                 next_state = __TOKENIZER_STATE.FALSE_4
 171:             else:
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 173:         elif state == __TOKENIZER_STATE.FALSE_4:
~174:             if (not char == 'e'):
 175:                 next_state = __TOKENIZER_STATE.WHITESPACE
 176:                 completed = True
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
 178:             else:
 179:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 174:             if char == 'e':
-------
--------------------------------------------------------------------------------
[0.01752 s] +survived
   - [# 183] COI nayajson:180: 
--------------------------------------------------------------------------------
 176:                 completed = True
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
 178:             else:
 179:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~180:         elif (not state == __TOKENIZER_STATE.TRUE_1):
 181:             if char == 'r':
 182:                 next_state = __TOKENIZER_STATE.TRUE_2
 183:             else:
 184:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 185:         elif state == __TOKENIZER_STATE.TRUE_2:
-------
 180:         elif state == __TOKENIZER_STATE.TRUE_1:
-------
--------------------------------------------------------------------------------
[0.00901 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 184] COI nayajson:181: 
--------------------------------------------------------------------------------
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
 178:             else:
 179:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 180:         elif state == __TOKENIZER_STATE.TRUE_1:
~181:             if (not char == 'r'):
 182:                 next_state = __TOKENIZER_STATE.TRUE_2
 183:             else:
 184:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 185:         elif state == __TOKENIZER_STATE.TRUE_2:
 186:             if char == 'u':
-------
 181:             if char == 'r':
-------
--------------------------------------------------------------------------------
[0.01180 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 185] COI nayajson:185: 
--------------------------------------------------------------------------------
 181:             if char == 'r':
 182:                 next_state = __TOKENIZER_STATE.TRUE_2
 183:             else:
 184:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~185:         elif (not state == __TOKENIZER_STATE.TRUE_2):
 186:             if char == 'u':
 187:                 next_state = __TOKENIZER_STATE.TRUE_3
 188:             else:
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 190:         elif state == __TOKENIZER_STATE.TRUE_3:
-------
 185:         elif state == __TOKENIZER_STATE.TRUE_2:
-------
--------------------------------------------------------------------------------
[0.00874 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 186] COI nayajson:186: 
--------------------------------------------------------------------------------
 182:                 next_state = __TOKENIZER_STATE.TRUE_2
 183:             else:
 184:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 185:         elif state == __TOKENIZER_STATE.TRUE_2:
~186:             if (not char == 'u'):
 187:                 next_state = __TOKENIZER_STATE.TRUE_3
 188:             else:
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 190:         elif state == __TOKENIZER_STATE.TRUE_3:
 191:             if char == 'e':
-------
 186:             if char == 'u':
-------
--------------------------------------------------------------------------------
[0.01194 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 187] COI nayajson:190: 
--------------------------------------------------------------------------------
 186:             if char == 'u':
 187:                 next_state = __TOKENIZER_STATE.TRUE_3
 188:             else:
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~190:         elif (not state == __TOKENIZER_STATE.TRUE_3):
 191:             if char == 'e':
 192:                 next_state = __TOKENIZER_STATE.WHITESPACE
 193:                 completed = True
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
 195:             else:
-------
 190:         elif state == __TOKENIZER_STATE.TRUE_3:
-------
--------------------------------------------------------------------------------
[0.00903 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 188] COI nayajson:191: 
--------------------------------------------------------------------------------
 187:                 next_state = __TOKENIZER_STATE.TRUE_3
 188:             else:
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 190:         elif state == __TOKENIZER_STATE.TRUE_3:
~191:             if (not char == 'e'):
 192:                 next_state = __TOKENIZER_STATE.WHITESPACE
 193:                 completed = True
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
 195:             else:
 196:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 191:             if char == 'e':
-------
--------------------------------------------------------------------------------
[0.01210 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 189] COI nayajson:197: 
--------------------------------------------------------------------------------
 193:                 completed = True
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
 195:             else:
 196:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~197:         elif (not state == __TOKENIZER_STATE.NULL_1):
 198:             if char == 'u':
 199:                 next_state = __TOKENIZER_STATE.NULL_2
 200:             else:
 201:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 202:         elif state == __TOKENIZER_STATE.NULL_2:
-------
 197:         elif state == __TOKENIZER_STATE.NULL_1:
-------
--------------------------------------------------------------------------------
[0.00908 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 190] COI nayajson:198: 
--------------------------------------------------------------------------------
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
 195:             else:
 196:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 197:         elif state == __TOKENIZER_STATE.NULL_1:
~198:             if (not char == 'u'):
 199:                 next_state = __TOKENIZER_STATE.NULL_2
 200:             else:
 201:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 202:         elif state == __TOKENIZER_STATE.NULL_2:
 203:             if char == 'l':
-------
 198:             if char == 'u':
-------
--------------------------------------------------------------------------------
[0.01352 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 191] COI nayajson:202: 
--------------------------------------------------------------------------------
 198:             if char == 'u':
 199:                 next_state = __TOKENIZER_STATE.NULL_2
 200:             else:
 201:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~202:         elif (not state == __TOKENIZER_STATE.NULL_2):
 203:             if char == 'l':
 204:                 next_state = __TOKENIZER_STATE.NULL_3
 205:             else:
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 207:         elif state == __TOKENIZER_STATE.NULL_3:
-------
 202:         elif state == __TOKENIZER_STATE.NULL_2:
-------
--------------------------------------------------------------------------------
[0.00936 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 192] COI nayajson:203: 
--------------------------------------------------------------------------------
 199:                 next_state = __TOKENIZER_STATE.NULL_2
 200:             else:
 201:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 202:         elif state == __TOKENIZER_STATE.NULL_2:
~203:             if (not char == 'l'):
 204:                 next_state = __TOKENIZER_STATE.NULL_3
 205:             else:
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 207:         elif state == __TOKENIZER_STATE.NULL_3:
 208:             if char == 'l':
-------
 203:             if char == 'l':
-------
--------------------------------------------------------------------------------
[0.01368 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 193] COI nayajson:207: 
--------------------------------------------------------------------------------
 203:             if char == 'l':
 204:                 next_state = __TOKENIZER_STATE.NULL_3
 205:             else:
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~207:         elif (not state == __TOKENIZER_STATE.NULL_3):
 208:             if char == 'l':
 209:                 next_state = __TOKENIZER_STATE.WHITESPACE
 210:                 completed = True
 211:                 now_token = (TOKEN_TYPE.NULL, None)
 212:             else:
-------
 207:         elif state == __TOKENIZER_STATE.NULL_3:
-------
--------------------------------------------------------------------------------
[0.00907 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 194] COI nayajson:208: 
--------------------------------------------------------------------------------
 204:                 next_state = __TOKENIZER_STATE.NULL_3
 205:             else:
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 207:         elif state == __TOKENIZER_STATE.NULL_3:
~208:             if (not char == 'l'):
 209:                 next_state = __TOKENIZER_STATE.WHITESPACE
 210:                 completed = True
 211:                 now_token = (TOKEN_TYPE.NULL, None)
 212:             else:
 213:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 208:             if char == 'l':
-------
--------------------------------------------------------------------------------
[0.01327 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 195] COI nayajson:214: 
--------------------------------------------------------------------------------
 210:                 completed = True
 211:                 now_token = (TOKEN_TYPE.NULL, None)
 212:             else:
 213:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~214:         elif (not state == __TOKENIZER_STATE.STRING):
 215:             if char == '"':
 216:                 completed = True
 217:                 now_token = (TOKEN_TYPE.STRING, ''.join(token))
 218:                 next_state = __TOKENIZER_STATE.STRING_END
 219:             elif char == '\\':
-------
 214:         elif state == __TOKENIZER_STATE.STRING:
-------
--------------------------------------------------------------------------------
[0.00911 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 196] COI nayajson:215: 
--------------------------------------------------------------------------------
 211:                 now_token = (TOKEN_TYPE.NULL, None)
 212:             else:
 213:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 214:         elif state == __TOKENIZER_STATE.STRING:
~215:             if (not char == '"'):
 216:                 completed = True
 217:                 now_token = (TOKEN_TYPE.STRING, ''.join(token))
 218:                 next_state = __TOKENIZER_STATE.STRING_END
 219:             elif char == '\\':
 220:                 next_state = __TOKENIZER_STATE.STRING_ESCAPE
-------
 215:             if char == '"':
-------
--------------------------------------------------------------------------------
[0.00806 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 197] COI nayajson:219: 
--------------------------------------------------------------------------------
 215:             if char == '"':
 216:                 completed = True
 217:                 now_token = (TOKEN_TYPE.STRING, ''.join(token))
 218:                 next_state = __TOKENIZER_STATE.STRING_END
~219:             elif (not char == '\\'):
 220:                 next_state = __TOKENIZER_STATE.STRING_ESCAPE
 221:             else:
 222:                 add_char = True
 223:         elif state == __TOKENIZER_STATE.STRING_END:
 224:             if is_delimiter(char):
-------
 219:             elif char == '\\':
-------
--------------------------------------------------------------------------------
[0.00816 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 198] COI nayajson:223: 
--------------------------------------------------------------------------------
 219:             elif char == '\\':
 220:                 next_state = __TOKENIZER_STATE.STRING_ESCAPE
 221:             else:
 222:                 add_char = True
~223:         elif (not state == __TOKENIZER_STATE.STRING_END):
 224:             if is_delimiter(char):
 225:                 advance = False
 226:                 next_state = __TOKENIZER_STATE.WHITESPACE
 227:             else:
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
-------
 223:         elif state == __TOKENIZER_STATE.STRING_END:
-------
--------------------------------------------------------------------------------
[0.00849 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 199] COI nayajson:224: 
--------------------------------------------------------------------------------
 220:                 next_state = __TOKENIZER_STATE.STRING_ESCAPE
 221:             else:
 222:                 add_char = True
 223:         elif state == __TOKENIZER_STATE.STRING_END:
~224:             if (not is_delimiter(char)):
 225:                 advance = False
 226:                 next_state = __TOKENIZER_STATE.WHITESPACE
 227:             else:
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
-------
 224:             if is_delimiter(char):
-------
--------------------------------------------------------------------------------
[0.00933 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 200] COI nayajson:229: 
--------------------------------------------------------------------------------
 225:                 advance = False
 226:                 next_state = __TOKENIZER_STATE.WHITESPACE
 227:             else:
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
~229:         elif (not state == __TOKENIZER_STATE.STRING_ESCAPE):
 230:             next_state = __TOKENIZER_STATE.STRING
 231:             if (char == '\\' or char == '"'):
 232:                 add_char = True
 233:             elif char == 'b':
 234:                 char = '\x08'
-------
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
-------
--------------------------------------------------------------------------------
[0.01759 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 201] COI nayajson:231: 
--------------------------------------------------------------------------------
 227:             else:
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
 230:             next_state = __TOKENIZER_STATE.STRING
~231:             if (not (char == '\\' or char == '"')):
 232:                 add_char = True
 233:             elif char == 'b':
 234:                 char = '\x08'
 235:                 add_char = True
 236:             elif char == 'f':
-------
 231:             if (char == '\\' or char == '"'):
-------
--------------------------------------------------------------------------------
[0.01890 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 202] COI nayajson:233: 
--------------------------------------------------------------------------------
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
 230:             next_state = __TOKENIZER_STATE.STRING
 231:             if (char == '\\' or char == '"'):
 232:                 add_char = True
~233:             elif (not char == 'b'):
 234:                 char = '\x08'
 235:                 add_char = True
 236:             elif char == 'f':
 237:                 char = '\x0c'
 238:                 add_char = True
-------
 233:             elif char == 'b':
-------
--------------------------------------------------------------------------------
[0.01786 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 203] COI nayajson:236: 
--------------------------------------------------------------------------------
 232:                 add_char = True
 233:             elif char == 'b':
 234:                 char = '\x08'
 235:                 add_char = True
~236:             elif (not char == 'f'):
 237:                 char = '\x0c'
 238:                 add_char = True
 239:             elif char == 'n':
 240:                 char = '\n'
 241:                 add_char = True
-------
 236:             elif char == 'f':
-------
--------------------------------------------------------------------------------
[0.01765 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 204] COI nayajson:239: 
--------------------------------------------------------------------------------
 235:                 add_char = True
 236:             elif char == 'f':
 237:                 char = '\x0c'
 238:                 add_char = True
~239:             elif (not char == 'n'):
 240:                 char = '\n'
 241:                 add_char = True
 242:             elif char == 't':
 243:                 char = '\t'
 244:                 add_char = True
-------
 239:             elif char == 'n':
-------
--------------------------------------------------------------------------------
[0.01758 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 205] COI nayajson:242: 
--------------------------------------------------------------------------------
 238:                 add_char = True
 239:             elif char == 'n':
 240:                 char = '\n'
 241:                 add_char = True
~242:             elif (not char == 't'):
 243:                 char = '\t'
 244:                 add_char = True
 245:             elif char == 'r':
 246:                 char = '\r'
 247:                 add_char = True
-------
 242:             elif char == 't':
-------
--------------------------------------------------------------------------------
[0.01589 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 206] COI nayajson:245: 
--------------------------------------------------------------------------------
 241:                 add_char = True
 242:             elif char == 't':
 243:                 char = '\t'
 244:                 add_char = True
~245:             elif (not char == 'r'):
 246:                 char = '\r'
 247:                 add_char = True
 248:             elif char == '/':
 249:                 char = '/'
 250:                 add_char = True
-------
 245:             elif char == 'r':
-------
--------------------------------------------------------------------------------
[0.01849 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 207] COI nayajson:248: 
--------------------------------------------------------------------------------
 244:                 add_char = True
 245:             elif char == 'r':
 246:                 char = '\r'
 247:                 add_char = True
~248:             elif (not char == '/'):
 249:                 char = '/'
 250:                 add_char = True
 251:             elif char == 'u':
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
 253:                 charcode = 0
-------
 248:             elif char == '/':
-------
--------------------------------------------------------------------------------
[0.01771 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 208] COI nayajson:251: 
--------------------------------------------------------------------------------
 247:                 add_char = True
 248:             elif char == '/':
 249:                 char = '/'
 250:                 add_char = True
~251:             elif (not char == 'u'):
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
 253:                 charcode = 0
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
-------
 251:             elif char == 'u':
-------
--------------------------------------------------------------------------------
[0.01637 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 209] COI nayajson:256: 
--------------------------------------------------------------------------------
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
 253:                 charcode = 0
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
~256:         elif (not state == __TOKENIZER_STATE.UNICODE_1):
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
-------
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
-------
--------------------------------------------------------------------------------
[0.01419 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 210] COI nayajson:257: 
--------------------------------------------------------------------------------
 253:                 charcode = 0
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
~257:             if (not char in '0123456789'):
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
-------
 257:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.02557 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 211] COI nayajson:257: 
--------------------------------------------------------------------------------
 253:                 charcode = 0
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
~257:             if char not in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
-------
 257:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.01964 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 212] COI nayajson:259: 
--------------------------------------------------------------------------------
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
~259:             elif (not char in 'abcdef'):
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
-------
 259:             elif char in 'abcdef':
-------
--------------------------------------------------------------------------------
[0.01890 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 213] COI nayajson:259: 
--------------------------------------------------------------------------------
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
~259:             elif char not in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
-------
 259:             elif char in 'abcdef':
-------
--------------------------------------------------------------------------------
[0.02468 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 214] COI nayajson:261: 
--------------------------------------------------------------------------------
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
~261:             elif (not char in 'ABCDEF'):
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
-------
 261:             elif char in 'ABCDEF':
-------
--------------------------------------------------------------------------------
[0.01895 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 215] COI nayajson:261: 
--------------------------------------------------------------------------------
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
~261:             elif char not in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
-------
 261:             elif char in 'ABCDEF':
-------
--------------------------------------------------------------------------------
[0.01790 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 216] COI nayajson:267: 
--------------------------------------------------------------------------------
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
~267:         elif (not state == __TOKENIZER_STATE.UNICODE_2):
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
-------
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
-------
--------------------------------------------------------------------------------
[0.01831 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 217] COI nayajson:268: 
--------------------------------------------------------------------------------
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
~268:             if (not char in '0123456789'):
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
-------
 268:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.01759 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 218] COI nayajson:268: 
--------------------------------------------------------------------------------
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
~268:             if char not in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
-------
 268:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.01732 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 219] COI nayajson:270: 
--------------------------------------------------------------------------------
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
~270:             elif (not char in 'abcdef'):
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
-------
 270:             elif char in 'abcdef':
-------
--------------------------------------------------------------------------------
[0.01859 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 220] COI nayajson:270: 
--------------------------------------------------------------------------------
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
~270:             elif char not in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
-------
 270:             elif char in 'abcdef':
-------
--------------------------------------------------------------------------------
[0.01961 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 221] COI nayajson:272: 
--------------------------------------------------------------------------------
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
~272:             elif (not char in 'ABCDEF'):
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
-------
 272:             elif char in 'ABCDEF':
-------
--------------------------------------------------------------------------------
[0.02121 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 222] COI nayajson:272: 
--------------------------------------------------------------------------------
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
~272:             elif char not in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
-------
 272:             elif char in 'ABCDEF':
-------
--------------------------------------------------------------------------------
[0.01546 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 223] COI nayajson:278: 
--------------------------------------------------------------------------------
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
~278:         elif (not state == __TOKENIZER_STATE.UNICODE_3):
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
-------
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
-------
--------------------------------------------------------------------------------
[0.01639 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 224] COI nayajson:279: 
--------------------------------------------------------------------------------
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
~279:             if (not char in '0123456789'):
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
-------
 279:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.01846 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 225] COI nayajson:279: 
--------------------------------------------------------------------------------
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
~279:             if char not in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
-------
 279:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.01856 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 226] COI nayajson:281: 
--------------------------------------------------------------------------------
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
~281:             elif (not char in 'abcdef'):
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
-------
 281:             elif char in 'abcdef':
-------
--------------------------------------------------------------------------------
[0.01890 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 227] COI nayajson:281: 
--------------------------------------------------------------------------------
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
~281:             elif char not in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
-------
 281:             elif char in 'abcdef':
-------
--------------------------------------------------------------------------------
[0.02030 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 228] COI nayajson:283: 
--------------------------------------------------------------------------------
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
~283:             elif (not char in 'ABCDEF'):
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
-------
 283:             elif char in 'ABCDEF':
-------
--------------------------------------------------------------------------------
[0.01708 s] +survived
   - [# 229] COI nayajson:283: 
--------------------------------------------------------------------------------
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
~283:             elif char not in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
-------
 283:             elif char in 'ABCDEF':
-------
--------------------------------------------------------------------------------
[0.01689 s] +survived
   - [# 230] COI nayajson:289: 
--------------------------------------------------------------------------------
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
~289:         elif (not state == __TOKENIZER_STATE.UNICODE_4):
 290:             if char in '0123456789':
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
 293:                 charcode += ord(char) - 87
 294:             elif char in 'ABCDEF':
-------
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
-------
--------------------------------------------------------------------------------
[0.01907 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 231] COI nayajson:290: 
--------------------------------------------------------------------------------
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
~290:             if (not char in '0123456789'):
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
 293:                 charcode += ord(char) - 87
 294:             elif char in 'ABCDEF':
 295:                 charcode += ord(char) - 55
-------
 290:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.01812 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 232] COI nayajson:290: 
--------------------------------------------------------------------------------
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
~290:             if char not in '0123456789':
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
 293:                 charcode += ord(char) - 87
 294:             elif char in 'ABCDEF':
 295:                 charcode += ord(char) - 55
-------
 290:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.01815 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 233] COI nayajson:292: 
--------------------------------------------------------------------------------
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
 290:             if char in '0123456789':
 291:                 charcode += ord(char) - 48
~292:             elif (not char in 'abcdef'):
 293:                 charcode += ord(char) - 87
 294:             elif char in 'ABCDEF':
 295:                 charcode += ord(char) - 55
 296:             else:
 297:                 raise ValueError('Invalid character code: {}'.format(char))
-------
 292:             elif char in 'abcdef':
-------
--------------------------------------------------------------------------------
[0.01749 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 234] COI nayajson:292: 
--------------------------------------------------------------------------------
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
 290:             if char in '0123456789':
 291:                 charcode += ord(char) - 48
~292:             elif char not in 'abcdef':
 293:                 charcode += ord(char) - 87
 294:             elif char in 'ABCDEF':
 295:                 charcode += ord(char) - 55
 296:             else:
 297:                 raise ValueError('Invalid character code: {}'.format(char))
-------
 292:             elif char in 'abcdef':
-------
--------------------------------------------------------------------------------
[0.02150 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 235] COI nayajson:294: 
--------------------------------------------------------------------------------
 290:             if char in '0123456789':
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
 293:                 charcode += ord(char) - 87
~294:             elif (not char in 'ABCDEF'):
 295:                 charcode += ord(char) - 55
 296:             else:
 297:                 raise ValueError('Invalid character code: {}'.format(char))
 298:             next_state = __TOKENIZER_STATE.STRING
 299:             char = chr(charcode)
-------
 294:             elif char in 'ABCDEF':
-------
--------------------------------------------------------------------------------
[0.01823 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 236] COI nayajson:294: 
--------------------------------------------------------------------------------
 290:             if char in '0123456789':
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
 293:                 charcode += ord(char) - 87
~294:             elif char not in 'ABCDEF':
 295:                 charcode += ord(char) - 55
 296:             else:
 297:                 raise ValueError('Invalid character code: {}'.format(char))
 298:             next_state = __TOKENIZER_STATE.STRING
 299:             char = chr(charcode)
-------
 294:             elif char in 'ABCDEF':
-------
--------------------------------------------------------------------------------
[0.01834 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 237] COI nayajson:301: 
--------------------------------------------------------------------------------
 297:                 raise ValueError('Invalid character code: {}'.format(char))
 298:             next_state = __TOKENIZER_STATE.STRING
 299:             char = chr(charcode)
 300:             add_char = True
~301:         if (not add_char):
 302:             token.append(char)
 303:         return (advance, next_state, charcode)
 304:     state = __TOKENIZER_STATE.WHITESPACE
 305:     char = stream.read(1)
 306:     index = 0
-------
 301:         if add_char:
-------
--------------------------------------------------------------------------------
[0.00867 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 238] COI nayajson:307: 
--------------------------------------------------------------------------------
 303:         return (advance, next_state, charcode)
 304:     state = __TOKENIZER_STATE.WHITESPACE
 305:     char = stream.read(1)
 306:     index = 0
~307:     while (not char):
 308:         try:
 309:             (advance, state, charcode) = process_char(char, charcode)
 310:         except ValueError as e:
 311:             raise ValueError(''.join([e.args[0], ' at index {}'.format(index)]))
 312:         if completed:
-------
 307:     while char:
-------
--------------------------------------------------------------------------------
[0.00708 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 239] COI nayajson:312: 
--------------------------------------------------------------------------------
 308:         try:
 309:             (advance, state, charcode) = process_char(char, charcode)
 310:         except ValueError as e:
 311:             raise ValueError(''.join([e.args[0], ' at index {}'.format(index)]))
~312:         if (not completed):
 313:             completed = False
 314:             token = []
 315:             yield now_token
 316:         if advance:
 317:             char = stream.read(1)
-------
 312:         if completed:
-------
--------------------------------------------------------------------------------
[0.00706 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 240] COI nayajson:316: 
--------------------------------------------------------------------------------
 312:         if completed:
 313:             completed = False
 314:             token = []
 315:             yield now_token
~316:         if (not advance):
 317:             char = stream.read(1)
 318:             index += 1
 319:     process_char(' ', charcode)
 320:     if completed:
 321:         yield now_token
-------
 316:         if advance:
-------
--------------------------------------------------------------------------------
[5.00647 s] timeout
   - [# 241] COI nayajson:320: 
--------------------------------------------------------------------------------
 316:         if advance:
 317:             char = stream.read(1)
 318:             index += 1
 319:     process_char(' ', charcode)
~320:     if (not completed):
 321:         yield now_token
 322: def parse_string(string):
 323:     return parse(StringIO(string))
 324: def parse(file):
 325:     token_stream = tokenize(file)
-------
 320:     if completed:
-------
--------------------------------------------------------------------------------
[0.01028 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 242] COI nayajson:339: 
--------------------------------------------------------------------------------
 335:             self.key = key
 336:             self.value = None
 337:             self.set = False
 338:         def __str__(self):
~339:             if (not self.set):
 340:                 return '{}: {}'.format(self.key, self.value)
 341:             else:
 342:                 return '{}: <NULL>'.format(self.key)
 343:     stack = []
 344:     (token_type, token) = first_token
-------
 339:             if self.set:
-------
--------------------------------------------------------------------------------
[0.01657 s] +survived
   - [# 243] COI nayajson:345: 
--------------------------------------------------------------------------------
 341:             else:
 342:                 return '{}: <NULL>'.format(self.key)
 343:     stack = []
 344:     (token_type, token) = first_token
~345:     if (not token_type == TOKEN_TYPE.OPERATOR):
 346:         if token == '{':
 347:             stack.append({})
 348:         elif token == '[':
 349:             stack.append([])
 350:         else:
-------
 345:     if token_type == TOKEN_TYPE.OPERATOR:
-------
--------------------------------------------------------------------------------
[0.00820 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 244] COI nayajson:346: 
--------------------------------------------------------------------------------
 342:                 return '{}: <NULL>'.format(self.key)
 343:     stack = []
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
~346:         if (not token == '{'):
 347:             stack.append({})
 348:         elif token == '[':
 349:             stack.append([])
 350:         else:
 351:             raise ValueError("Expected object or array.  Got '{}'".format(token))
-------
 346:         if token == '{':
-------
--------------------------------------------------------------------------------
[0.00904 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 245] COI nayajson:348: 
--------------------------------------------------------------------------------
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
 346:         if token == '{':
 347:             stack.append({})
~348:         elif (not token == '['):
 349:             stack.append([])
 350:         else:
 351:             raise ValueError("Expected object or array.  Got '{}'".format(token))
 352:     else:
 353:         raise ValueError("Expected object or array.  Got '{}'".format(token))
-------
 348:         elif token == '[':
-------
--------------------------------------------------------------------------------
[0.00823 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 246] COI nayajson:360: 
--------------------------------------------------------------------------------
 356:         (token_type, token) = next(token_stream)
 357:     except StopIteration as e:
 358:         raise ValueError('Too many opening braces') from e
 359:     try:
~360:         while (not True):
 361:             if isinstance(stack[(-1)], list):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
 363:                     if last_token == '[':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
-------
 360:         while True:
-------
--------------------------------------------------------------------------------
[0.00854 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 247] COI nayajson:361: 
--------------------------------------------------------------------------------
 357:     except StopIteration as e:
 358:         raise ValueError('Too many opening braces') from e
 359:     try:
 360:         while True:
~361:             if (not isinstance(stack[(-1)], list)):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
 363:                     if last_token == '[':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
 366:                                 stack.append({})
-------
 361:             if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.00849 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 248] COI nayajson:362: 
--------------------------------------------------------------------------------
 358:         raise ValueError('Too many opening braces') from e
 359:     try:
 360:         while True:
 361:             if isinstance(stack[(-1)], list):
~362:                 if (not last_type == TOKEN_TYPE.OPERATOR):
 363:                     if last_token == '[':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
 366:                                 stack.append({})
 367:                             elif token == '[':
-------
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
-------
--------------------------------------------------------------------------------
[0.00798 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 249] COI nayajson:363: 
--------------------------------------------------------------------------------
 359:     try:
 360:         while True:
 361:             if isinstance(stack[(-1)], list):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
~363:                     if (not last_token == '['):
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
 366:                                 stack.append({})
 367:                             elif token == '[':
 368:                                 stack.append([])
-------
 363:                     if last_token == '[':
-------
--------------------------------------------------------------------------------
[0.00797 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 250] COI nayajson:364: 
--------------------------------------------------------------------------------
 360:         while True:
 361:             if isinstance(stack[(-1)], list):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
 363:                     if last_token == '[':
~364:                         if (not token_type == TOKEN_TYPE.OPERATOR):
 365:                             if token == '{':
 366:                                 stack.append({})
 367:                             elif token == '[':
 368:                                 stack.append([])
 369:                             elif token != ']':
-------
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
-------
--------------------------------------------------------------------------------
[0.00829 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 251] COI nayajson:365: 
--------------------------------------------------------------------------------
 361:             if isinstance(stack[(-1)], list):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
 363:                     if last_token == '[':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
~365:                             if (not token == '{'):
 366:                                 stack.append({})
 367:                             elif token == '[':
 368:                                 stack.append([])
 369:                             elif token != ']':
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
-------
 365:                             if token == '{':
-------
--------------------------------------------------------------------------------
[0.00850 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 252] COI nayajson:367: 
--------------------------------------------------------------------------------
 363:                     if last_token == '[':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
 366:                                 stack.append({})
~367:                             elif (not token == '['):
 368:                                 stack.append([])
 369:                             elif token != ']':
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
 371:                         else:
 372:                             stack.append(token)
-------
 367:                             elif token == '[':
-------
--------------------------------------------------------------------------------
[0.00775 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 253] COI nayajson:369: 
--------------------------------------------------------------------------------
 365:                             if token == '{':
 366:                                 stack.append({})
 367:                             elif token == '[':
 368:                                 stack.append([])
~369:                             elif (not token != ']'):
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
 371:                         else:
 372:                             stack.append(token)
 373:                     elif last_token == ',':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
-------
 369:                             elif token != ']':
-------
--------------------------------------------------------------------------------
[0.00948 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 254] COI nayajson:373: 
--------------------------------------------------------------------------------
 369:                             elif token != ']':
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
 371:                         else:
 372:                             stack.append(token)
~373:                     elif (not last_token == ','):
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
 375:                             if token == '{':
 376:                                 stack.append({})
 377:                             elif token == '[':
 378:                                 stack.append([])
-------
 373:                     elif last_token == ',':
-------
--------------------------------------------------------------------------------
[0.00824 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 255] COI nayajson:374: 
--------------------------------------------------------------------------------
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
 371:                         else:
 372:                             stack.append(token)
 373:                     elif last_token == ',':
~374:                         if (not token_type == TOKEN_TYPE.OPERATOR):
 375:                             if token == '{':
 376:                                 stack.append({})
 377:                             elif token == '[':
 378:                                 stack.append([])
 379:                             else:
-------
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
-------
--------------------------------------------------------------------------------
[0.00756 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 256] COI nayajson:375: 
--------------------------------------------------------------------------------
 371:                         else:
 372:                             stack.append(token)
 373:                     elif last_token == ',':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
~375:                             if (not token == '{'):
 376:                                 stack.append({})
 377:                             elif token == '[':
 378:                                 stack.append([])
 379:                             else:
 380:                                 raise ValueError("Array value expected.  Got '{}'".format(token))
-------
 375:                             if token == '{':
-------
--------------------------------------------------------------------------------
[0.00831 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 257] COI nayajson:377: 
--------------------------------------------------------------------------------
 373:                     elif last_token == ',':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
 375:                             if token == '{':
 376:                                 stack.append({})
~377:                             elif (not token == '['):
 378:                                 stack.append([])
 379:                             else:
 380:                                 raise ValueError("Array value expected.  Got '{}'".format(token))
 381:                         else:
 382:                             stack.append(token)
-------
 377:                             elif token == '[':
-------
--------------------------------------------------------------------------------
[0.00815 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 258] COI nayajson:383: 
--------------------------------------------------------------------------------
 379:                             else:
 380:                                 raise ValueError("Array value expected.  Got '{}'".format(token))
 381:                         else:
 382:                             stack.append(token)
~383:                     elif (not last_token == ']'):
 384:                         value = stack.pop()
 385:                         if len(stack) == 0:
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
-------
 383:                     elif last_token == ']':
-------
--------------------------------------------------------------------------------
[0.00839 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 259] COI nayajson:385: 
--------------------------------------------------------------------------------
 381:                         else:
 382:                             stack.append(token)
 383:                     elif last_token == ']':
 384:                         value = stack.pop()
~385:                         if (not len(stack) == 0):
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
-------
 385:                         if len(stack) == 0:
-------
--------------------------------------------------------------------------------
[0.00988 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 260] COI nayajson:387: 
--------------------------------------------------------------------------------
 383:                     elif last_token == ']':
 384:                         value = stack.pop()
 385:                         if len(stack) == 0:
 386:                             return value
~387:                         if (not isinstance(stack[(-1)], list)):
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
-------
 387:                         if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.00847 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 261] COI nayajson:389: 
--------------------------------------------------------------------------------
 385:                         if len(stack) == 0:
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
~389:                         elif (not isinstance(stack[(-1)], dict)):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
-------
 389:                         elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01201 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 262] COI nayajson:391: 
--------------------------------------------------------------------------------
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
~391:                         elif (not isinstance(stack[(-1)], KVP)):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
-------
 391:                         elif isinstance(stack[(-1)], KVP):
-------
--------------------------------------------------------------------------------
[0.01208 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 263] COI nayajson:395: 
--------------------------------------------------------------------------------
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
~395:                             if (not len(stack) == 0):
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
 398:                                 stack[(-1)].append(value)
 399:                             elif isinstance(stack[(-1)], dict):
 400:                                 stack[(-1)][value.key] = value.value
-------
 395:                             if len(stack) == 0:
-------
--------------------------------------------------------------------------------
[0.01123 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 264] COI nayajson:397: 
--------------------------------------------------------------------------------
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
~397:                             if (not isinstance(stack[(-1)], list)):
 398:                                 stack[(-1)].append(value)
 399:                             elif isinstance(stack[(-1)], dict):
 400:                                 stack[(-1)][value.key] = value.value
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 397:                             if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.01938 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 265] COI nayajson:399: 
--------------------------------------------------------------------------------
 395:                             if len(stack) == 0:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
 398:                                 stack[(-1)].append(value)
~399:                             elif (not isinstance(stack[(-1)], dict)):
 400:                                 stack[(-1)][value.key] = value.value
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 399:                             elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01267 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 266] COI nayajson:405: 
--------------------------------------------------------------------------------
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
~405:                     elif (not last_token == '}'):
 406:                         raise ValueError("Array closed with a '}'")
 407:                     else:
 408:                         raise ValueError("Array should not contain ':'")
 409:                 else:
 410:                     raise ValueError('Unknown Error')
-------
 405:                     elif last_token == '}':
-------
--------------------------------------------------------------------------------
[0.01620 s] +survived
   - [# 267] COI nayajson:411: 
--------------------------------------------------------------------------------
 407:                     else:
 408:                         raise ValueError("Array should not contain ':'")
 409:                 else:
 410:                     raise ValueError('Unknown Error')
~411:             elif (not isinstance(stack[(-1)], dict)):
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
 413:                     if last_token == '{':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
 416:                                 stack.append({})
-------
 411:             elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.00875 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 268] COI nayajson:412: 
--------------------------------------------------------------------------------
 408:                         raise ValueError("Array should not contain ':'")
 409:                 else:
 410:                     raise ValueError('Unknown Error')
 411:             elif isinstance(stack[(-1)], dict):
~412:                 if (not last_type == TOKEN_TYPE.OPERATOR):
 413:                     if last_token == '{':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
 416:                                 stack.append({})
 417:                             elif token == '[':
-------
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
-------
--------------------------------------------------------------------------------
[0.01006 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 269] COI nayajson:413: 
--------------------------------------------------------------------------------
 409:                 else:
 410:                     raise ValueError('Unknown Error')
 411:             elif isinstance(stack[(-1)], dict):
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
~413:                     if (not last_token == '{'):
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
 416:                                 stack.append({})
 417:                             elif token == '[':
 418:                                 stack.append([])
-------
 413:                     if last_token == '{':
-------
--------------------------------------------------------------------------------
[0.01145 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 270] COI nayajson:414: 
--------------------------------------------------------------------------------
 410:                     raise ValueError('Unknown Error')
 411:             elif isinstance(stack[(-1)], dict):
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
 413:                     if last_token == '{':
~414:                         if (not token_type == TOKEN_TYPE.OPERATOR):
 415:                             if token == '{':
 416:                                 stack.append({})
 417:                             elif token == '[':
 418:                                 stack.append([])
 419:                             elif token != '}':
-------
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
-------
--------------------------------------------------------------------------------
[0.01160 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 271] COI nayajson:415: 
--------------------------------------------------------------------------------
 411:             elif isinstance(stack[(-1)], dict):
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
 413:                     if last_token == '{':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
~415:                             if (not token == '{'):
 416:                                 stack.append({})
 417:                             elif token == '[':
 418:                                 stack.append([])
 419:                             elif token != '}':
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
-------
 415:                             if token == '{':
-------
--------------------------------------------------------------------------------
[0.01187 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 272] COI nayajson:417: 
--------------------------------------------------------------------------------
 413:                     if last_token == '{':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
 416:                                 stack.append({})
~417:                             elif (not token == '['):
 418:                                 stack.append([])
 419:                             elif token != '}':
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
 421:                         elif token_type == TOKEN_TYPE.STRING:
 422:                             stack.append(KVP(token))
-------
 417:                             elif token == '[':
-------
--------------------------------------------------------------------------------
[0.01019 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 273] COI nayajson:419: 
--------------------------------------------------------------------------------
 415:                             if token == '{':
 416:                                 stack.append({})
 417:                             elif token == '[':
 418:                                 stack.append([])
~419:                             elif (not token != '}'):
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
 421:                         elif token_type == TOKEN_TYPE.STRING:
 422:                             stack.append(KVP(token))
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
-------
 419:                             elif token != '}':
-------
--------------------------------------------------------------------------------
[0.01033 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 274] COI nayajson:421: 
--------------------------------------------------------------------------------
 417:                             elif token == '[':
 418:                                 stack.append([])
 419:                             elif token != '}':
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
~421:                         elif (not token_type == TOKEN_TYPE.STRING):
 422:                             stack.append(KVP(token))
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 425:                     elif last_token == ',':
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
-------
 421:                         elif token_type == TOKEN_TYPE.STRING:
-------
--------------------------------------------------------------------------------
[0.00987 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 275] COI nayajson:425: 
--------------------------------------------------------------------------------
 421:                         elif token_type == TOKEN_TYPE.STRING:
 422:                             stack.append(KVP(token))
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
~425:                     elif (not last_token == ','):
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
 427:                             if token == '{':
 428:                                 stack.append({})
 429:                             elif token == '[':
 430:                                 stack.append([])
-------
 425:                     elif last_token == ',':
-------
--------------------------------------------------------------------------------
[0.01009 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 276] COI nayajson:426: 
--------------------------------------------------------------------------------
 422:                             stack.append(KVP(token))
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 425:                     elif last_token == ',':
~426:                         if (not token_type == TOKEN_TYPE.OPERATOR):
 427:                             if token == '{':
 428:                                 stack.append({})
 429:                             elif token == '[':
 430:                                 stack.append([])
 431:                             else:
-------
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
-------
--------------------------------------------------------------------------------
[0.01008 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 277] COI nayajson:427: 
--------------------------------------------------------------------------------
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 425:                     elif last_token == ',':
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
~427:                             if (not token == '{'):
 428:                                 stack.append({})
 429:                             elif token == '[':
 430:                                 stack.append([])
 431:                             else:
 432:                                 raise ValueError("Object key expected.  Got '{}'".format(token))
-------
 427:                             if token == '{':
-------
--------------------------------------------------------------------------------
[0.02431 s] +survived
   - [# 278] COI nayajson:429: 
--------------------------------------------------------------------------------
 425:                     elif last_token == ',':
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
 427:                             if token == '{':
 428:                                 stack.append({})
~429:                             elif (not token == '['):
 430:                                 stack.append([])
 431:                             else:
 432:                                 raise ValueError("Object key expected.  Got '{}'".format(token))
 433:                         elif token_type == TOKEN_TYPE.STRING:
 434:                             stack.append(KVP(token))
-------
 429:                             elif token == '[':
-------
--------------------------------------------------------------------------------
[0.02230 s] +survived
   - [# 279] COI nayajson:433: 
--------------------------------------------------------------------------------
 429:                             elif token == '[':
 430:                                 stack.append([])
 431:                             else:
 432:                                 raise ValueError("Object key expected.  Got '{}'".format(token))
~433:                         elif (not token_type == TOKEN_TYPE.STRING):
 434:                             stack.append(KVP(token))
 435:                         else:
 436:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 437:                     elif last_token == '}':
 438:                         value = stack.pop()
-------
 433:                         elif token_type == TOKEN_TYPE.STRING:
-------
--------------------------------------------------------------------------------
[0.01050 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 280] COI nayajson:437: 
--------------------------------------------------------------------------------
 433:                         elif token_type == TOKEN_TYPE.STRING:
 434:                             stack.append(KVP(token))
 435:                         else:
 436:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
~437:                     elif (not last_token == '}'):
 438:                         value = stack.pop()
 439:                         if len(stack) == 0:
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
-------
 437:                     elif last_token == '}':
-------
--------------------------------------------------------------------------------
[0.01058 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 281] COI nayajson:439: 
--------------------------------------------------------------------------------
 435:                         else:
 436:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 437:                     elif last_token == '}':
 438:                         value = stack.pop()
~439:                         if (not len(stack) == 0):
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
-------
 439:                         if len(stack) == 0:
-------
--------------------------------------------------------------------------------
[0.01119 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 282] COI nayajson:441: 
--------------------------------------------------------------------------------
 437:                     elif last_token == '}':
 438:                         value = stack.pop()
 439:                         if len(stack) == 0:
 440:                             return value
~441:                         if (not isinstance(stack[(-1)], list)):
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
-------
 441:                         if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.01077 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 283] COI nayajson:443: 
--------------------------------------------------------------------------------
 439:                         if len(stack) == 0:
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
~443:                         elif (not isinstance(stack[(-1)], dict)):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
-------
 443:                         elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.00754 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 284] COI nayajson:445: 
--------------------------------------------------------------------------------
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
~445:                         elif (not isinstance(stack[(-1)], KVP)):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
-------
 445:                         elif isinstance(stack[(-1)], KVP):
-------
--------------------------------------------------------------------------------
[0.01211 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 285] COI nayajson:449: 
--------------------------------------------------------------------------------
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
~449:                             if (not len(stack) == 0):
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
 452:                                 stack[(-1)].append(value)
 453:                             elif isinstance(stack[(-1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
-------
 449:                             if len(stack) == 0:
-------
--------------------------------------------------------------------------------
[0.01095 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 286] COI nayajson:451: 
--------------------------------------------------------------------------------
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
~451:                             if (not isinstance(stack[(-1)], list)):
 452:                                 stack[(-1)].append(value)
 453:                             elif isinstance(stack[(-1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 451:                             if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.00971 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 287] COI nayajson:453: 
--------------------------------------------------------------------------------
 449:                             if len(stack) == 0:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
 452:                                 stack[(-1)].append(value)
~453:                             elif (not isinstance(stack[(-1)], dict)):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 457:                     elif last_token == ']':
 458:                         raise ValueError("Object closed with a ']'")
-------
 453:                             elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01082 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 288] COI nayajson:457: 
--------------------------------------------------------------------------------
 453:                             elif isinstance(stack[(-1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
~457:                     elif (not last_token == ']'):
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
-------
 457:                     elif last_token == ']':
-------
--------------------------------------------------------------------------------
[0.01862 s] +survived
   - [# 289] COI nayajson:461: 
--------------------------------------------------------------------------------
 457:                     elif last_token == ']':
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
~461:             elif (not isinstance(stack[(-1)], KVP)):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
-------
 461:             elif isinstance(stack[(-1)], KVP):
-------
--------------------------------------------------------------------------------
[0.00863 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 290] COI nayajson:462: 
--------------------------------------------------------------------------------
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
~462:                 if (not stack[(-1)].set):
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
-------
 462:                 if stack[(-1)].set:
-------
--------------------------------------------------------------------------------
[0.01177 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 291] COI nayajson:463: 
--------------------------------------------------------------------------------
 459:                     else:
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
~463:                     if (not token_type == TOKEN_TYPE.OPERATOR):
 464:                         if (token != '}' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
-------
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
-------
--------------------------------------------------------------------------------
[0.00998 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 292] COI nayajson:464: 
--------------------------------------------------------------------------------
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
~464:                         if (not (token != '}' and token != ',')):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
-------
 464:                         if (token != '}' and token != ','):
-------
--------------------------------------------------------------------------------
[0.00969 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 293] COI nayajson:467: 
--------------------------------------------------------------------------------
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
~467:                         if (not len(stack) == 0):
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
-------
 467:                         if len(stack) == 0:
-------
--------------------------------------------------------------------------------
[0.01052 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 294] COI nayajson:469: 
--------------------------------------------------------------------------------
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
~469:                         if (not isinstance(stack[(-1)], list)):
 470:                             stack[(-1)].append(value)
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 469:                         if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.00945 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 295] COI nayajson:471: 
--------------------------------------------------------------------------------
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
~471:                         elif (not isinstance(stack[(-1)], dict)):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
 476:                             return stack[0]
-------
 471:                         elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.00997 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 296] COI nayajson:475: 
--------------------------------------------------------------------------------
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
~475:                         if (not (token == '}' and len(stack) == 1)):
 476:                             return stack[0]
 477:                     else:
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
-------
 475:                         if (token == '}' and len(stack) == 1):
-------
--------------------------------------------------------------------------------
[0.01119 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 297] COI nayajson:480: 
--------------------------------------------------------------------------------
 476:                             return stack[0]
 477:                     else:
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (not (
~480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING)):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
-------
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
-------
--------------------------------------------------------------------------------
[0.00960 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 298] COI nayajson:482: 
--------------------------------------------------------------------------------
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
~482:                 elif (not (last_type == TOKEN_TYPE.OPERATOR and last_token == ':')):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
 486:                         elif token == '[':
 487:                             stack.append([])
-------
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
-------
--------------------------------------------------------------------------------
[0.01683 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 299] COI nayajson:483: 
--------------------------------------------------------------------------------
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
~483:                     if (not token_type == TOKEN_TYPE.OPERATOR):
 484:                         if token == '{':
 485:                             stack.append({})
 486:                         elif token == '[':
 487:                             stack.append([])
 488:                         else:
-------
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
-------
--------------------------------------------------------------------------------
[0.00986 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 300] COI nayajson:484: 
--------------------------------------------------------------------------------
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
~484:                         if (not token == '{'):
 485:                             stack.append({})
 486:                         elif token == '[':
 487:                             stack.append([])
 488:                         else:
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
-------
 484:                         if token == '{':
-------
--------------------------------------------------------------------------------
[0.01045 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 301] COI nayajson:486: 
--------------------------------------------------------------------------------
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
~486:                         elif (not token == '['):
 487:                             stack.append([])
 488:                         else:
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
 490:                     else:
 491:                         stack[(-1)].value = token
-------
 486:                         elif token == '[':
-------
--------------------------------------------------------------------------------
[0.01202 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 302] COI nayajson:497: 
--------------------------------------------------------------------------------
 493:                 else:
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
 495:             else:
 496:                 value = stack.pop()
~497:                 if (not isinstance(stack[(-1)], list)):
 498:                     stack[(-1)].append(value)
 499:                 elif isinstance(stack[(-1)], dict):
 500:                     stack[(-1)][value.key] = value.value
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 497:                 if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.00826 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 303] COI nayajson:499: 
--------------------------------------------------------------------------------
 495:             else:
 496:                 value = stack.pop()
 497:                 if isinstance(stack[(-1)], list):
 498:                     stack[(-1)].append(value)
~499:                 elif (not isinstance(stack[(-1)], dict)):
 500:                     stack[(-1)][value.key] = value.value
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 503:             (last_type, last_token) = (token_type, token)
 504:             (token_type, token) = next(token_stream)
-------
 499:                 elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01693 s] +survived
   - [# 304] COI nayajson:506: 
--------------------------------------------------------------------------------
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 503:             (last_type, last_token) = (token_type, token)
 504:             (token_type, token) = next(token_stream)
 505:     except StopIteration as e:
~506:         if (not len(stack) == 1):
 507:             return stack[0]
 508:         else:
 509:             raise ValueError('JSON Object not properly closed') from e
-------
 506:         if len(stack) == 1:
-------
--------------------------------------------------------------------------------
[0.00862 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 305] CRP nayajson:3  : 
--------------------------------------------------------------------------------
   1: from io import StringIO
   2: class TOKEN_TYPE:
~  3:     OPERATOR = 1
   4:     STRING = 1
   5:     NUMBER = 2
   6:     BOOLEAN = 3
   7:     NULL = 4
   8: class __TOKENIZER_STATE:
-------
   3:     OPERATOR = 0
-------
--------------------------------------------------------------------------------
[0.00819 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 306] CRP nayajson:4  : 
--------------------------------------------------------------------------------
   1: from io import StringIO
   2: class TOKEN_TYPE:
   3:     OPERATOR = 0
~  4:     STRING = 2
   5:     NUMBER = 2
   6:     BOOLEAN = 3
   7:     NULL = 4
   8: class __TOKENIZER_STATE:
   9:     WHITESPACE = 0
-------
   4:     STRING = 1
-------
--------------------------------------------------------------------------------
[0.01407 s] killed by test_sequence (nayajson_test.TestJsonTokenization)
   - [# 307] CRP nayajson:5  : 
--------------------------------------------------------------------------------
   1: from io import StringIO
   2: class TOKEN_TYPE:
   3:     OPERATOR = 0
   4:     STRING = 1
~  5:     NUMBER = 3
   6:     BOOLEAN = 3
   7:     NULL = 4
   8: class __TOKENIZER_STATE:
   9:     WHITESPACE = 0
  10:     INTEGER_0 = 1
-------
   5:     NUMBER = 2
-------
--------------------------------------------------------------------------------
[0.01478 s] killed by test_sequence (nayajson_test.TestJsonTokenization)
   - [# 308] CRP nayajson:6  : 
--------------------------------------------------------------------------------
   2: class TOKEN_TYPE:
   3:     OPERATOR = 0
   4:     STRING = 1
   5:     NUMBER = 2
~  6:     BOOLEAN = 4
   7:     NULL = 4
   8: class __TOKENIZER_STATE:
   9:     WHITESPACE = 0
  10:     INTEGER_0 = 1
  11:     INTEGER_SIGN = 2
-------
   6:     BOOLEAN = 3
-------
--------------------------------------------------------------------------------
[0.01841 s] killed by test_sequence (nayajson_test.TestJsonTokenization)
   - [# 309] CRP nayajson:7  : 
--------------------------------------------------------------------------------
   3:     OPERATOR = 0
   4:     STRING = 1
   5:     NUMBER = 2
   6:     BOOLEAN = 3
~  7:     NULL = 5
   8: class __TOKENIZER_STATE:
   9:     WHITESPACE = 0
  10:     INTEGER_0 = 1
  11:     INTEGER_SIGN = 2
  12:     INTEGER = 3
-------
   7:     NULL = 4
-------
--------------------------------------------------------------------------------
[0.02036 s] killed by test_sequence (nayajson_test.TestJsonTokenization)
   - [# 310] CRP nayajson:9  : 
--------------------------------------------------------------------------------
   5:     NUMBER = 2
   6:     BOOLEAN = 3
   7:     NULL = 4
   8: class __TOKENIZER_STATE:
~  9:     WHITESPACE = 1
  10:     INTEGER_0 = 1
  11:     INTEGER_SIGN = 2
  12:     INTEGER = 3
  13:     INTEGER_EXP = 4
  14:     INTEGER_EXP_0 = 5
-------
   9:     WHITESPACE = 0
-------
--------------------------------------------------------------------------------
[0.00908 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 311] CRP nayajson:10 : 
--------------------------------------------------------------------------------
   6:     BOOLEAN = 3
   7:     NULL = 4
   8: class __TOKENIZER_STATE:
   9:     WHITESPACE = 0
~ 10:     INTEGER_0 = 2
  11:     INTEGER_SIGN = 2
  12:     INTEGER = 3
  13:     INTEGER_EXP = 4
  14:     INTEGER_EXP_0 = 5
  15:     FLOATING_POINT_0 = 6
-------
  10:     INTEGER_0 = 1
-------
--------------------------------------------------------------------------------
[0.00944 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 312] CRP nayajson:11 : 
--------------------------------------------------------------------------------
   7:     NULL = 4
   8: class __TOKENIZER_STATE:
   9:     WHITESPACE = 0
  10:     INTEGER_0 = 1
~ 11:     INTEGER_SIGN = 3
  12:     INTEGER = 3
  13:     INTEGER_EXP = 4
  14:     INTEGER_EXP_0 = 5
  15:     FLOATING_POINT_0 = 6
  16:     FLOATING_POINT = 8
-------
  11:     INTEGER_SIGN = 2
-------
--------------------------------------------------------------------------------
[0.00931 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 313] CRP nayajson:12 : 
--------------------------------------------------------------------------------
   8: class __TOKENIZER_STATE:
   9:     WHITESPACE = 0
  10:     INTEGER_0 = 1
  11:     INTEGER_SIGN = 2
~ 12:     INTEGER = 4
  13:     INTEGER_EXP = 4
  14:     INTEGER_EXP_0 = 5
  15:     FLOATING_POINT_0 = 6
  16:     FLOATING_POINT = 8
  17:     STRING = 9
-------
  12:     INTEGER = 3
-------
--------------------------------------------------------------------------------
[0.01262 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 314] CRP nayajson:13 : 
--------------------------------------------------------------------------------
   9:     WHITESPACE = 0
  10:     INTEGER_0 = 1
  11:     INTEGER_SIGN = 2
  12:     INTEGER = 3
~ 13:     INTEGER_EXP = 5
  14:     INTEGER_EXP_0 = 5
  15:     FLOATING_POINT_0 = 6
  16:     FLOATING_POINT = 8
  17:     STRING = 9
  18:     STRING_ESCAPE = 10
-------
  13:     INTEGER_EXP = 4
-------
--------------------------------------------------------------------------------
[0.00956 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 315] CRP nayajson:14 : 
--------------------------------------------------------------------------------
  10:     INTEGER_0 = 1
  11:     INTEGER_SIGN = 2
  12:     INTEGER = 3
  13:     INTEGER_EXP = 4
~ 14:     INTEGER_EXP_0 = 6
  15:     FLOATING_POINT_0 = 6
  16:     FLOATING_POINT = 8
  17:     STRING = 9
  18:     STRING_ESCAPE = 10
  19:     STRING_END = 11
-------
  14:     INTEGER_EXP_0 = 5
-------
--------------------------------------------------------------------------------
[0.00979 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 316] CRP nayajson:15 : 
--------------------------------------------------------------------------------
  11:     INTEGER_SIGN = 2
  12:     INTEGER = 3
  13:     INTEGER_EXP = 4
  14:     INTEGER_EXP_0 = 5
~ 15:     FLOATING_POINT_0 = 7
  16:     FLOATING_POINT = 8
  17:     STRING = 9
  18:     STRING_ESCAPE = 10
  19:     STRING_END = 11
  20:     TRUE_1 = 12
-------
  15:     FLOATING_POINT_0 = 6
-------
--------------------------------------------------------------------------------
[0.01693 s] -survived
   - [# 317] CRP nayajson:16 : 
--------------------------------------------------------------------------------
  12:     INTEGER = 3
  13:     INTEGER_EXP = 4
  14:     INTEGER_EXP_0 = 5
  15:     FLOATING_POINT_0 = 6
~ 16:     FLOATING_POINT = 9
  17:     STRING = 9
  18:     STRING_ESCAPE = 10
  19:     STRING_END = 11
  20:     TRUE_1 = 12
  21:     TRUE_2 = 13
-------
  16:     FLOATING_POINT = 8
-------
--------------------------------------------------------------------------------
[0.00960 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 318] CRP nayajson:17 : 
--------------------------------------------------------------------------------
  13:     INTEGER_EXP = 4
  14:     INTEGER_EXP_0 = 5
  15:     FLOATING_POINT_0 = 6
  16:     FLOATING_POINT = 8
~ 17:     STRING = 10
  18:     STRING_ESCAPE = 10
  19:     STRING_END = 11
  20:     TRUE_1 = 12
  21:     TRUE_2 = 13
  22:     TRUE_3 = 14
-------
  17:     STRING = 9
-------
--------------------------------------------------------------------------------
[0.01687 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 319] CRP nayajson:18 : 
--------------------------------------------------------------------------------
  14:     INTEGER_EXP_0 = 5
  15:     FLOATING_POINT_0 = 6
  16:     FLOATING_POINT = 8
  17:     STRING = 9
~ 18:     STRING_ESCAPE = 11
  19:     STRING_END = 11
  20:     TRUE_1 = 12
  21:     TRUE_2 = 13
  22:     TRUE_3 = 14
  23:     FALSE_1 = 15
-------
  18:     STRING_ESCAPE = 10
-------
--------------------------------------------------------------------------------
[0.01932 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 320] CRP nayajson:19 : 
--------------------------------------------------------------------------------
  15:     FLOATING_POINT_0 = 6
  16:     FLOATING_POINT = 8
  17:     STRING = 9
  18:     STRING_ESCAPE = 10
~ 19:     STRING_END = 12
  20:     TRUE_1 = 12
  21:     TRUE_2 = 13
  22:     TRUE_3 = 14
  23:     FALSE_1 = 15
  24:     FALSE_2 = 16
-------
  19:     STRING_END = 11
-------
--------------------------------------------------------------------------------
[0.00898 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 321] CRP nayajson:20 : 
--------------------------------------------------------------------------------
  16:     FLOATING_POINT = 8
  17:     STRING = 9
  18:     STRING_ESCAPE = 10
  19:     STRING_END = 11
~ 20:     TRUE_1 = 13
  21:     TRUE_2 = 13
  22:     TRUE_3 = 14
  23:     FALSE_1 = 15
  24:     FALSE_2 = 16
  25:     FALSE_3 = 17
-------
  20:     TRUE_1 = 12
-------
--------------------------------------------------------------------------------
[0.01208 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 322] CRP nayajson:21 : 
--------------------------------------------------------------------------------
  17:     STRING = 9
  18:     STRING_ESCAPE = 10
  19:     STRING_END = 11
  20:     TRUE_1 = 12
~ 21:     TRUE_2 = 14
  22:     TRUE_3 = 14
  23:     FALSE_1 = 15
  24:     FALSE_2 = 16
  25:     FALSE_3 = 17
  26:     FALSE_4 = 18
-------
  21:     TRUE_2 = 13
-------
--------------------------------------------------------------------------------
[0.01159 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 323] CRP nayajson:22 : 
--------------------------------------------------------------------------------
  18:     STRING_ESCAPE = 10
  19:     STRING_END = 11
  20:     TRUE_1 = 12
  21:     TRUE_2 = 13
~ 22:     TRUE_3 = 15
  23:     FALSE_1 = 15
  24:     FALSE_2 = 16
  25:     FALSE_3 = 17
  26:     FALSE_4 = 18
  27:     NULL_1 = 19
-------
  22:     TRUE_3 = 14
-------
--------------------------------------------------------------------------------
[0.01158 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 324] CRP nayajson:23 : 
--------------------------------------------------------------------------------
  19:     STRING_END = 11
  20:     TRUE_1 = 12
  21:     TRUE_2 = 13
  22:     TRUE_3 = 14
~ 23:     FALSE_1 = 16
  24:     FALSE_2 = 16
  25:     FALSE_3 = 17
  26:     FALSE_4 = 18
  27:     NULL_1 = 19
  28:     NULL_2 = 20
-------
  23:     FALSE_1 = 15
-------
--------------------------------------------------------------------------------
[0.01777 s] +survived
   - [# 325] CRP nayajson:24 : 
--------------------------------------------------------------------------------
  20:     TRUE_1 = 12
  21:     TRUE_2 = 13
  22:     TRUE_3 = 14
  23:     FALSE_1 = 15
~ 24:     FALSE_2 = 17
  25:     FALSE_3 = 17
  26:     FALSE_4 = 18
  27:     NULL_1 = 19
  28:     NULL_2 = 20
  29:     NULL_3 = 21
-------
  24:     FALSE_2 = 16
-------
--------------------------------------------------------------------------------
[0.01544 s] +survived
   - [# 326] CRP nayajson:25 : 
--------------------------------------------------------------------------------
  21:     TRUE_2 = 13
  22:     TRUE_3 = 14
  23:     FALSE_1 = 15
  24:     FALSE_2 = 16
~ 25:     FALSE_3 = 18
  26:     FALSE_4 = 18
  27:     NULL_1 = 19
  28:     NULL_2 = 20
  29:     NULL_3 = 21
  30:     UNICODE_1 = 22
-------
  25:     FALSE_3 = 17
-------
--------------------------------------------------------------------------------
[0.01591 s] +survived
   - [# 327] CRP nayajson:26 : 
--------------------------------------------------------------------------------
  22:     TRUE_3 = 14
  23:     FALSE_1 = 15
  24:     FALSE_2 = 16
  25:     FALSE_3 = 17
~ 26:     FALSE_4 = 19
  27:     NULL_1 = 19
  28:     NULL_2 = 20
  29:     NULL_3 = 21
  30:     UNICODE_1 = 22
  31:     UNICODE_2 = 23
-------
  26:     FALSE_4 = 18
-------
--------------------------------------------------------------------------------
[0.01420 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 328] CRP nayajson:27 : 
--------------------------------------------------------------------------------
  23:     FALSE_1 = 15
  24:     FALSE_2 = 16
  25:     FALSE_3 = 17
  26:     FALSE_4 = 18
~ 27:     NULL_1 = 20
  28:     NULL_2 = 20
  29:     NULL_3 = 21
  30:     UNICODE_1 = 22
  31:     UNICODE_2 = 23
  32:     UNICODE_3 = 24
-------
  27:     NULL_1 = 19
-------
--------------------------------------------------------------------------------
[0.01383 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 329] CRP nayajson:28 : 
--------------------------------------------------------------------------------
  24:     FALSE_2 = 16
  25:     FALSE_3 = 17
  26:     FALSE_4 = 18
  27:     NULL_1 = 19
~ 28:     NULL_2 = 21
  29:     NULL_3 = 21
  30:     UNICODE_1 = 22
  31:     UNICODE_2 = 23
  32:     UNICODE_3 = 24
  33:     UNICODE_4 = 25
-------
  28:     NULL_2 = 20
-------
--------------------------------------------------------------------------------
[0.01405 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 330] CRP nayajson:29 : 
--------------------------------------------------------------------------------
  25:     FALSE_3 = 17
  26:     FALSE_4 = 18
  27:     NULL_1 = 19
  28:     NULL_2 = 20
~ 29:     NULL_3 = 22
  30:     UNICODE_1 = 22
  31:     UNICODE_2 = 23
  32:     UNICODE_3 = 24
  33:     UNICODE_4 = 25
  34: def tokenize(stream):
-------
  29:     NULL_3 = 21
-------
--------------------------------------------------------------------------------
[0.01861 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 331] CRP nayajson:30 : 
--------------------------------------------------------------------------------
  26:     FALSE_4 = 18
  27:     NULL_1 = 19
  28:     NULL_2 = 20
  29:     NULL_3 = 21
~ 30:     UNICODE_1 = 23
  31:     UNICODE_2 = 23
  32:     UNICODE_3 = 24
  33:     UNICODE_4 = 25
  34: def tokenize(stream):
  35:     def is_delimiter(char):
-------
  30:     UNICODE_1 = 22
-------
--------------------------------------------------------------------------------
[0.01902 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 332] CRP nayajson:31 : 
--------------------------------------------------------------------------------
  27:     NULL_1 = 19
  28:     NULL_2 = 20
  29:     NULL_3 = 21
  30:     UNICODE_1 = 22
~ 31:     UNICODE_2 = 24
  32:     UNICODE_3 = 24
  33:     UNICODE_4 = 25
  34: def tokenize(stream):
  35:     def is_delimiter(char):
  36:         return (char.isspace() or char in '{}[]:,')
-------
  31:     UNICODE_2 = 23
-------
--------------------------------------------------------------------------------
[0.01866 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 333] CRP nayajson:32 : 
--------------------------------------------------------------------------------
  28:     NULL_2 = 20
  29:     NULL_3 = 21
  30:     UNICODE_1 = 22
  31:     UNICODE_2 = 23
~ 32:     UNICODE_3 = 25
  33:     UNICODE_4 = 25
  34: def tokenize(stream):
  35:     def is_delimiter(char):
  36:         return (char.isspace() or char in '{}[]:,')
  37:     token = []
-------
  32:     UNICODE_3 = 24
-------
--------------------------------------------------------------------------------
[0.01755 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 334] CRP nayajson:33 : 
--------------------------------------------------------------------------------
  29:     NULL_3 = 21
  30:     UNICODE_1 = 22
  31:     UNICODE_2 = 23
  32:     UNICODE_3 = 24
~ 33:     UNICODE_4 = 26
  34: def tokenize(stream):
  35:     def is_delimiter(char):
  36:         return (char.isspace() or char in '{}[]:,')
  37:     token = []
  38:     charcode = 0
-------
  33:     UNICODE_4 = 25
-------
--------------------------------------------------------------------------------
[0.02018 s] +survived
   - [# 335] CRP nayajson:36 : 
--------------------------------------------------------------------------------
  32:     UNICODE_3 = 24
  33:     UNICODE_4 = 25
  34: def tokenize(stream):
  35:     def is_delimiter(char):
~ 36:         return (char.isspace() or char in 'mutpy')
  37:     token = []
  38:     charcode = 0
  39:     completed = False
  40:     now_token = ''
  41:     def process_char(char, charcode):
-------
  36:         return (char.isspace() or char in '{}[]:,')
-------
--------------------------------------------------------------------------------
[0.01115 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 336] CRP nayajson:36 : 
--------------------------------------------------------------------------------
  32:     UNICODE_3 = 24
  33:     UNICODE_4 = 25
  34: def tokenize(stream):
  35:     def is_delimiter(char):
~ 36:         return (char.isspace() or char in '')
  37:     token = []
  38:     charcode = 0
  39:     completed = False
  40:     now_token = ''
  41:     def process_char(char, charcode):
-------
  36:         return (char.isspace() or char in '{}[]:,')
-------
--------------------------------------------------------------------------------
[0.00762 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 337] CRP nayajson:38 : 
--------------------------------------------------------------------------------
  34: def tokenize(stream):
  35:     def is_delimiter(char):
  36:         return (char.isspace() or char in '{}[]:,')
  37:     token = []
~ 38:     charcode = 1
  39:     completed = False
  40:     now_token = ''
  41:     def process_char(char, charcode):
  42:         nonlocal token, completed, now_token
  43:         advance = True
-------
  38:     charcode = 0
-------
--------------------------------------------------------------------------------
[0.01598 s] +survived
   - [# 338] CRP nayajson:40 : 
--------------------------------------------------------------------------------
  36:         return (char.isspace() or char in '{}[]:,')
  37:     token = []
  38:     charcode = 0
  39:     completed = False
~ 40:     now_token = 'mutpy'
  41:     def process_char(char, charcode):
  42:         nonlocal token, completed, now_token
  43:         advance = True
  44:         add_char = False
  45:         next_state = state
-------
  40:     now_token = ''
-------
--------------------------------------------------------------------------------
[0.01696 s] -survived
   - [# 339] CRP nayajson:47 : 
--------------------------------------------------------------------------------
  43:         advance = True
  44:         add_char = False
  45:         next_state = state
  46:         if state == __TOKENIZER_STATE.WHITESPACE:
~ 47:             if char == 'mutpy':
  48:                 completed = True
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
  50:             elif char == '}':
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
-------
  47:             if char == '{':
-------
--------------------------------------------------------------------------------
[0.01086 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 340] CRP nayajson:47 : 
--------------------------------------------------------------------------------
  43:         advance = True
  44:         add_char = False
  45:         next_state = state
  46:         if state == __TOKENIZER_STATE.WHITESPACE:
~ 47:             if char == '':
  48:                 completed = True
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
  50:             elif char == '}':
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
-------
  47:             if char == '{':
-------
--------------------------------------------------------------------------------
[0.01065 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 341] CRP nayajson:49 : 
--------------------------------------------------------------------------------
  45:         next_state = state
  46:         if state == __TOKENIZER_STATE.WHITESPACE:
  47:             if char == '{':
  48:                 completed = True
~ 49:                 now_token = (TOKEN_TYPE.OPERATOR, 'mutpy')
  50:             elif char == '}':
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
  53:             elif char == '[':
  54:                 completed = True
-------
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
-------
--------------------------------------------------------------------------------
[0.01015 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 342] CRP nayajson:49 : 
--------------------------------------------------------------------------------
  45:         next_state = state
  46:         if state == __TOKENIZER_STATE.WHITESPACE:
  47:             if char == '{':
  48:                 completed = True
~ 49:                 now_token = (TOKEN_TYPE.OPERATOR, '')
  50:             elif char == '}':
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
  53:             elif char == '[':
  54:                 completed = True
-------
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
-------
--------------------------------------------------------------------------------
[0.01064 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 343] CRP nayajson:50 : 
--------------------------------------------------------------------------------
  46:         if state == __TOKENIZER_STATE.WHITESPACE:
  47:             if char == '{':
  48:                 completed = True
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
~ 50:             elif char == 'mutpy':
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
  53:             elif char == '[':
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
-------
  50:             elif char == '}':
-------
--------------------------------------------------------------------------------
[0.01091 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 344] CRP nayajson:50 : 
--------------------------------------------------------------------------------
  46:         if state == __TOKENIZER_STATE.WHITESPACE:
  47:             if char == '{':
  48:                 completed = True
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
~ 50:             elif char == '':
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
  53:             elif char == '[':
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
-------
  50:             elif char == '}':
-------
--------------------------------------------------------------------------------
[0.01100 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 345] CRP nayajson:52 : 
--------------------------------------------------------------------------------
  48:                 completed = True
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
  50:             elif char == '}':
  51:                 completed = True
~ 52:                 now_token = (TOKEN_TYPE.OPERATOR, 'mutpy')
  53:             elif char == '[':
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
  56:             elif char == ']':
  57:                 completed = True
-------
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
-------
--------------------------------------------------------------------------------
[0.01051 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 346] CRP nayajson:52 : 
--------------------------------------------------------------------------------
  48:                 completed = True
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
  50:             elif char == '}':
  51:                 completed = True
~ 52:                 now_token = (TOKEN_TYPE.OPERATOR, '')
  53:             elif char == '[':
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
  56:             elif char == ']':
  57:                 completed = True
-------
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
-------
--------------------------------------------------------------------------------
[0.01247 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 347] CRP nayajson:53 : 
--------------------------------------------------------------------------------
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
  50:             elif char == '}':
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
~ 53:             elif char == 'mutpy':
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
  56:             elif char == ']':
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
-------
  53:             elif char == '[':
-------
--------------------------------------------------------------------------------
[0.00791 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 348] CRP nayajson:53 : 
--------------------------------------------------------------------------------
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
  50:             elif char == '}':
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
~ 53:             elif char == '':
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
  56:             elif char == ']':
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
-------
  53:             elif char == '[':
-------
--------------------------------------------------------------------------------
[0.00844 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 349] CRP nayajson:55 : 
--------------------------------------------------------------------------------
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
  53:             elif char == '[':
  54:                 completed = True
~ 55:                 now_token = (TOKEN_TYPE.OPERATOR, 'mutpy')
  56:             elif char == ']':
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
  59:             elif char == ',':
  60:                 completed = True
-------
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
-------
--------------------------------------------------------------------------------
[0.00819 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 350] CRP nayajson:55 : 
--------------------------------------------------------------------------------
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
  53:             elif char == '[':
  54:                 completed = True
~ 55:                 now_token = (TOKEN_TYPE.OPERATOR, '')
  56:             elif char == ']':
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
  59:             elif char == ',':
  60:                 completed = True
-------
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
-------
--------------------------------------------------------------------------------
[0.00881 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 351] CRP nayajson:56 : 
--------------------------------------------------------------------------------
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
  53:             elif char == '[':
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
~ 56:             elif char == 'mutpy':
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
  59:             elif char == ',':
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
-------
  56:             elif char == ']':
-------
--------------------------------------------------------------------------------
[0.00855 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 352] CRP nayajson:56 : 
--------------------------------------------------------------------------------
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
  53:             elif char == '[':
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
~ 56:             elif char == '':
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
  59:             elif char == ',':
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
-------
  56:             elif char == ']':
-------
--------------------------------------------------------------------------------
[0.00867 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 353] CRP nayajson:58 : 
--------------------------------------------------------------------------------
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
  56:             elif char == ']':
  57:                 completed = True
~ 58:                 now_token = (TOKEN_TYPE.OPERATOR, 'mutpy')
  59:             elif char == ',':
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
  62:             elif char == ':':
  63:                 completed = True
-------
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
-------
--------------------------------------------------------------------------------
[0.00821 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 354] CRP nayajson:58 : 
--------------------------------------------------------------------------------
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
  56:             elif char == ']':
  57:                 completed = True
~ 58:                 now_token = (TOKEN_TYPE.OPERATOR, '')
  59:             elif char == ',':
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
  62:             elif char == ':':
  63:                 completed = True
-------
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
-------
--------------------------------------------------------------------------------
[0.00867 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 355] CRP nayajson:59 : 
--------------------------------------------------------------------------------
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
  56:             elif char == ']':
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
~ 59:             elif char == 'mutpy':
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
  62:             elif char == ':':
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
-------
  59:             elif char == ',':
-------
--------------------------------------------------------------------------------
[0.00887 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 356] CRP nayajson:59 : 
--------------------------------------------------------------------------------
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
  56:             elif char == ']':
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
~ 59:             elif char == '':
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
  62:             elif char == ':':
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
-------
  59:             elif char == ',':
-------
--------------------------------------------------------------------------------
[0.00876 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 357] CRP nayajson:61 : 
--------------------------------------------------------------------------------
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
  59:             elif char == ',':
  60:                 completed = True
~ 61:                 now_token = (TOKEN_TYPE.OPERATOR, 'mutpy')
  62:             elif char == ':':
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
  65:             elif char == '"':
  66:                 next_state = __TOKENIZER_STATE.STRING
-------
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
-------
--------------------------------------------------------------------------------
[0.01159 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 358] CRP nayajson:61 : 
--------------------------------------------------------------------------------
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
  59:             elif char == ',':
  60:                 completed = True
~ 61:                 now_token = (TOKEN_TYPE.OPERATOR, '')
  62:             elif char == ':':
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
  65:             elif char == '"':
  66:                 next_state = __TOKENIZER_STATE.STRING
-------
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
-------
--------------------------------------------------------------------------------
[0.00857 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 359] CRP nayajson:62 : 
--------------------------------------------------------------------------------
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
  59:             elif char == ',':
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
~ 62:             elif char == 'mutpy':
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
  65:             elif char == '"':
  66:                 next_state = __TOKENIZER_STATE.STRING
  67:             elif char in '123456789':
-------
  62:             elif char == ':':
-------
--------------------------------------------------------------------------------
[0.00977 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 360] CRP nayajson:62 : 
--------------------------------------------------------------------------------
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
  59:             elif char == ',':
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
~ 62:             elif char == '':
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
  65:             elif char == '"':
  66:                 next_state = __TOKENIZER_STATE.STRING
  67:             elif char in '123456789':
-------
  62:             elif char == ':':
-------
--------------------------------------------------------------------------------
[0.01222 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 361] CRP nayajson:64 : 
--------------------------------------------------------------------------------
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
  62:             elif char == ':':
  63:                 completed = True
~ 64:                 now_token = (TOKEN_TYPE.OPERATOR, 'mutpy')
  65:             elif char == '"':
  66:                 next_state = __TOKENIZER_STATE.STRING
  67:             elif char in '123456789':
  68:                 next_state = __TOKENIZER_STATE.INTEGER
  69:                 add_char = True
-------
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
-------
--------------------------------------------------------------------------------
[0.00994 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 362] CRP nayajson:64 : 
--------------------------------------------------------------------------------
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
  62:             elif char == ':':
  63:                 completed = True
~ 64:                 now_token = (TOKEN_TYPE.OPERATOR, '')
  65:             elif char == '"':
  66:                 next_state = __TOKENIZER_STATE.STRING
  67:             elif char in '123456789':
  68:                 next_state = __TOKENIZER_STATE.INTEGER
  69:                 add_char = True
-------
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
-------
--------------------------------------------------------------------------------
[0.00975 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 363] CRP nayajson:65 : 
--------------------------------------------------------------------------------
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
  62:             elif char == ':':
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
~ 65:             elif char == 'mutpy':
  66:                 next_state = __TOKENIZER_STATE.STRING
  67:             elif char in '123456789':
  68:                 next_state = __TOKENIZER_STATE.INTEGER
  69:                 add_char = True
  70:             elif char == '0':
-------
  65:             elif char == '"':
-------
--------------------------------------------------------------------------------
[0.00864 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 364] CRP nayajson:65 : 
--------------------------------------------------------------------------------
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
  62:             elif char == ':':
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
~ 65:             elif char == '':
  66:                 next_state = __TOKENIZER_STATE.STRING
  67:             elif char in '123456789':
  68:                 next_state = __TOKENIZER_STATE.INTEGER
  69:                 add_char = True
  70:             elif char == '0':
-------
  65:             elif char == '"':
-------
--------------------------------------------------------------------------------
[0.00852 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 365] CRP nayajson:67 : 
--------------------------------------------------------------------------------
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
  65:             elif char == '"':
  66:                 next_state = __TOKENIZER_STATE.STRING
~ 67:             elif char in 'mutpy':
  68:                 next_state = __TOKENIZER_STATE.INTEGER
  69:                 add_char = True
  70:             elif char == '0':
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
  72:                 add_char = True
-------
  67:             elif char in '123456789':
-------
--------------------------------------------------------------------------------
[0.00952 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 366] CRP nayajson:67 : 
--------------------------------------------------------------------------------
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
  65:             elif char == '"':
  66:                 next_state = __TOKENIZER_STATE.STRING
~ 67:             elif char in '':
  68:                 next_state = __TOKENIZER_STATE.INTEGER
  69:                 add_char = True
  70:             elif char == '0':
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
  72:                 add_char = True
-------
  67:             elif char in '123456789':
-------
--------------------------------------------------------------------------------
[0.00928 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 367] CRP nayajson:70 : 
--------------------------------------------------------------------------------
  66:                 next_state = __TOKENIZER_STATE.STRING
  67:             elif char in '123456789':
  68:                 next_state = __TOKENIZER_STATE.INTEGER
  69:                 add_char = True
~ 70:             elif char == 'mutpy':
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
  72:                 add_char = True
  73:             elif char == '-':
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
-------
  70:             elif char == '0':
-------
--------------------------------------------------------------------------------
[0.00941 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 368] CRP nayajson:70 : 
--------------------------------------------------------------------------------
  66:                 next_state = __TOKENIZER_STATE.STRING
  67:             elif char in '123456789':
  68:                 next_state = __TOKENIZER_STATE.INTEGER
  69:                 add_char = True
~ 70:             elif char == '':
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
  72:                 add_char = True
  73:             elif char == '-':
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
-------
  70:             elif char == '0':
-------
--------------------------------------------------------------------------------
[0.01240 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 369] CRP nayajson:73 : 
--------------------------------------------------------------------------------
  69:                 add_char = True
  70:             elif char == '0':
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
  72:                 add_char = True
~ 73:             elif char == 'mutpy':
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
  76:             elif char == 'f':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
  78:             elif char == 't':
-------
  73:             elif char == '-':
-------
--------------------------------------------------------------------------------
[0.00953 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 370] CRP nayajson:73 : 
--------------------------------------------------------------------------------
  69:                 add_char = True
  70:             elif char == '0':
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
  72:                 add_char = True
~ 73:             elif char == '':
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
  76:             elif char == 'f':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
  78:             elif char == 't':
-------
  73:             elif char == '-':
-------
--------------------------------------------------------------------------------
[0.00981 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 371] CRP nayajson:76 : 
--------------------------------------------------------------------------------
  72:                 add_char = True
  73:             elif char == '-':
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
~ 76:             elif char == 'mutpy':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
  78:             elif char == 't':
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
  80:             elif char == 'n':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
-------
  76:             elif char == 'f':
-------
--------------------------------------------------------------------------------
[0.01672 s] +survived
   - [# 372] CRP nayajson:76 : 
--------------------------------------------------------------------------------
  72:                 add_char = True
  73:             elif char == '-':
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
~ 76:             elif char == '':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
  78:             elif char == 't':
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
  80:             elif char == 'n':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
-------
  76:             elif char == 'f':
-------
--------------------------------------------------------------------------------
[0.01593 s] +survived
   - [# 373] CRP nayajson:78 : 
--------------------------------------------------------------------------------
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
  76:             elif char == 'f':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
~ 78:             elif char == 'mutpy':
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
  80:             elif char == 'n':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
  82:             elif (not char.isspace()):
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
  78:             elif char == 't':
-------
--------------------------------------------------------------------------------
[0.01225 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 374] CRP nayajson:78 : 
--------------------------------------------------------------------------------
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
  76:             elif char == 'f':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
~ 78:             elif char == '':
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
  80:             elif char == 'n':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
  82:             elif (not char.isspace()):
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
  78:             elif char == 't':
-------
--------------------------------------------------------------------------------
[0.01332 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 375] CRP nayajson:80 : 
--------------------------------------------------------------------------------
  76:             elif char == 'f':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
  78:             elif char == 't':
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
~ 80:             elif char == 'mutpy':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
  82:             elif (not char.isspace()):
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
  85:             if char in '0123456789':
-------
  80:             elif char == 'n':
-------
--------------------------------------------------------------------------------
[0.01336 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 376] CRP nayajson:80 : 
--------------------------------------------------------------------------------
  76:             elif char == 'f':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
  78:             elif char == 't':
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
~ 80:             elif char == '':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
  82:             elif (not char.isspace()):
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
  85:             if char in '0123456789':
-------
  80:             elif char == 'n':
-------
--------------------------------------------------------------------------------
[0.01289 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 377] CRP nayajson:83 : 
--------------------------------------------------------------------------------
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
  80:             elif char == 'n':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
  82:             elif (not char.isspace()):
~ 83:                 raise ValueError('mutpy'.format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
  85:             if char in '0123456789':
  86:                 add_char = True
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
-------
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.02037 s] +survived
   - [# 378] CRP nayajson:83 : 
--------------------------------------------------------------------------------
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
  80:             elif char == 'n':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
  82:             elif (not char.isspace()):
~ 83:                 raise ValueError(''.format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
  85:             if char in '0123456789':
  86:                 add_char = True
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
-------
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01897 s] +survived
   - [# 379] CRP nayajson:85 : 
--------------------------------------------------------------------------------
  81:                 next_state = __TOKENIZER_STATE.NULL_1
  82:             elif (not char.isspace()):
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
~ 85:             if char in 'mutpy':
  86:                 add_char = True
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
  90:             elif (char == 'e' or char == 'E'):
-------
  85:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.00950 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 380] CRP nayajson:85 : 
--------------------------------------------------------------------------------
  81:                 next_state = __TOKENIZER_STATE.NULL_1
  82:             elif (not char.isspace()):
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
~ 85:             if char in '':
  86:                 add_char = True
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
  90:             elif (char == 'e' or char == 'E'):
-------
  85:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.00976 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 381] CRP nayajson:87 : 
--------------------------------------------------------------------------------
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
  85:             if char in '0123456789':
  86:                 add_char = True
~ 87:             elif char == 'mutpy':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
  90:             elif (char == 'e' or char == 'E'):
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
  92:                 add_char = True
-------
  87:             elif char == '.':
-------
--------------------------------------------------------------------------------
[0.00984 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 382] CRP nayajson:87 : 
--------------------------------------------------------------------------------
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
  85:             if char in '0123456789':
  86:                 add_char = True
~ 87:             elif char == '':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
  90:             elif (char == 'e' or char == 'E'):
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
  92:                 add_char = True
-------
  87:             elif char == '.':
-------
--------------------------------------------------------------------------------
[0.00960 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 383] CRP nayajson:90 : 
--------------------------------------------------------------------------------
  86:                 add_char = True
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
~ 90:             elif (char == 'mutpy' or char == 'E'):
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
  92:                 add_char = True
  93:             elif is_delimiter(char):
  94:                 next_state = __TOKENIZER_STATE.WHITESPACE
  95:                 completed = True
-------
  90:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.00999 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 384] CRP nayajson:90 : 
--------------------------------------------------------------------------------
  86:                 add_char = True
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
~ 90:             elif (char == '' or char == 'E'):
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
  92:                 add_char = True
  93:             elif is_delimiter(char):
  94:                 next_state = __TOKENIZER_STATE.WHITESPACE
  95:                 completed = True
-------
  90:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.00871 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 385] CRP nayajson:90 : 
--------------------------------------------------------------------------------
  86:                 add_char = True
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
~ 90:             elif (char == 'e' or char == 'mutpy'):
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
  92:                 add_char = True
  93:             elif is_delimiter(char):
  94:                 next_state = __TOKENIZER_STATE.WHITESPACE
  95:                 completed = True
-------
  90:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.00795 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 386] CRP nayajson:90 : 
--------------------------------------------------------------------------------
  86:                 add_char = True
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
~ 90:             elif (char == 'e' or char == ''):
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
  92:                 add_char = True
  93:             elif is_delimiter(char):
  94:                 next_state = __TOKENIZER_STATE.WHITESPACE
  95:                 completed = True
-------
  90:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.00974 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 387] CRP nayajson:96 : 
--------------------------------------------------------------------------------
  92:                 add_char = True
  93:             elif is_delimiter(char):
  94:                 next_state = __TOKENIZER_STATE.WHITESPACE
  95:                 completed = True
~ 96:                 now_token = (TOKEN_TYPE.NUMBER, int('mutpy'.join(token)))
  97:                 advance = False
  98:             else:
  99:                 raise ValueError("A number must contain only digits.  Got '{}'".format(char))
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
 101:             if char == '.':
-------
  96:                 now_token = (TOKEN_TYPE.NUMBER, int(''.join(token)))
-------
--------------------------------------------------------------------------------
[0.00900 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 388] CRP nayajson:99 : 
--------------------------------------------------------------------------------
  95:                 completed = True
  96:                 now_token = (TOKEN_TYPE.NUMBER, int(''.join(token)))
  97:                 advance = False
  98:             else:
~ 99:                 raise ValueError('mutpy'.format(char))
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
 101:             if char == '.':
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
 103:                 add_char = True
 104:             elif (char == 'e' or char == 'E'):
-------
  99:                 raise ValueError("A number must contain only digits.  Got '{}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01689 s] +survived
   - [# 389] CRP nayajson:99 : 
--------------------------------------------------------------------------------
  95:                 completed = True
  96:                 now_token = (TOKEN_TYPE.NUMBER, int(''.join(token)))
  97:                 advance = False
  98:             else:
~ 99:                 raise ValueError(''.format(char))
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
 101:             if char == '.':
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
 103:                 add_char = True
 104:             elif (char == 'e' or char == 'E'):
-------
  99:                 raise ValueError("A number must contain only digits.  Got '{}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01920 s] +survived
   - [# 390] CRP nayajson:101: 
--------------------------------------------------------------------------------
  97:                 advance = False
  98:             else:
  99:                 raise ValueError("A number must contain only digits.  Got '{}'".format(char))
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
~101:             if char == 'mutpy':
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
 103:                 add_char = True
 104:             elif (char == 'e' or char == 'E'):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 106:                 add_char = True
-------
 101:             if char == '.':
-------
--------------------------------------------------------------------------------
[0.00997 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 391] CRP nayajson:101: 
--------------------------------------------------------------------------------
  97:                 advance = False
  98:             else:
  99:                 raise ValueError("A number must contain only digits.  Got '{}'".format(char))
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
~101:             if char == '':
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
 103:                 add_char = True
 104:             elif (char == 'e' or char == 'E'):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 106:                 add_char = True
-------
 101:             if char == '.':
-------
--------------------------------------------------------------------------------
[0.00957 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 392] CRP nayajson:104: 
--------------------------------------------------------------------------------
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
 101:             if char == '.':
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
 103:                 add_char = True
~104:             elif (char == 'mutpy' or char == 'E'):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 106:                 add_char = True
 107:             elif is_delimiter(char):
 108:                 next_state = __TOKENIZER_STATE.WHITESPACE
 109:                 completed = True
-------
 104:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.01007 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 393] CRP nayajson:104: 
--------------------------------------------------------------------------------
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
 101:             if char == '.':
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
 103:                 add_char = True
~104:             elif (char == '' or char == 'E'):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 106:                 add_char = True
 107:             elif is_delimiter(char):
 108:                 next_state = __TOKENIZER_STATE.WHITESPACE
 109:                 completed = True
-------
 104:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.01019 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 394] CRP nayajson:104: 
--------------------------------------------------------------------------------
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
 101:             if char == '.':
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
 103:                 add_char = True
~104:             elif (char == 'e' or char == 'mutpy'):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 106:                 add_char = True
 107:             elif is_delimiter(char):
 108:                 next_state = __TOKENIZER_STATE.WHITESPACE
 109:                 completed = True
-------
 104:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.01734 s] +survived
   - [# 395] CRP nayajson:104: 
--------------------------------------------------------------------------------
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
 101:             if char == '.':
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
 103:                 add_char = True
~104:             elif (char == 'e' or char == ''):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 106:                 add_char = True
 107:             elif is_delimiter(char):
 108:                 next_state = __TOKENIZER_STATE.WHITESPACE
 109:                 completed = True
-------
 104:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.01795 s] +survived
   - [# 396] CRP nayajson:110: 
--------------------------------------------------------------------------------
 106:                 add_char = True
 107:             elif is_delimiter(char):
 108:                 next_state = __TOKENIZER_STATE.WHITESPACE
 109:                 completed = True
~110:                 now_token = (TOKEN_TYPE.NUMBER, 1)
 111:                 advance = False
 112:             else:
 113:                 raise ValueError("A 0 must be followed by a '.' or a 'e'.  Got '{0}'".format(char))
 114:         elif state == __TOKENIZER_STATE.INTEGER_SIGN:
 115:             if char == '0':
-------
 110:                 now_token = (TOKEN_TYPE.NUMBER, 0)
-------
--------------------------------------------------------------------------------
[0.00958 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 397] CRP nayajson:113: 
--------------------------------------------------------------------------------
 109:                 completed = True
 110:                 now_token = (TOKEN_TYPE.NUMBER, 0)
 111:                 advance = False
 112:             else:
~113:                 raise ValueError('mutpy'.format(char))
 114:         elif state == __TOKENIZER_STATE.INTEGER_SIGN:
 115:             if char == '0':
 116:                 next_state = __TOKENIZER_STATE.INTEGER_0
 117:                 add_char = True
 118:             elif char in '123456789':
-------
 113:                 raise ValueError("A 0 must be followed by a '.' or a 'e'.  Got '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01697 s] +survived
   - [# 398] CRP nayajson:113: 
--------------------------------------------------------------------------------
 109:                 completed = True
 110:                 now_token = (TOKEN_TYPE.NUMBER, 0)
 111:                 advance = False
 112:             else:
~113:                 raise ValueError(''.format(char))
 114:         elif state == __TOKENIZER_STATE.INTEGER_SIGN:
 115:             if char == '0':
 116:                 next_state = __TOKENIZER_STATE.INTEGER_0
 117:                 add_char = True
 118:             elif char in '123456789':
-------
 113:                 raise ValueError("A 0 must be followed by a '.' or a 'e'.  Got '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01705 s] +survived
   - [# 399] CRP nayajson:115: 
--------------------------------------------------------------------------------
 111:                 advance = False
 112:             else:
 113:                 raise ValueError("A 0 must be followed by a '.' or a 'e'.  Got '{0}'".format(char))
 114:         elif state == __TOKENIZER_STATE.INTEGER_SIGN:
~115:             if char == 'mutpy':
 116:                 next_state = __TOKENIZER_STATE.INTEGER_0
 117:                 add_char = True
 118:             elif char in '123456789':
 119:                 next_state = __TOKENIZER_STATE.INTEGER
 120:                 add_char = True
-------
 115:             if char == '0':
-------
--------------------------------------------------------------------------------
[0.00976 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 400] CRP nayajson:115: 
--------------------------------------------------------------------------------
 111:                 advance = False
 112:             else:
 113:                 raise ValueError("A 0 must be followed by a '.' or a 'e'.  Got '{0}'".format(char))
 114:         elif state == __TOKENIZER_STATE.INTEGER_SIGN:
~115:             if char == '':
 116:                 next_state = __TOKENIZER_STATE.INTEGER_0
 117:                 add_char = True
 118:             elif char in '123456789':
 119:                 next_state = __TOKENIZER_STATE.INTEGER
 120:                 add_char = True
-------
 115:             if char == '0':
-------
--------------------------------------------------------------------------------
[0.00987 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 401] CRP nayajson:118: 
--------------------------------------------------------------------------------
 114:         elif state == __TOKENIZER_STATE.INTEGER_SIGN:
 115:             if char == '0':
 116:                 next_state = __TOKENIZER_STATE.INTEGER_0
 117:                 add_char = True
~118:             elif char in 'mutpy':
 119:                 next_state = __TOKENIZER_STATE.INTEGER
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
-------
 118:             elif char in '123456789':
-------
--------------------------------------------------------------------------------
[0.01845 s] +survived
   - [# 402] CRP nayajson:118: 
--------------------------------------------------------------------------------
 114:         elif state == __TOKENIZER_STATE.INTEGER_SIGN:
 115:             if char == '0':
 116:                 next_state = __TOKENIZER_STATE.INTEGER_0
 117:                 add_char = True
~118:             elif char in '':
 119:                 next_state = __TOKENIZER_STATE.INTEGER
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
-------
 118:             elif char in '123456789':
-------
--------------------------------------------------------------------------------
[0.01670 s] +survived
   - [# 403] CRP nayajson:122: 
--------------------------------------------------------------------------------
 118:             elif char in '123456789':
 119:                 next_state = __TOKENIZER_STATE.INTEGER
 120:                 add_char = True
 121:             else:
~122:                 raise ValueError('mutpy'.format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
 124:             if (char == '+' or char == '-' or char in '0123456789'):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
-------
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01743 s] +survived
   - [# 404] CRP nayajson:122: 
--------------------------------------------------------------------------------
 118:             elif char in '123456789':
 119:                 next_state = __TOKENIZER_STATE.INTEGER
 120:                 add_char = True
 121:             else:
~122:                 raise ValueError(''.format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
 124:             if (char == '+' or char == '-' or char in '0123456789'):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
-------
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01674 s] +survived
   - [# 405] CRP nayajson:124: 
--------------------------------------------------------------------------------
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
~124:             if (char == 'mutpy' or char == '-' or char in '0123456789'):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
-------
 124:             if (char == '+' or char == '-' or char in '0123456789'):
-------
--------------------------------------------------------------------------------
[0.01741 s] +survived
   - [# 406] CRP nayajson:124: 
--------------------------------------------------------------------------------
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
~124:             if (char == '' or char == '-' or char in '0123456789'):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
-------
 124:             if (char == '+' or char == '-' or char in '0123456789'):
-------
--------------------------------------------------------------------------------
[0.01727 s] +survived
   - [# 407] CRP nayajson:124: 
--------------------------------------------------------------------------------
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
~124:             if (char == '+' or char == 'mutpy' or char in '0123456789'):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
-------
 124:             if (char == '+' or char == '-' or char in '0123456789'):
-------
--------------------------------------------------------------------------------
[0.01138 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 408] CRP nayajson:124: 
--------------------------------------------------------------------------------
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
~124:             if (char == '+' or char == '' or char in '0123456789'):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
-------
 124:             if (char == '+' or char == '-' or char in '0123456789'):
-------
--------------------------------------------------------------------------------
[0.00944 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 409] CRP nayajson:124: 
--------------------------------------------------------------------------------
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
~124:             if (char == '+' or char == '-' or char in 'mutpy'):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
-------
 124:             if (char == '+' or char == '-' or char in '0123456789'):
-------
--------------------------------------------------------------------------------
[0.00964 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 410] CRP nayajson:124: 
--------------------------------------------------------------------------------
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
~124:             if (char == '+' or char == '-' or char in ''):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
-------
 124:             if (char == '+' or char == '-' or char in '0123456789'):
-------
--------------------------------------------------------------------------------
[0.01000 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 411] CRP nayajson:128: 
--------------------------------------------------------------------------------
 124:             if (char == '+' or char == '-' or char in '0123456789'):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
~128:                 raise ValueError('mutpy'.format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
 130:             if char in '0123456789':
 131:                 add_char = True
 132:             elif is_delimiter(char):
 133:                 completed = True
-------
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01866 s] +survived
   - [# 412] CRP nayajson:128: 
--------------------------------------------------------------------------------
 124:             if (char == '+' or char == '-' or char in '0123456789'):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
~128:                 raise ValueError(''.format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
 130:             if char in '0123456789':
 131:                 add_char = True
 132:             elif is_delimiter(char):
 133:                 completed = True
-------
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01461 s] +survived
   - [# 413] CRP nayajson:130: 
--------------------------------------------------------------------------------
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
~130:             if char in 'mutpy':
 131:                 add_char = True
 132:             elif is_delimiter(char):
 133:                 completed = True
 134:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
 135:                 next_state = __TOKENIZER_STATE.WHITESPACE
-------
 130:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.00978 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 414] CRP nayajson:130: 
--------------------------------------------------------------------------------
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
~130:             if char in '':
 131:                 add_char = True
 132:             elif is_delimiter(char):
 133:                 completed = True
 134:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
 135:                 next_state = __TOKENIZER_STATE.WHITESPACE
-------
 130:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.00986 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 415] CRP nayajson:134: 
--------------------------------------------------------------------------------
 130:             if char in '0123456789':
 131:                 add_char = True
 132:             elif is_delimiter(char):
 133:                 completed = True
~134:                 now_token = (TOKEN_TYPE.NUMBER, float('mutpy'.join(token)))
 135:                 next_state = __TOKENIZER_STATE.WHITESPACE
 136:                 advance = False
 137:             else:
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
-------
 134:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
-------
--------------------------------------------------------------------------------
[0.00990 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 416] CRP nayajson:138: 
--------------------------------------------------------------------------------
 134:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
 135:                 next_state = __TOKENIZER_STATE.WHITESPACE
 136:                 advance = False
 137:             else:
~138:                 raise ValueError('mutpy'.format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
 140:             if char in '0123456789':
 141:                 add_char = True
 142:             elif (char == 'e' or char == 'E'):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
-------
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01720 s] +survived
   - [# 417] CRP nayajson:138: 
--------------------------------------------------------------------------------
 134:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
 135:                 next_state = __TOKENIZER_STATE.WHITESPACE
 136:                 advance = False
 137:             else:
~138:                 raise ValueError(''.format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
 140:             if char in '0123456789':
 141:                 add_char = True
 142:             elif (char == 'e' or char == 'E'):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
-------
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01652 s] +survived
   - [# 418] CRP nayajson:140: 
--------------------------------------------------------------------------------
 136:                 advance = False
 137:             else:
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
~140:             if char in 'mutpy':
 141:                 add_char = True
 142:             elif (char == 'e' or char == 'E'):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
 145:             elif is_delimiter(char):
-------
 140:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.00991 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 419] CRP nayajson:140: 
--------------------------------------------------------------------------------
 136:                 advance = False
 137:             else:
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
~140:             if char in '':
 141:                 add_char = True
 142:             elif (char == 'e' or char == 'E'):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
 145:             elif is_delimiter(char):
-------
 140:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.00971 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 420] CRP nayajson:142: 
--------------------------------------------------------------------------------
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
 140:             if char in '0123456789':
 141:                 add_char = True
~142:             elif (char == 'mutpy' or char == 'E'):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
 145:             elif is_delimiter(char):
 146:                 completed = True
 147:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
-------
 142:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.02167 s] +survived
   - [# 421] CRP nayajson:142: 
--------------------------------------------------------------------------------
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
 140:             if char in '0123456789':
 141:                 add_char = True
~142:             elif (char == '' or char == 'E'):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
 145:             elif is_delimiter(char):
 146:                 completed = True
 147:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
-------
 142:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.02177 s] +survived
   - [# 422] CRP nayajson:142: 
--------------------------------------------------------------------------------
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
 140:             if char in '0123456789':
 141:                 add_char = True
~142:             elif (char == 'e' or char == 'mutpy'):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
 145:             elif is_delimiter(char):
 146:                 completed = True
 147:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
-------
 142:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.01049 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 423] CRP nayajson:142: 
--------------------------------------------------------------------------------
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
 140:             if char in '0123456789':
 141:                 add_char = True
~142:             elif (char == 'e' or char == ''):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
 145:             elif is_delimiter(char):
 146:                 completed = True
 147:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
-------
 142:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.01128 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 424] CRP nayajson:147: 
--------------------------------------------------------------------------------
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
 145:             elif is_delimiter(char):
 146:                 completed = True
~147:                 now_token = (TOKEN_TYPE.NUMBER, float('mutpy'.join(token)))
 148:                 next_state = __TOKENIZER_STATE.WHITESPACE
 149:                 advance = False
 150:             else:
 151:                 raise ValueError('A number must include only digits')
 152:         elif state == __TOKENIZER_STATE.FLOATING_POINT_0:
-------
 147:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
-------
--------------------------------------------------------------------------------
[0.00969 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 425] CRP nayajson:151: 
--------------------------------------------------------------------------------
 147:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
 148:                 next_state = __TOKENIZER_STATE.WHITESPACE
 149:                 advance = False
 150:             else:
~151:                 raise ValueError('mutpy')
 152:         elif state == __TOKENIZER_STATE.FLOATING_POINT_0:
 153:             if char in '0123456789':
 154:                 next_state = __TOKENIZER_STATE.FLOATING_POINT
 155:                 add_char = True
 156:             else:
-------
 151:                 raise ValueError('A number must include only digits')
-------
--------------------------------------------------------------------------------
[0.01718 s] +survived
   - [# 426] CRP nayajson:151: 
--------------------------------------------------------------------------------
 147:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
 148:                 next_state = __TOKENIZER_STATE.WHITESPACE
 149:                 advance = False
 150:             else:
~151:                 raise ValueError('')
 152:         elif state == __TOKENIZER_STATE.FLOATING_POINT_0:
 153:             if char in '0123456789':
 154:                 next_state = __TOKENIZER_STATE.FLOATING_POINT
 155:                 add_char = True
 156:             else:
-------
 151:                 raise ValueError('A number must include only digits')
-------
--------------------------------------------------------------------------------
[0.01668 s] +survived
   - [# 427] CRP nayajson:153: 
--------------------------------------------------------------------------------
 149:                 advance = False
 150:             else:
 151:                 raise ValueError('A number must include only digits')
 152:         elif state == __TOKENIZER_STATE.FLOATING_POINT_0:
~153:             if char in 'mutpy':
 154:                 next_state = __TOKENIZER_STATE.FLOATING_POINT
 155:                 add_char = True
 156:             else:
 157:                 raise ValueError('A number with a decimal point must be followed by a fractional part')
 158:         elif state == __TOKENIZER_STATE.FALSE_1:
-------
 153:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.01025 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 428] CRP nayajson:153: 
--------------------------------------------------------------------------------
 149:                 advance = False
 150:             else:
 151:                 raise ValueError('A number must include only digits')
 152:         elif state == __TOKENIZER_STATE.FLOATING_POINT_0:
~153:             if char in '':
 154:                 next_state = __TOKENIZER_STATE.FLOATING_POINT
 155:                 add_char = True
 156:             else:
 157:                 raise ValueError('A number with a decimal point must be followed by a fractional part')
 158:         elif state == __TOKENIZER_STATE.FALSE_1:
-------
 153:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.00963 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 429] CRP nayajson:157: 
--------------------------------------------------------------------------------
 153:             if char in '0123456789':
 154:                 next_state = __TOKENIZER_STATE.FLOATING_POINT
 155:                 add_char = True
 156:             else:
~157:                 raise ValueError('mutpy')
 158:         elif state == __TOKENIZER_STATE.FALSE_1:
 159:             if char == 'a':
 160:                 next_state = __TOKENIZER_STATE.FALSE_2
 161:             else:
 162:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 157:                 raise ValueError('A number with a decimal point must be followed by a fractional part')
-------
--------------------------------------------------------------------------------
[0.01766 s] +survived
   - [# 430] CRP nayajson:157: 
--------------------------------------------------------------------------------
 153:             if char in '0123456789':
 154:                 next_state = __TOKENIZER_STATE.FLOATING_POINT
 155:                 add_char = True
 156:             else:
~157:                 raise ValueError('')
 158:         elif state == __TOKENIZER_STATE.FALSE_1:
 159:             if char == 'a':
 160:                 next_state = __TOKENIZER_STATE.FALSE_2
 161:             else:
 162:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 157:                 raise ValueError('A number with a decimal point must be followed by a fractional part')
-------
--------------------------------------------------------------------------------
[0.01743 s] +survived
   - [# 431] CRP nayajson:159: 
--------------------------------------------------------------------------------
 155:                 add_char = True
 156:             else:
 157:                 raise ValueError('A number with a decimal point must be followed by a fractional part')
 158:         elif state == __TOKENIZER_STATE.FALSE_1:
~159:             if char == 'mutpy':
 160:                 next_state = __TOKENIZER_STATE.FALSE_2
 161:             else:
 162:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 163:         elif state == __TOKENIZER_STATE.FALSE_2:
 164:             if char == 'l':
-------
 159:             if char == 'a':
-------
--------------------------------------------------------------------------------
[0.01709 s] +survived
   - [# 432] CRP nayajson:159: 
--------------------------------------------------------------------------------
 155:                 add_char = True
 156:             else:
 157:                 raise ValueError('A number with a decimal point must be followed by a fractional part')
 158:         elif state == __TOKENIZER_STATE.FALSE_1:
~159:             if char == '':
 160:                 next_state = __TOKENIZER_STATE.FALSE_2
 161:             else:
 162:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 163:         elif state == __TOKENIZER_STATE.FALSE_2:
 164:             if char == 'l':
-------
 159:             if char == 'a':
-------
--------------------------------------------------------------------------------
[0.01729 s] +survived
   - [# 433] CRP nayajson:162: 
--------------------------------------------------------------------------------
 158:         elif state == __TOKENIZER_STATE.FALSE_1:
 159:             if char == 'a':
 160:                 next_state = __TOKENIZER_STATE.FALSE_2
 161:             else:
~162:                 raise ValueError('mutpy'.format(char))
 163:         elif state == __TOKENIZER_STATE.FALSE_2:
 164:             if char == 'l':
 165:                 next_state = __TOKENIZER_STATE.FALSE_3
 166:             else:
 167:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 162:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.02045 s] +survived
   - [# 434] CRP nayajson:162: 
--------------------------------------------------------------------------------
 158:         elif state == __TOKENIZER_STATE.FALSE_1:
 159:             if char == 'a':
 160:                 next_state = __TOKENIZER_STATE.FALSE_2
 161:             else:
~162:                 raise ValueError(''.format(char))
 163:         elif state == __TOKENIZER_STATE.FALSE_2:
 164:             if char == 'l':
 165:                 next_state = __TOKENIZER_STATE.FALSE_3
 166:             else:
 167:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 162:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01958 s] +survived
   - [# 435] CRP nayajson:164: 
--------------------------------------------------------------------------------
 160:                 next_state = __TOKENIZER_STATE.FALSE_2
 161:             else:
 162:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 163:         elif state == __TOKENIZER_STATE.FALSE_2:
~164:             if char == 'mutpy':
 165:                 next_state = __TOKENIZER_STATE.FALSE_3
 166:             else:
 167:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 168:         elif state == __TOKENIZER_STATE.FALSE_3:
 169:             if char == 's':
-------
 164:             if char == 'l':
-------
--------------------------------------------------------------------------------
[0.01966 s] +survived
   - [# 436] CRP nayajson:164: 
--------------------------------------------------------------------------------
 160:                 next_state = __TOKENIZER_STATE.FALSE_2
 161:             else:
 162:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 163:         elif state == __TOKENIZER_STATE.FALSE_2:
~164:             if char == '':
 165:                 next_state = __TOKENIZER_STATE.FALSE_3
 166:             else:
 167:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 168:         elif state == __TOKENIZER_STATE.FALSE_3:
 169:             if char == 's':
-------
 164:             if char == 'l':
-------
--------------------------------------------------------------------------------
[0.01504 s] +survived
   - [# 437] CRP nayajson:167: 
--------------------------------------------------------------------------------
 163:         elif state == __TOKENIZER_STATE.FALSE_2:
 164:             if char == 'l':
 165:                 next_state = __TOKENIZER_STATE.FALSE_3
 166:             else:
~167:                 raise ValueError('mutpy'.format(char))
 168:         elif state == __TOKENIZER_STATE.FALSE_3:
 169:             if char == 's':
 170:                 next_state = __TOKENIZER_STATE.FALSE_4
 171:             else:
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 167:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01612 s] +survived
   - [# 438] CRP nayajson:167: 
--------------------------------------------------------------------------------
 163:         elif state == __TOKENIZER_STATE.FALSE_2:
 164:             if char == 'l':
 165:                 next_state = __TOKENIZER_STATE.FALSE_3
 166:             else:
~167:                 raise ValueError(''.format(char))
 168:         elif state == __TOKENIZER_STATE.FALSE_3:
 169:             if char == 's':
 170:                 next_state = __TOKENIZER_STATE.FALSE_4
 171:             else:
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 167:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01676 s] +survived
   - [# 439] CRP nayajson:169: 
--------------------------------------------------------------------------------
 165:                 next_state = __TOKENIZER_STATE.FALSE_3
 166:             else:
 167:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 168:         elif state == __TOKENIZER_STATE.FALSE_3:
~169:             if char == 'mutpy':
 170:                 next_state = __TOKENIZER_STATE.FALSE_4
 171:             else:
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 173:         elif state == __TOKENIZER_STATE.FALSE_4:
 174:             if char == 'e':
-------
 169:             if char == 's':
-------
--------------------------------------------------------------------------------
[0.01722 s] +survived
   - [# 440] CRP nayajson:169: 
--------------------------------------------------------------------------------
 165:                 next_state = __TOKENIZER_STATE.FALSE_3
 166:             else:
 167:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 168:         elif state == __TOKENIZER_STATE.FALSE_3:
~169:             if char == '':
 170:                 next_state = __TOKENIZER_STATE.FALSE_4
 171:             else:
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 173:         elif state == __TOKENIZER_STATE.FALSE_4:
 174:             if char == 'e':
-------
 169:             if char == 's':
-------
--------------------------------------------------------------------------------
[0.01779 s] +survived
   - [# 441] CRP nayajson:172: 
--------------------------------------------------------------------------------
 168:         elif state == __TOKENIZER_STATE.FALSE_3:
 169:             if char == 's':
 170:                 next_state = __TOKENIZER_STATE.FALSE_4
 171:             else:
~172:                 raise ValueError('mutpy'.format(char))
 173:         elif state == __TOKENIZER_STATE.FALSE_4:
 174:             if char == 'e':
 175:                 next_state = __TOKENIZER_STATE.WHITESPACE
 176:                 completed = True
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
-------
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01769 s] +survived
   - [# 442] CRP nayajson:172: 
--------------------------------------------------------------------------------
 168:         elif state == __TOKENIZER_STATE.FALSE_3:
 169:             if char == 's':
 170:                 next_state = __TOKENIZER_STATE.FALSE_4
 171:             else:
~172:                 raise ValueError(''.format(char))
 173:         elif state == __TOKENIZER_STATE.FALSE_4:
 174:             if char == 'e':
 175:                 next_state = __TOKENIZER_STATE.WHITESPACE
 176:                 completed = True
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
-------
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01719 s] +survived
   - [# 443] CRP nayajson:174: 
--------------------------------------------------------------------------------
 170:                 next_state = __TOKENIZER_STATE.FALSE_4
 171:             else:
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 173:         elif state == __TOKENIZER_STATE.FALSE_4:
~174:             if char == 'mutpy':
 175:                 next_state = __TOKENIZER_STATE.WHITESPACE
 176:                 completed = True
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
 178:             else:
 179:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 174:             if char == 'e':
-------
--------------------------------------------------------------------------------
[0.01756 s] +survived
   - [# 444] CRP nayajson:174: 
--------------------------------------------------------------------------------
 170:                 next_state = __TOKENIZER_STATE.FALSE_4
 171:             else:
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 173:         elif state == __TOKENIZER_STATE.FALSE_4:
~174:             if char == '':
 175:                 next_state = __TOKENIZER_STATE.WHITESPACE
 176:                 completed = True
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
 178:             else:
 179:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 174:             if char == 'e':
-------
--------------------------------------------------------------------------------
[0.01730 s] +survived
   - [# 445] CRP nayajson:179: 
--------------------------------------------------------------------------------
 175:                 next_state = __TOKENIZER_STATE.WHITESPACE
 176:                 completed = True
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
 178:             else:
~179:                 raise ValueError('mutpy'.format(char))
 180:         elif state == __TOKENIZER_STATE.TRUE_1:
 181:             if char == 'r':
 182:                 next_state = __TOKENIZER_STATE.TRUE_2
 183:             else:
 184:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 179:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01993 s] +survived
   - [# 446] CRP nayajson:179: 
--------------------------------------------------------------------------------
 175:                 next_state = __TOKENIZER_STATE.WHITESPACE
 176:                 completed = True
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
 178:             else:
~179:                 raise ValueError(''.format(char))
 180:         elif state == __TOKENIZER_STATE.TRUE_1:
 181:             if char == 'r':
 182:                 next_state = __TOKENIZER_STATE.TRUE_2
 183:             else:
 184:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 179:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01966 s] +survived
   - [# 447] CRP nayajson:181: 
--------------------------------------------------------------------------------
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
 178:             else:
 179:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 180:         elif state == __TOKENIZER_STATE.TRUE_1:
~181:             if char == 'mutpy':
 182:                 next_state = __TOKENIZER_STATE.TRUE_2
 183:             else:
 184:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 185:         elif state == __TOKENIZER_STATE.TRUE_2:
 186:             if char == 'u':
-------
 181:             if char == 'r':
-------
--------------------------------------------------------------------------------
[0.01474 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 448] CRP nayajson:181: 
--------------------------------------------------------------------------------
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
 178:             else:
 179:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 180:         elif state == __TOKENIZER_STATE.TRUE_1:
~181:             if char == '':
 182:                 next_state = __TOKENIZER_STATE.TRUE_2
 183:             else:
 184:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 185:         elif state == __TOKENIZER_STATE.TRUE_2:
 186:             if char == 'u':
-------
 181:             if char == 'r':
-------
--------------------------------------------------------------------------------
[0.01482 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 449] CRP nayajson:184: 
--------------------------------------------------------------------------------
 180:         elif state == __TOKENIZER_STATE.TRUE_1:
 181:             if char == 'r':
 182:                 next_state = __TOKENIZER_STATE.TRUE_2
 183:             else:
~184:                 raise ValueError('mutpy'.format(char))
 185:         elif state == __TOKENIZER_STATE.TRUE_2:
 186:             if char == 'u':
 187:                 next_state = __TOKENIZER_STATE.TRUE_3
 188:             else:
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 184:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01616 s] +survived
   - [# 450] CRP nayajson:184: 
--------------------------------------------------------------------------------
 180:         elif state == __TOKENIZER_STATE.TRUE_1:
 181:             if char == 'r':
 182:                 next_state = __TOKENIZER_STATE.TRUE_2
 183:             else:
~184:                 raise ValueError(''.format(char))
 185:         elif state == __TOKENIZER_STATE.TRUE_2:
 186:             if char == 'u':
 187:                 next_state = __TOKENIZER_STATE.TRUE_3
 188:             else:
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 184:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01738 s] +survived
   - [# 451] CRP nayajson:186: 
--------------------------------------------------------------------------------
 182:                 next_state = __TOKENIZER_STATE.TRUE_2
 183:             else:
 184:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 185:         elif state == __TOKENIZER_STATE.TRUE_2:
~186:             if char == 'mutpy':
 187:                 next_state = __TOKENIZER_STATE.TRUE_3
 188:             else:
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 190:         elif state == __TOKENIZER_STATE.TRUE_3:
 191:             if char == 'e':
-------
 186:             if char == 'u':
-------
--------------------------------------------------------------------------------
[0.01194 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 452] CRP nayajson:186: 
--------------------------------------------------------------------------------
 182:                 next_state = __TOKENIZER_STATE.TRUE_2
 183:             else:
 184:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 185:         elif state == __TOKENIZER_STATE.TRUE_2:
~186:             if char == '':
 187:                 next_state = __TOKENIZER_STATE.TRUE_3
 188:             else:
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 190:         elif state == __TOKENIZER_STATE.TRUE_3:
 191:             if char == 'e':
-------
 186:             if char == 'u':
-------
--------------------------------------------------------------------------------
[0.01183 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 453] CRP nayajson:189: 
--------------------------------------------------------------------------------
 185:         elif state == __TOKENIZER_STATE.TRUE_2:
 186:             if char == 'u':
 187:                 next_state = __TOKENIZER_STATE.TRUE_3
 188:             else:
~189:                 raise ValueError('mutpy'.format(char))
 190:         elif state == __TOKENIZER_STATE.TRUE_3:
 191:             if char == 'e':
 192:                 next_state = __TOKENIZER_STATE.WHITESPACE
 193:                 completed = True
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
-------
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01837 s] +survived
   - [# 454] CRP nayajson:189: 
--------------------------------------------------------------------------------
 185:         elif state == __TOKENIZER_STATE.TRUE_2:
 186:             if char == 'u':
 187:                 next_state = __TOKENIZER_STATE.TRUE_3
 188:             else:
~189:                 raise ValueError(''.format(char))
 190:         elif state == __TOKENIZER_STATE.TRUE_3:
 191:             if char == 'e':
 192:                 next_state = __TOKENIZER_STATE.WHITESPACE
 193:                 completed = True
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
-------
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01729 s] +survived
   - [# 455] CRP nayajson:191: 
--------------------------------------------------------------------------------
 187:                 next_state = __TOKENIZER_STATE.TRUE_3
 188:             else:
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 190:         elif state == __TOKENIZER_STATE.TRUE_3:
~191:             if char == 'mutpy':
 192:                 next_state = __TOKENIZER_STATE.WHITESPACE
 193:                 completed = True
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
 195:             else:
 196:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 191:             if char == 'e':
-------
--------------------------------------------------------------------------------
[0.01182 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 456] CRP nayajson:191: 
--------------------------------------------------------------------------------
 187:                 next_state = __TOKENIZER_STATE.TRUE_3
 188:             else:
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 190:         elif state == __TOKENIZER_STATE.TRUE_3:
~191:             if char == '':
 192:                 next_state = __TOKENIZER_STATE.WHITESPACE
 193:                 completed = True
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
 195:             else:
 196:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 191:             if char == 'e':
-------
--------------------------------------------------------------------------------
[0.01201 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 457] CRP nayajson:196: 
--------------------------------------------------------------------------------
 192:                 next_state = __TOKENIZER_STATE.WHITESPACE
 193:                 completed = True
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
 195:             else:
~196:                 raise ValueError('mutpy'.format(char))
 197:         elif state == __TOKENIZER_STATE.NULL_1:
 198:             if char == 'u':
 199:                 next_state = __TOKENIZER_STATE.NULL_2
 200:             else:
 201:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 196:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01745 s] +survived
   - [# 458] CRP nayajson:196: 
--------------------------------------------------------------------------------
 192:                 next_state = __TOKENIZER_STATE.WHITESPACE
 193:                 completed = True
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
 195:             else:
~196:                 raise ValueError(''.format(char))
 197:         elif state == __TOKENIZER_STATE.NULL_1:
 198:             if char == 'u':
 199:                 next_state = __TOKENIZER_STATE.NULL_2
 200:             else:
 201:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 196:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01618 s] +survived
   - [# 459] CRP nayajson:198: 
--------------------------------------------------------------------------------
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
 195:             else:
 196:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 197:         elif state == __TOKENIZER_STATE.NULL_1:
~198:             if char == 'mutpy':
 199:                 next_state = __TOKENIZER_STATE.NULL_2
 200:             else:
 201:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 202:         elif state == __TOKENIZER_STATE.NULL_2:
 203:             if char == 'l':
-------
 198:             if char == 'u':
-------
--------------------------------------------------------------------------------
[0.01403 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 460] CRP nayajson:198: 
--------------------------------------------------------------------------------
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
 195:             else:
 196:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 197:         elif state == __TOKENIZER_STATE.NULL_1:
~198:             if char == '':
 199:                 next_state = __TOKENIZER_STATE.NULL_2
 200:             else:
 201:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 202:         elif state == __TOKENIZER_STATE.NULL_2:
 203:             if char == 'l':
-------
 198:             if char == 'u':
-------
--------------------------------------------------------------------------------
[0.01630 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 461] CRP nayajson:201: 
--------------------------------------------------------------------------------
 197:         elif state == __TOKENIZER_STATE.NULL_1:
 198:             if char == 'u':
 199:                 next_state = __TOKENIZER_STATE.NULL_2
 200:             else:
~201:                 raise ValueError('mutpy'.format(char))
 202:         elif state == __TOKENIZER_STATE.NULL_2:
 203:             if char == 'l':
 204:                 next_state = __TOKENIZER_STATE.NULL_3
 205:             else:
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 201:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.02027 s] +survived
   - [# 462] CRP nayajson:201: 
--------------------------------------------------------------------------------
 197:         elif state == __TOKENIZER_STATE.NULL_1:
 198:             if char == 'u':
 199:                 next_state = __TOKENIZER_STATE.NULL_2
 200:             else:
~201:                 raise ValueError(''.format(char))
 202:         elif state == __TOKENIZER_STATE.NULL_2:
 203:             if char == 'l':
 204:                 next_state = __TOKENIZER_STATE.NULL_3
 205:             else:
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 201:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01739 s] +survived
   - [# 463] CRP nayajson:203: 
--------------------------------------------------------------------------------
 199:                 next_state = __TOKENIZER_STATE.NULL_2
 200:             else:
 201:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 202:         elif state == __TOKENIZER_STATE.NULL_2:
~203:             if char == 'mutpy':
 204:                 next_state = __TOKENIZER_STATE.NULL_3
 205:             else:
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 207:         elif state == __TOKENIZER_STATE.NULL_3:
 208:             if char == 'l':
-------
 203:             if char == 'l':
-------
--------------------------------------------------------------------------------
[0.01379 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 464] CRP nayajson:203: 
--------------------------------------------------------------------------------
 199:                 next_state = __TOKENIZER_STATE.NULL_2
 200:             else:
 201:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 202:         elif state == __TOKENIZER_STATE.NULL_2:
~203:             if char == '':
 204:                 next_state = __TOKENIZER_STATE.NULL_3
 205:             else:
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 207:         elif state == __TOKENIZER_STATE.NULL_3:
 208:             if char == 'l':
-------
 203:             if char == 'l':
-------
--------------------------------------------------------------------------------
[0.01411 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 465] CRP nayajson:206: 
--------------------------------------------------------------------------------
 202:         elif state == __TOKENIZER_STATE.NULL_2:
 203:             if char == 'l':
 204:                 next_state = __TOKENIZER_STATE.NULL_3
 205:             else:
~206:                 raise ValueError('mutpy'.format(char))
 207:         elif state == __TOKENIZER_STATE.NULL_3:
 208:             if char == 'l':
 209:                 next_state = __TOKENIZER_STATE.WHITESPACE
 210:                 completed = True
 211:                 now_token = (TOKEN_TYPE.NULL, None)
-------
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01762 s] +survived
   - [# 466] CRP nayajson:206: 
--------------------------------------------------------------------------------
 202:         elif state == __TOKENIZER_STATE.NULL_2:
 203:             if char == 'l':
 204:                 next_state = __TOKENIZER_STATE.NULL_3
 205:             else:
~206:                 raise ValueError(''.format(char))
 207:         elif state == __TOKENIZER_STATE.NULL_3:
 208:             if char == 'l':
 209:                 next_state = __TOKENIZER_STATE.WHITESPACE
 210:                 completed = True
 211:                 now_token = (TOKEN_TYPE.NULL, None)
-------
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01737 s] +survived
   - [# 467] CRP nayajson:208: 
--------------------------------------------------------------------------------
 204:                 next_state = __TOKENIZER_STATE.NULL_3
 205:             else:
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 207:         elif state == __TOKENIZER_STATE.NULL_3:
~208:             if char == 'mutpy':
 209:                 next_state = __TOKENIZER_STATE.WHITESPACE
 210:                 completed = True
 211:                 now_token = (TOKEN_TYPE.NULL, None)
 212:             else:
 213:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 208:             if char == 'l':
-------
--------------------------------------------------------------------------------
[0.01402 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 468] CRP nayajson:208: 
--------------------------------------------------------------------------------
 204:                 next_state = __TOKENIZER_STATE.NULL_3
 205:             else:
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 207:         elif state == __TOKENIZER_STATE.NULL_3:
~208:             if char == '':
 209:                 next_state = __TOKENIZER_STATE.WHITESPACE
 210:                 completed = True
 211:                 now_token = (TOKEN_TYPE.NULL, None)
 212:             else:
 213:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 208:             if char == 'l':
-------
--------------------------------------------------------------------------------
[0.01307 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 469] CRP nayajson:213: 
--------------------------------------------------------------------------------
 209:                 next_state = __TOKENIZER_STATE.WHITESPACE
 210:                 completed = True
 211:                 now_token = (TOKEN_TYPE.NULL, None)
 212:             else:
~213:                 raise ValueError('mutpy'.format(char))
 214:         elif state == __TOKENIZER_STATE.STRING:
 215:             if char == '"':
 216:                 completed = True
 217:                 now_token = (TOKEN_TYPE.STRING, ''.join(token))
 218:                 next_state = __TOKENIZER_STATE.STRING_END
-------
 213:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01667 s] +survived
   - [# 470] CRP nayajson:213: 
--------------------------------------------------------------------------------
 209:                 next_state = __TOKENIZER_STATE.WHITESPACE
 210:                 completed = True
 211:                 now_token = (TOKEN_TYPE.NULL, None)
 212:             else:
~213:                 raise ValueError(''.format(char))
 214:         elif state == __TOKENIZER_STATE.STRING:
 215:             if char == '"':
 216:                 completed = True
 217:                 now_token = (TOKEN_TYPE.STRING, ''.join(token))
 218:                 next_state = __TOKENIZER_STATE.STRING_END
-------
 213:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01741 s] +survived
   - [# 471] CRP nayajson:215: 
--------------------------------------------------------------------------------
 211:                 now_token = (TOKEN_TYPE.NULL, None)
 212:             else:
 213:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 214:         elif state == __TOKENIZER_STATE.STRING:
~215:             if char == 'mutpy':
 216:                 completed = True
 217:                 now_token = (TOKEN_TYPE.STRING, ''.join(token))
 218:                 next_state = __TOKENIZER_STATE.STRING_END
 219:             elif char == '\\':
 220:                 next_state = __TOKENIZER_STATE.STRING_ESCAPE
-------
 215:             if char == '"':
-------
--------------------------------------------------------------------------------
[0.00879 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 472] CRP nayajson:215: 
--------------------------------------------------------------------------------
 211:                 now_token = (TOKEN_TYPE.NULL, None)
 212:             else:
 213:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 214:         elif state == __TOKENIZER_STATE.STRING:
~215:             if char == '':
 216:                 completed = True
 217:                 now_token = (TOKEN_TYPE.STRING, ''.join(token))
 218:                 next_state = __TOKENIZER_STATE.STRING_END
 219:             elif char == '\\':
 220:                 next_state = __TOKENIZER_STATE.STRING_ESCAPE
-------
 215:             if char == '"':
-------
--------------------------------------------------------------------------------
[0.00884 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 473] CRP nayajson:217: 
--------------------------------------------------------------------------------
 213:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 214:         elif state == __TOKENIZER_STATE.STRING:
 215:             if char == '"':
 216:                 completed = True
~217:                 now_token = (TOKEN_TYPE.STRING, 'mutpy'.join(token))
 218:                 next_state = __TOKENIZER_STATE.STRING_END
 219:             elif char == '\\':
 220:                 next_state = __TOKENIZER_STATE.STRING_ESCAPE
 221:             else:
 222:                 add_char = True
-------
 217:                 now_token = (TOKEN_TYPE.STRING, ''.join(token))
-------
--------------------------------------------------------------------------------
[0.01170 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 474] CRP nayajson:219: 
--------------------------------------------------------------------------------
 215:             if char == '"':
 216:                 completed = True
 217:                 now_token = (TOKEN_TYPE.STRING, ''.join(token))
 218:                 next_state = __TOKENIZER_STATE.STRING_END
~219:             elif char == 'mutpy':
 220:                 next_state = __TOKENIZER_STATE.STRING_ESCAPE
 221:             else:
 222:                 add_char = True
 223:         elif state == __TOKENIZER_STATE.STRING_END:
 224:             if is_delimiter(char):
-------
 219:             elif char == '\\':
-------
--------------------------------------------------------------------------------
[0.02175 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 475] CRP nayajson:219: 
--------------------------------------------------------------------------------
 215:             if char == '"':
 216:                 completed = True
 217:                 now_token = (TOKEN_TYPE.STRING, ''.join(token))
 218:                 next_state = __TOKENIZER_STATE.STRING_END
~219:             elif char == '':
 220:                 next_state = __TOKENIZER_STATE.STRING_ESCAPE
 221:             else:
 222:                 add_char = True
 223:         elif state == __TOKENIZER_STATE.STRING_END:
 224:             if is_delimiter(char):
-------
 219:             elif char == '\\':
-------
--------------------------------------------------------------------------------
[0.01754 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 476] CRP nayajson:228: 
--------------------------------------------------------------------------------
 224:             if is_delimiter(char):
 225:                 advance = False
 226:                 next_state = __TOKENIZER_STATE.WHITESPACE
 227:             else:
~228:                 raise ValueError('mutpy'.format(char))
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
 230:             next_state = __TOKENIZER_STATE.STRING
 231:             if (char == '\\' or char == '"'):
 232:                 add_char = True
 233:             elif char == 'b':
-------
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01724 s] +survived
   - [# 477] CRP nayajson:228: 
--------------------------------------------------------------------------------
 224:             if is_delimiter(char):
 225:                 advance = False
 226:                 next_state = __TOKENIZER_STATE.WHITESPACE
 227:             else:
~228:                 raise ValueError(''.format(char))
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
 230:             next_state = __TOKENIZER_STATE.STRING
 231:             if (char == '\\' or char == '"'):
 232:                 add_char = True
 233:             elif char == 'b':
-------
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
-------
--------------------------------------------------------------------------------
[0.01736 s] +survived
   - [# 478] CRP nayajson:231: 
--------------------------------------------------------------------------------
 227:             else:
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
 230:             next_state = __TOKENIZER_STATE.STRING
~231:             if (char == 'mutpy' or char == '"'):
 232:                 add_char = True
 233:             elif char == 'b':
 234:                 char = '\x08'
 235:                 add_char = True
 236:             elif char == 'f':
-------
 231:             if (char == '\\' or char == '"'):
-------
--------------------------------------------------------------------------------
[0.01805 s] +survived
   - [# 479] CRP nayajson:231: 
--------------------------------------------------------------------------------
 227:             else:
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
 230:             next_state = __TOKENIZER_STATE.STRING
~231:             if (char == '' or char == '"'):
 232:                 add_char = True
 233:             elif char == 'b':
 234:                 char = '\x08'
 235:                 add_char = True
 236:             elif char == 'f':
-------
 231:             if (char == '\\' or char == '"'):
-------
--------------------------------------------------------------------------------
[0.01789 s] +survived
   - [# 480] CRP nayajson:231: 
--------------------------------------------------------------------------------
 227:             else:
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
 230:             next_state = __TOKENIZER_STATE.STRING
~231:             if (char == '\\' or char == 'mutpy'):
 232:                 add_char = True
 233:             elif char == 'b':
 234:                 char = '\x08'
 235:                 add_char = True
 236:             elif char == 'f':
-------
 231:             if (char == '\\' or char == '"'):
-------
--------------------------------------------------------------------------------
[0.01866 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 481] CRP nayajson:231: 
--------------------------------------------------------------------------------
 227:             else:
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
 230:             next_state = __TOKENIZER_STATE.STRING
~231:             if (char == '\\' or char == ''):
 232:                 add_char = True
 233:             elif char == 'b':
 234:                 char = '\x08'
 235:                 add_char = True
 236:             elif char == 'f':
-------
 231:             if (char == '\\' or char == '"'):
-------
--------------------------------------------------------------------------------
[0.01969 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 482] CRP nayajson:233: 
--------------------------------------------------------------------------------
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
 230:             next_state = __TOKENIZER_STATE.STRING
 231:             if (char == '\\' or char == '"'):
 232:                 add_char = True
~233:             elif char == 'mutpy':
 234:                 char = '\x08'
 235:                 add_char = True
 236:             elif char == 'f':
 237:                 char = '\x0c'
 238:                 add_char = True
-------
 233:             elif char == 'b':
-------
--------------------------------------------------------------------------------
[0.01808 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 483] CRP nayajson:233: 
--------------------------------------------------------------------------------
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
 230:             next_state = __TOKENIZER_STATE.STRING
 231:             if (char == '\\' or char == '"'):
 232:                 add_char = True
~233:             elif char == '':
 234:                 char = '\x08'
 235:                 add_char = True
 236:             elif char == 'f':
 237:                 char = '\x0c'
 238:                 add_char = True
-------
 233:             elif char == 'b':
-------
--------------------------------------------------------------------------------
[0.01804 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 484] CRP nayajson:234: 
--------------------------------------------------------------------------------
 230:             next_state = __TOKENIZER_STATE.STRING
 231:             if (char == '\\' or char == '"'):
 232:                 add_char = True
 233:             elif char == 'b':
~234:                 char = 'mutpy'
 235:                 add_char = True
 236:             elif char == 'f':
 237:                 char = '\x0c'
 238:                 add_char = True
 239:             elif char == 'n':
-------
 234:                 char = '\x08'
-------
--------------------------------------------------------------------------------
[0.02052 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 485] CRP nayajson:234: 
--------------------------------------------------------------------------------
 230:             next_state = __TOKENIZER_STATE.STRING
 231:             if (char == '\\' or char == '"'):
 232:                 add_char = True
 233:             elif char == 'b':
~234:                 char = ''
 235:                 add_char = True
 236:             elif char == 'f':
 237:                 char = '\x0c'
 238:                 add_char = True
 239:             elif char == 'n':
-------
 234:                 char = '\x08'
-------
--------------------------------------------------------------------------------
[0.02061 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 486] CRP nayajson:236: 
--------------------------------------------------------------------------------
 232:                 add_char = True
 233:             elif char == 'b':
 234:                 char = '\x08'
 235:                 add_char = True
~236:             elif char == 'mutpy':
 237:                 char = '\x0c'
 238:                 add_char = True
 239:             elif char == 'n':
 240:                 char = '\n'
 241:                 add_char = True
-------
 236:             elif char == 'f':
-------
--------------------------------------------------------------------------------
[0.02086 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 487] CRP nayajson:236: 
--------------------------------------------------------------------------------
 232:                 add_char = True
 233:             elif char == 'b':
 234:                 char = '\x08'
 235:                 add_char = True
~236:             elif char == '':
 237:                 char = '\x0c'
 238:                 add_char = True
 239:             elif char == 'n':
 240:                 char = '\n'
 241:                 add_char = True
-------
 236:             elif char == 'f':
-------
--------------------------------------------------------------------------------
[0.02084 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 488] CRP nayajson:237: 
--------------------------------------------------------------------------------
 233:             elif char == 'b':
 234:                 char = '\x08'
 235:                 add_char = True
 236:             elif char == 'f':
~237:                 char = 'mutpy'
 238:                 add_char = True
 239:             elif char == 'n':
 240:                 char = '\n'
 241:                 add_char = True
 242:             elif char == 't':
-------
 237:                 char = '\x0c'
-------
--------------------------------------------------------------------------------
[0.01968 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 489] CRP nayajson:237: 
--------------------------------------------------------------------------------
 233:             elif char == 'b':
 234:                 char = '\x08'
 235:                 add_char = True
 236:             elif char == 'f':
~237:                 char = ''
 238:                 add_char = True
 239:             elif char == 'n':
 240:                 char = '\n'
 241:                 add_char = True
 242:             elif char == 't':
-------
 237:                 char = '\x0c'
-------
--------------------------------------------------------------------------------
[0.01940 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 490] CRP nayajson:239: 
--------------------------------------------------------------------------------
 235:                 add_char = True
 236:             elif char == 'f':
 237:                 char = '\x0c'
 238:                 add_char = True
~239:             elif char == 'mutpy':
 240:                 char = '\n'
 241:                 add_char = True
 242:             elif char == 't':
 243:                 char = '\t'
 244:                 add_char = True
-------
 239:             elif char == 'n':
-------
--------------------------------------------------------------------------------
[0.01859 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 491] CRP nayajson:239: 
--------------------------------------------------------------------------------
 235:                 add_char = True
 236:             elif char == 'f':
 237:                 char = '\x0c'
 238:                 add_char = True
~239:             elif char == '':
 240:                 char = '\n'
 241:                 add_char = True
 242:             elif char == 't':
 243:                 char = '\t'
 244:                 add_char = True
-------
 239:             elif char == 'n':
-------
--------------------------------------------------------------------------------
[0.01835 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 492] CRP nayajson:240: 
--------------------------------------------------------------------------------
 236:             elif char == 'f':
 237:                 char = '\x0c'
 238:                 add_char = True
 239:             elif char == 'n':
~240:                 char = 'mutpy'
 241:                 add_char = True
 242:             elif char == 't':
 243:                 char = '\t'
 244:                 add_char = True
 245:             elif char == 'r':
-------
 240:                 char = '\n'
-------
--------------------------------------------------------------------------------
[0.01824 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 493] CRP nayajson:240: 
--------------------------------------------------------------------------------
 236:             elif char == 'f':
 237:                 char = '\x0c'
 238:                 add_char = True
 239:             elif char == 'n':
~240:                 char = ''
 241:                 add_char = True
 242:             elif char == 't':
 243:                 char = '\t'
 244:                 add_char = True
 245:             elif char == 'r':
-------
 240:                 char = '\n'
-------
--------------------------------------------------------------------------------
[0.01792 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 494] CRP nayajson:242: 
--------------------------------------------------------------------------------
 238:                 add_char = True
 239:             elif char == 'n':
 240:                 char = '\n'
 241:                 add_char = True
~242:             elif char == 'mutpy':
 243:                 char = '\t'
 244:                 add_char = True
 245:             elif char == 'r':
 246:                 char = '\r'
 247:                 add_char = True
-------
 242:             elif char == 't':
-------
--------------------------------------------------------------------------------
[0.01801 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 495] CRP nayajson:242: 
--------------------------------------------------------------------------------
 238:                 add_char = True
 239:             elif char == 'n':
 240:                 char = '\n'
 241:                 add_char = True
~242:             elif char == '':
 243:                 char = '\t'
 244:                 add_char = True
 245:             elif char == 'r':
 246:                 char = '\r'
 247:                 add_char = True
-------
 242:             elif char == 't':
-------
--------------------------------------------------------------------------------
[0.01805 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 496] CRP nayajson:243: 
--------------------------------------------------------------------------------
 239:             elif char == 'n':
 240:                 char = '\n'
 241:                 add_char = True
 242:             elif char == 't':
~243:                 char = 'mutpy'
 244:                 add_char = True
 245:             elif char == 'r':
 246:                 char = '\r'
 247:                 add_char = True
 248:             elif char == '/':
-------
 243:                 char = '\t'
-------
--------------------------------------------------------------------------------
[0.01756 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 497] CRP nayajson:243: 
--------------------------------------------------------------------------------
 239:             elif char == 'n':
 240:                 char = '\n'
 241:                 add_char = True
 242:             elif char == 't':
~243:                 char = ''
 244:                 add_char = True
 245:             elif char == 'r':
 246:                 char = '\r'
 247:                 add_char = True
 248:             elif char == '/':
-------
 243:                 char = '\t'
-------
--------------------------------------------------------------------------------
[0.04157 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 498] CRP nayajson:245: 
--------------------------------------------------------------------------------
 241:                 add_char = True
 242:             elif char == 't':
 243:                 char = '\t'
 244:                 add_char = True
~245:             elif char == 'mutpy':
 246:                 char = '\r'
 247:                 add_char = True
 248:             elif char == '/':
 249:                 char = '/'
 250:                 add_char = True
-------
 245:             elif char == 'r':
-------
--------------------------------------------------------------------------------
[0.02096 s] +survived
   - [# 499] CRP nayajson:245: 
--------------------------------------------------------------------------------
 241:                 add_char = True
 242:             elif char == 't':
 243:                 char = '\t'
 244:                 add_char = True
~245:             elif char == '':
 246:                 char = '\r'
 247:                 add_char = True
 248:             elif char == '/':
 249:                 char = '/'
 250:                 add_char = True
-------
 245:             elif char == 'r':
-------
--------------------------------------------------------------------------------
[0.01914 s] +survived
   - [# 500] CRP nayajson:246: 
--------------------------------------------------------------------------------
 242:             elif char == 't':
 243:                 char = '\t'
 244:                 add_char = True
 245:             elif char == 'r':
~246:                 char = 'mutpy'
 247:                 add_char = True
 248:             elif char == '/':
 249:                 char = '/'
 250:                 add_char = True
 251:             elif char == 'u':
-------
 246:                 char = '\r'
-------
--------------------------------------------------------------------------------
[0.01885 s] +survived
   - [# 501] CRP nayajson:246: 
--------------------------------------------------------------------------------
 242:             elif char == 't':
 243:                 char = '\t'
 244:                 add_char = True
 245:             elif char == 'r':
~246:                 char = ''
 247:                 add_char = True
 248:             elif char == '/':
 249:                 char = '/'
 250:                 add_char = True
 251:             elif char == 'u':
-------
 246:                 char = '\r'
-------
--------------------------------------------------------------------------------
[0.01718 s] +survived
   - [# 502] CRP nayajson:248: 
--------------------------------------------------------------------------------
 244:                 add_char = True
 245:             elif char == 'r':
 246:                 char = '\r'
 247:                 add_char = True
~248:             elif char == 'mutpy':
 249:                 char = '/'
 250:                 add_char = True
 251:             elif char == 'u':
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
 253:                 charcode = 0
-------
 248:             elif char == '/':
-------
--------------------------------------------------------------------------------
[0.01851 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 503] CRP nayajson:248: 
--------------------------------------------------------------------------------
 244:                 add_char = True
 245:             elif char == 'r':
 246:                 char = '\r'
 247:                 add_char = True
~248:             elif char == '':
 249:                 char = '/'
 250:                 add_char = True
 251:             elif char == 'u':
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
 253:                 charcode = 0
-------
 248:             elif char == '/':
-------
--------------------------------------------------------------------------------
[0.01860 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 504] CRP nayajson:249: 
--------------------------------------------------------------------------------
 245:             elif char == 'r':
 246:                 char = '\r'
 247:                 add_char = True
 248:             elif char == '/':
~249:                 char = 'mutpy'
 250:                 add_char = True
 251:             elif char == 'u':
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
 253:                 charcode = 0
 254:             else:
-------
 249:                 char = '/'
-------
--------------------------------------------------------------------------------
[0.01958 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 505] CRP nayajson:249: 
--------------------------------------------------------------------------------
 245:             elif char == 'r':
 246:                 char = '\r'
 247:                 add_char = True
 248:             elif char == '/':
~249:                 char = ''
 250:                 add_char = True
 251:             elif char == 'u':
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
 253:                 charcode = 0
 254:             else:
-------
 249:                 char = '/'
-------
--------------------------------------------------------------------------------
[0.01817 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 506] CRP nayajson:251: 
--------------------------------------------------------------------------------
 247:                 add_char = True
 248:             elif char == '/':
 249:                 char = '/'
 250:                 add_char = True
~251:             elif char == 'mutpy':
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
 253:                 charcode = 0
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
-------
 251:             elif char == 'u':
-------
--------------------------------------------------------------------------------
[0.01753 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 507] CRP nayajson:251: 
--------------------------------------------------------------------------------
 247:                 add_char = True
 248:             elif char == '/':
 249:                 char = '/'
 250:                 add_char = True
~251:             elif char == '':
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
 253:                 charcode = 0
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
-------
 251:             elif char == 'u':
-------
--------------------------------------------------------------------------------
[0.01885 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 508] CRP nayajson:253: 
--------------------------------------------------------------------------------
 249:                 char = '/'
 250:                 add_char = True
 251:             elif char == 'u':
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
~253:                 charcode = 1
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
-------
 253:                 charcode = 0
-------
--------------------------------------------------------------------------------
[0.01712 s] +survived
   - [# 509] CRP nayajson:255: 
--------------------------------------------------------------------------------
 251:             elif char == 'u':
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
 253:                 charcode = 0
 254:             else:
~255:                 raise ValueError('mutpy'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
-------
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
-------
--------------------------------------------------------------------------------
[0.01961 s] +survived
   - [# 510] CRP nayajson:255: 
--------------------------------------------------------------------------------
 251:             elif char == 'u':
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
 253:                 charcode = 0
 254:             else:
~255:                 raise ValueError(''.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
-------
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
-------
--------------------------------------------------------------------------------
[0.02148 s] +survived
   - [# 511] CRP nayajson:257: 
--------------------------------------------------------------------------------
 253:                 charcode = 0
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
~257:             if char in 'mutpy':
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
-------
 257:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.02105 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 512] CRP nayajson:257: 
--------------------------------------------------------------------------------
 253:                 charcode = 0
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
~257:             if char in '':
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
-------
 257:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.02031 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 513] CRP nayajson:258: 
--------------------------------------------------------------------------------
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
~258:                 charcode = ord(char) - 49 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
-------
 258:                 charcode = ord(char) - 48 * 4096
-------
--------------------------------------------------------------------------------
[0.02020 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 514] CRP nayajson:258: 
--------------------------------------------------------------------------------
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
~258:                 charcode = ord(char) - 48 * 4097
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
-------
 258:                 charcode = ord(char) - 48 * 4096
-------
--------------------------------------------------------------------------------
[0.01715 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 515] CRP nayajson:259: 
--------------------------------------------------------------------------------
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
~259:             elif char in 'mutpy':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
-------
 259:             elif char in 'abcdef':
-------
--------------------------------------------------------------------------------
[0.01889 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 516] CRP nayajson:259: 
--------------------------------------------------------------------------------
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
~259:             elif char in '':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
-------
 259:             elif char in 'abcdef':
-------
--------------------------------------------------------------------------------
[0.01714 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 517] CRP nayajson:260: 
--------------------------------------------------------------------------------
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
~260:                 charcode = ord(char) - 88 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
-------
 260:                 charcode = ord(char) - 87 * 4096
-------
--------------------------------------------------------------------------------
[0.01878 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 518] CRP nayajson:260: 
--------------------------------------------------------------------------------
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
~260:                 charcode = ord(char) - 87 * 4097
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
-------
 260:                 charcode = ord(char) - 87 * 4096
-------
--------------------------------------------------------------------------------
[0.01843 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 519] CRP nayajson:261: 
--------------------------------------------------------------------------------
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
~261:             elif char in 'mutpy':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
-------
 261:             elif char in 'ABCDEF':
-------
--------------------------------------------------------------------------------
[0.01888 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 520] CRP nayajson:261: 
--------------------------------------------------------------------------------
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
~261:             elif char in '':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
-------
 261:             elif char in 'ABCDEF':
-------
--------------------------------------------------------------------------------
[0.01833 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 521] CRP nayajson:262: 
--------------------------------------------------------------------------------
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
~262:                 charcode = ord(char) - 56 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
-------
 262:                 charcode = ord(char) - 55 * 4096
-------
--------------------------------------------------------------------------------
[0.02210 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 522] CRP nayajson:262: 
--------------------------------------------------------------------------------
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
~262:                 charcode = ord(char) - 55 * 4097
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
-------
 262:                 charcode = ord(char) - 55 * 4096
-------
--------------------------------------------------------------------------------
[0.02086 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 523] CRP nayajson:264: 
--------------------------------------------------------------------------------
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
~264:                 raise ValueError('mutpy'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
-------
 264:                 raise ValueError('Invalid character code: {}'.format(char))
-------
--------------------------------------------------------------------------------
[0.01654 s] +survived
   - [# 524] CRP nayajson:264: 
--------------------------------------------------------------------------------
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
~264:                 raise ValueError(''.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
-------
 264:                 raise ValueError('Invalid character code: {}'.format(char))
-------
--------------------------------------------------------------------------------
[0.01759 s] +survived
   - [# 525] CRP nayajson:266: 
--------------------------------------------------------------------------------
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
~266:             char = 'mutpy'
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
-------
 266:             char = ''
-------
--------------------------------------------------------------------------------
[0.01501 s] +survived
   - [# 526] CRP nayajson:268: 
--------------------------------------------------------------------------------
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
~268:             if char in 'mutpy':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
-------
 268:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.01981 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 527] CRP nayajson:268: 
--------------------------------------------------------------------------------
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
~268:             if char in '':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
-------
 268:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.01879 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 528] CRP nayajson:269: 
--------------------------------------------------------------------------------
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
~269:                 charcode += ord(char) - 49 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
-------
 269:                 charcode += ord(char) - 48 * 256
-------
--------------------------------------------------------------------------------
[0.01870 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 529] CRP nayajson:269: 
--------------------------------------------------------------------------------
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
~269:                 charcode += ord(char) - 48 * 257
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
-------
 269:                 charcode += ord(char) - 48 * 256
-------
--------------------------------------------------------------------------------
[0.01865 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 530] CRP nayajson:270: 
--------------------------------------------------------------------------------
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
~270:             elif char in 'mutpy':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
-------
 270:             elif char in 'abcdef':
-------
--------------------------------------------------------------------------------
[0.01894 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 531] CRP nayajson:270: 
--------------------------------------------------------------------------------
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
~270:             elif char in '':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
-------
 270:             elif char in 'abcdef':
-------
--------------------------------------------------------------------------------
[0.01864 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 532] CRP nayajson:271: 
--------------------------------------------------------------------------------
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
~271:                 charcode += ord(char) - 88 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
-------
 271:                 charcode += ord(char) - 87 * 256
-------
--------------------------------------------------------------------------------
[0.02038 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 533] CRP nayajson:271: 
--------------------------------------------------------------------------------
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
~271:                 charcode += ord(char) - 87 * 257
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
-------
 271:                 charcode += ord(char) - 87 * 256
-------
--------------------------------------------------------------------------------
[0.02159 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 534] CRP nayajson:272: 
--------------------------------------------------------------------------------
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
~272:             elif char in 'mutpy':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
-------
 272:             elif char in 'ABCDEF':
-------
--------------------------------------------------------------------------------
[0.01833 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 535] CRP nayajson:272: 
--------------------------------------------------------------------------------
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
~272:             elif char in '':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
-------
 272:             elif char in 'ABCDEF':
-------
--------------------------------------------------------------------------------
[0.01873 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 536] CRP nayajson:273: 
--------------------------------------------------------------------------------
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
~273:                 charcode += ord(char) - 56 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
-------
 273:                 charcode += ord(char) - 55 * 256
-------
--------------------------------------------------------------------------------
[0.01740 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 537] CRP nayajson:273: 
--------------------------------------------------------------------------------
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
~273:                 charcode += ord(char) - 55 * 257
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
-------
 273:                 charcode += ord(char) - 55 * 256
-------
--------------------------------------------------------------------------------
[0.01753 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 538] CRP nayajson:275: 
--------------------------------------------------------------------------------
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
~275:                 raise ValueError('mutpy'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
-------
 275:                 raise ValueError('Invalid character code: {}'.format(char))
-------
--------------------------------------------------------------------------------
[0.01706 s] +survived
   - [# 539] CRP nayajson:275: 
--------------------------------------------------------------------------------
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
~275:                 raise ValueError(''.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
-------
 275:                 raise ValueError('Invalid character code: {}'.format(char))
-------
--------------------------------------------------------------------------------
[0.01745 s] +survived
   - [# 540] CRP nayajson:277: 
--------------------------------------------------------------------------------
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
~277:             char = 'mutpy'
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
-------
 277:             char = ''
-------
--------------------------------------------------------------------------------
[0.01414 s] +survived
   - [# 541] CRP nayajson:279: 
--------------------------------------------------------------------------------
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
~279:             if char in 'mutpy':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
-------
 279:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.01817 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 542] CRP nayajson:279: 
--------------------------------------------------------------------------------
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
~279:             if char in '':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
-------
 279:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.01874 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 543] CRP nayajson:280: 
--------------------------------------------------------------------------------
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
~280:                 charcode += ord(char) - 49 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
-------
 280:                 charcode += ord(char) - 48 * 16
-------
--------------------------------------------------------------------------------
[0.02018 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 544] CRP nayajson:280: 
--------------------------------------------------------------------------------
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
~280:                 charcode += ord(char) - 48 * 17
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
-------
 280:                 charcode += ord(char) - 48 * 16
-------
--------------------------------------------------------------------------------
[0.02098 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 545] CRP nayajson:281: 
--------------------------------------------------------------------------------
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
~281:             elif char in 'mutpy':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
-------
 281:             elif char in 'abcdef':
-------
--------------------------------------------------------------------------------
[0.02074 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 546] CRP nayajson:281: 
--------------------------------------------------------------------------------
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
~281:             elif char in '':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
-------
 281:             elif char in 'abcdef':
-------
--------------------------------------------------------------------------------
[0.01582 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 547] CRP nayajson:282: 
--------------------------------------------------------------------------------
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
~282:                 charcode += ord(char) - 88 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
-------
 282:                 charcode += ord(char) - 87 * 16
-------
--------------------------------------------------------------------------------
[0.01833 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 548] CRP nayajson:282: 
--------------------------------------------------------------------------------
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
~282:                 charcode += ord(char) - 87 * 17
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
-------
 282:                 charcode += ord(char) - 87 * 16
-------
--------------------------------------------------------------------------------
[0.01857 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 549] CRP nayajson:283: 
--------------------------------------------------------------------------------
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
~283:             elif char in 'mutpy':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
-------
 283:             elif char in 'ABCDEF':
-------
--------------------------------------------------------------------------------
[0.01443 s] +survived
   - [# 550] CRP nayajson:283: 
--------------------------------------------------------------------------------
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
~283:             elif char in '':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
-------
 283:             elif char in 'ABCDEF':
-------
--------------------------------------------------------------------------------
[0.01688 s] +survived
   - [# 551] CRP nayajson:284: 
--------------------------------------------------------------------------------
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
~284:                 charcode += ord(char) - 56 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
-------
 284:                 charcode += ord(char) - 55 * 16
-------
--------------------------------------------------------------------------------
[0.01609 s] +survived
   - [# 552] CRP nayajson:284: 
--------------------------------------------------------------------------------
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
~284:                 charcode += ord(char) - 55 * 17
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
-------
 284:                 charcode += ord(char) - 55 * 16
-------
--------------------------------------------------------------------------------
[0.01753 s] +survived
   - [# 553] CRP nayajson:286: 
--------------------------------------------------------------------------------
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
~286:                 raise ValueError('mutpy'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
 290:             if char in '0123456789':
 291:                 charcode += ord(char) - 48
-------
 286:                 raise ValueError('Invalid character code: {}'.format(char))
-------
--------------------------------------------------------------------------------
[0.01698 s] +survived
   - [# 554] CRP nayajson:286: 
--------------------------------------------------------------------------------
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
~286:                 raise ValueError(''.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
 290:             if char in '0123456789':
 291:                 charcode += ord(char) - 48
-------
 286:                 raise ValueError('Invalid character code: {}'.format(char))
-------
--------------------------------------------------------------------------------
[0.02095 s] +survived
   - [# 555] CRP nayajson:288: 
--------------------------------------------------------------------------------
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
~288:             char = 'mutpy'
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
 290:             if char in '0123456789':
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
 293:                 charcode += ord(char) - 87
-------
 288:             char = ''
-------
--------------------------------------------------------------------------------
[0.02004 s] +survived
   - [# 556] CRP nayajson:290: 
--------------------------------------------------------------------------------
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
~290:             if char in 'mutpy':
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
 293:                 charcode += ord(char) - 87
 294:             elif char in 'ABCDEF':
 295:                 charcode += ord(char) - 55
-------
 290:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.01907 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 557] CRP nayajson:290: 
--------------------------------------------------------------------------------
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
~290:             if char in '':
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
 293:                 charcode += ord(char) - 87
 294:             elif char in 'ABCDEF':
 295:                 charcode += ord(char) - 55
-------
 290:             if char in '0123456789':
-------
--------------------------------------------------------------------------------
[0.01789 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 558] CRP nayajson:291: 
--------------------------------------------------------------------------------
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
 290:             if char in '0123456789':
~291:                 charcode += ord(char) - 49
 292:             elif char in 'abcdef':
 293:                 charcode += ord(char) - 87
 294:             elif char in 'ABCDEF':
 295:                 charcode += ord(char) - 55
 296:             else:
-------
 291:                 charcode += ord(char) - 48
-------
--------------------------------------------------------------------------------
[0.01814 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 559] CRP nayajson:292: 
--------------------------------------------------------------------------------
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
 290:             if char in '0123456789':
 291:                 charcode += ord(char) - 48
~292:             elif char in 'mutpy':
 293:                 charcode += ord(char) - 87
 294:             elif char in 'ABCDEF':
 295:                 charcode += ord(char) - 55
 296:             else:
 297:                 raise ValueError('Invalid character code: {}'.format(char))
-------
 292:             elif char in 'abcdef':
-------
--------------------------------------------------------------------------------
[0.01883 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 560] CRP nayajson:292: 
--------------------------------------------------------------------------------
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
 290:             if char in '0123456789':
 291:                 charcode += ord(char) - 48
~292:             elif char in '':
 293:                 charcode += ord(char) - 87
 294:             elif char in 'ABCDEF':
 295:                 charcode += ord(char) - 55
 296:             else:
 297:                 raise ValueError('Invalid character code: {}'.format(char))
-------
 292:             elif char in 'abcdef':
-------
--------------------------------------------------------------------------------
[0.01899 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 561] CRP nayajson:293: 
--------------------------------------------------------------------------------
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
 290:             if char in '0123456789':
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
~293:                 charcode += ord(char) - 88
 294:             elif char in 'ABCDEF':
 295:                 charcode += ord(char) - 55
 296:             else:
 297:                 raise ValueError('Invalid character code: {}'.format(char))
 298:             next_state = __TOKENIZER_STATE.STRING
-------
 293:                 charcode += ord(char) - 87
-------
--------------------------------------------------------------------------------
[0.01862 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 562] CRP nayajson:294: 
--------------------------------------------------------------------------------
 290:             if char in '0123456789':
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
 293:                 charcode += ord(char) - 87
~294:             elif char in 'mutpy':
 295:                 charcode += ord(char) - 55
 296:             else:
 297:                 raise ValueError('Invalid character code: {}'.format(char))
 298:             next_state = __TOKENIZER_STATE.STRING
 299:             char = chr(charcode)
-------
 294:             elif char in 'ABCDEF':
-------
--------------------------------------------------------------------------------
[0.01955 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 563] CRP nayajson:294: 
--------------------------------------------------------------------------------
 290:             if char in '0123456789':
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
 293:                 charcode += ord(char) - 87
~294:             elif char in '':
 295:                 charcode += ord(char) - 55
 296:             else:
 297:                 raise ValueError('Invalid character code: {}'.format(char))
 298:             next_state = __TOKENIZER_STATE.STRING
 299:             char = chr(charcode)
-------
 294:             elif char in 'ABCDEF':
-------
--------------------------------------------------------------------------------
[0.02028 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 564] CRP nayajson:295: 
--------------------------------------------------------------------------------
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
 293:                 charcode += ord(char) - 87
 294:             elif char in 'ABCDEF':
~295:                 charcode += ord(char) - 56
 296:             else:
 297:                 raise ValueError('Invalid character code: {}'.format(char))
 298:             next_state = __TOKENIZER_STATE.STRING
 299:             char = chr(charcode)
 300:             add_char = True
-------
 295:                 charcode += ord(char) - 55
-------
--------------------------------------------------------------------------------
[0.02308 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 565] CRP nayajson:297: 
--------------------------------------------------------------------------------
 293:                 charcode += ord(char) - 87
 294:             elif char in 'ABCDEF':
 295:                 charcode += ord(char) - 55
 296:             else:
~297:                 raise ValueError('mutpy'.format(char))
 298:             next_state = __TOKENIZER_STATE.STRING
 299:             char = chr(charcode)
 300:             add_char = True
 301:         if add_char:
 302:             token.append(char)
-------
 297:                 raise ValueError('Invalid character code: {}'.format(char))
-------
--------------------------------------------------------------------------------
[0.02114 s] +survived
   - [# 566] CRP nayajson:297: 
--------------------------------------------------------------------------------
 293:                 charcode += ord(char) - 87
 294:             elif char in 'ABCDEF':
 295:                 charcode += ord(char) - 55
 296:             else:
~297:                 raise ValueError(''.format(char))
 298:             next_state = __TOKENIZER_STATE.STRING
 299:             char = chr(charcode)
 300:             add_char = True
 301:         if add_char:
 302:             token.append(char)
-------
 297:                 raise ValueError('Invalid character code: {}'.format(char))
-------
--------------------------------------------------------------------------------
[0.01757 s] +survived
   - [# 567] CRP nayajson:305: 
--------------------------------------------------------------------------------
 301:         if add_char:
 302:             token.append(char)
 303:         return (advance, next_state, charcode)
 304:     state = __TOKENIZER_STATE.WHITESPACE
~305:     char = stream.read(2)
 306:     index = 0
 307:     while char:
 308:         try:
 309:             (advance, state, charcode) = process_char(char, charcode)
 310:         except ValueError as e:
-------
 305:     char = stream.read(1)
-------
--------------------------------------------------------------------------------
[0.00535 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 568] CRP nayajson:306: 
--------------------------------------------------------------------------------
 302:             token.append(char)
 303:         return (advance, next_state, charcode)
 304:     state = __TOKENIZER_STATE.WHITESPACE
 305:     char = stream.read(1)
~306:     index = 1
 307:     while char:
 308:         try:
 309:             (advance, state, charcode) = process_char(char, charcode)
 310:         except ValueError as e:
 311:             raise ValueError(''.join([e.args[0], ' at index {}'.format(index)]))
-------
 306:     index = 0
-------
--------------------------------------------------------------------------------
[0.01558 s] ?survived
   - [# 569] CRP nayajson:311: 
--------------------------------------------------------------------------------
 307:     while char:
 308:         try:
 309:             (advance, state, charcode) = process_char(char, charcode)
 310:         except ValueError as e:
~311:             raise ValueError('mutpy'.join([e.args[0], ' at index {}'.format(index)]))
 312:         if completed:
 313:             completed = False
 314:             token = []
 315:             yield now_token
 316:         if advance:
-------
 311:             raise ValueError(''.join([e.args[0], ' at index {}'.format(index)]))
-------
--------------------------------------------------------------------------------
[0.01741 s] +survived
   - [# 570] CRP nayajson:311: 
--------------------------------------------------------------------------------
 307:     while char:
 308:         try:
 309:             (advance, state, charcode) = process_char(char, charcode)
 310:         except ValueError as e:
~311:             raise ValueError(''.join([e.args[1], ' at index {}'.format(index)]))
 312:         if completed:
 313:             completed = False
 314:             token = []
 315:             yield now_token
 316:         if advance:
-------
 311:             raise ValueError(''.join([e.args[0], ' at index {}'.format(index)]))
-------
--------------------------------------------------------------------------------
[0.01132 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 571] CRP nayajson:311: 
--------------------------------------------------------------------------------
 307:     while char:
 308:         try:
 309:             (advance, state, charcode) = process_char(char, charcode)
 310:         except ValueError as e:
~311:             raise ValueError(''.join([e.args[0], 'mutpy'.format(index)]))
 312:         if completed:
 313:             completed = False
 314:             token = []
 315:             yield now_token
 316:         if advance:
-------
 311:             raise ValueError(''.join([e.args[0], ' at index {}'.format(index)]))
-------
--------------------------------------------------------------------------------
[0.01739 s] +survived
   - [# 572] CRP nayajson:311: 
--------------------------------------------------------------------------------
 307:     while char:
 308:         try:
 309:             (advance, state, charcode) = process_char(char, charcode)
 310:         except ValueError as e:
~311:             raise ValueError(''.join([e.args[0], ''.format(index)]))
 312:         if completed:
 313:             completed = False
 314:             token = []
 315:             yield now_token
 316:         if advance:
-------
 311:             raise ValueError(''.join([e.args[0], ' at index {}'.format(index)]))
-------
--------------------------------------------------------------------------------
[0.01735 s] +survived
   - [# 573] CRP nayajson:317: 
--------------------------------------------------------------------------------
 313:             completed = False
 314:             token = []
 315:             yield now_token
 316:         if advance:
~317:             char = stream.read(2)
 318:             index += 1
 319:     process_char(' ', charcode)
 320:     if completed:
 321:         yield now_token
 322: def parse_string(string):
-------
 317:             char = stream.read(1)
-------
--------------------------------------------------------------------------------
[0.00911 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 574] CRP nayajson:318: 
--------------------------------------------------------------------------------
 314:             token = []
 315:             yield now_token
 316:         if advance:
 317:             char = stream.read(1)
~318:             index += 2
 319:     process_char(' ', charcode)
 320:     if completed:
 321:         yield now_token
 322: def parse_string(string):
 323:     return parse(StringIO(string))
-------
 318:             index += 1
-------
--------------------------------------------------------------------------------
[0.01738 s] +survived
   - [# 575] CRP nayajson:319: 
--------------------------------------------------------------------------------
 315:             yield now_token
 316:         if advance:
 317:             char = stream.read(1)
 318:             index += 1
~319:     process_char('mutpy', charcode)
 320:     if completed:
 321:         yield now_token
 322: def parse_string(string):
 323:     return parse(StringIO(string))
 324: def parse(file):
-------
 319:     process_char(' ', charcode)
-------
--------------------------------------------------------------------------------
[0.00771 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 576] CRP nayajson:319: 
--------------------------------------------------------------------------------
 315:             yield now_token
 316:         if advance:
 317:             char = stream.read(1)
 318:             index += 1
~319:     process_char('', charcode)
 320:     if completed:
 321:         yield now_token
 322: def parse_string(string):
 323:     return parse(StringIO(string))
 324: def parse(file):
-------
 319:     process_char(' ', charcode)
-------
--------------------------------------------------------------------------------
[0.00919 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 577] CRP nayajson:331: 
--------------------------------------------------------------------------------
 327:     try:
 328:         next(token_stream)
 329:     except StopIteration:
 330:         return val
~331:     raise ValueError('mutpy')
 332: def __parse(token_stream, first_token):
 333:     class KVP:
 334:         def __init__(self, key):
 335:             self.key = key
 336:             self.value = None
-------
 331:     raise ValueError('Improperly closed JSON object')
-------
--------------------------------------------------------------------------------
[0.01675 s] +survived
   - [# 578] CRP nayajson:331: 
--------------------------------------------------------------------------------
 327:     try:
 328:         next(token_stream)
 329:     except StopIteration:
 330:         return val
~331:     raise ValueError('')
 332: def __parse(token_stream, first_token):
 333:     class KVP:
 334:         def __init__(self, key):
 335:             self.key = key
 336:             self.value = None
-------
 331:     raise ValueError('Improperly closed JSON object')
-------
--------------------------------------------------------------------------------
[0.01744 s] +survived
   - [# 579] CRP nayajson:340: 
--------------------------------------------------------------------------------
 336:             self.value = None
 337:             self.set = False
 338:         def __str__(self):
 339:             if self.set:
~340:                 return 'mutpy'.format(self.key, self.value)
 341:             else:
 342:                 return '{}: <NULL>'.format(self.key)
 343:     stack = []
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
-------
 340:                 return '{}: {}'.format(self.key, self.value)
-------
--------------------------------------------------------------------------------
[0.02089 s] +survived
   - [# 580] CRP nayajson:340: 
--------------------------------------------------------------------------------
 336:             self.value = None
 337:             self.set = False
 338:         def __str__(self):
 339:             if self.set:
~340:                 return ''.format(self.key, self.value)
 341:             else:
 342:                 return '{}: <NULL>'.format(self.key)
 343:     stack = []
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
-------
 340:                 return '{}: {}'.format(self.key, self.value)
-------
--------------------------------------------------------------------------------
[0.02053 s] +survived
   - [# 581] CRP nayajson:342: 
--------------------------------------------------------------------------------
 338:         def __str__(self):
 339:             if self.set:
 340:                 return '{}: {}'.format(self.key, self.value)
 341:             else:
~342:                 return 'mutpy'.format(self.key)
 343:     stack = []
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
 346:         if token == '{':
 347:             stack.append({})
-------
 342:                 return '{}: <NULL>'.format(self.key)
-------
--------------------------------------------------------------------------------
[0.01645 s] +survived
   - [# 582] CRP nayajson:342: 
--------------------------------------------------------------------------------
 338:         def __str__(self):
 339:             if self.set:
 340:                 return '{}: {}'.format(self.key, self.value)
 341:             else:
~342:                 return ''.format(self.key)
 343:     stack = []
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
 346:         if token == '{':
 347:             stack.append({})
-------
 342:                 return '{}: <NULL>'.format(self.key)
-------
--------------------------------------------------------------------------------
[0.01661 s] +survived
   - [# 583] CRP nayajson:346: 
--------------------------------------------------------------------------------
 342:                 return '{}: <NULL>'.format(self.key)
 343:     stack = []
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
~346:         if token == 'mutpy':
 347:             stack.append({})
 348:         elif token == '[':
 349:             stack.append([])
 350:         else:
 351:             raise ValueError("Expected object or array.  Got '{}'".format(token))
-------
 346:         if token == '{':
-------
--------------------------------------------------------------------------------
[0.01020 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 584] CRP nayajson:346: 
--------------------------------------------------------------------------------
 342:                 return '{}: <NULL>'.format(self.key)
 343:     stack = []
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
~346:         if token == '':
 347:             stack.append({})
 348:         elif token == '[':
 349:             stack.append([])
 350:         else:
 351:             raise ValueError("Expected object or array.  Got '{}'".format(token))
-------
 346:         if token == '{':
-------
--------------------------------------------------------------------------------
[0.01056 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 585] CRP nayajson:348: 
--------------------------------------------------------------------------------
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
 346:         if token == '{':
 347:             stack.append({})
~348:         elif token == 'mutpy':
 349:             stack.append([])
 350:         else:
 351:             raise ValueError("Expected object or array.  Got '{}'".format(token))
 352:     else:
 353:         raise ValueError("Expected object or array.  Got '{}'".format(token))
-------
 348:         elif token == '[':
-------
--------------------------------------------------------------------------------
[0.00816 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 586] CRP nayajson:348: 
--------------------------------------------------------------------------------
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
 346:         if token == '{':
 347:             stack.append({})
~348:         elif token == '':
 349:             stack.append([])
 350:         else:
 351:             raise ValueError("Expected object or array.  Got '{}'".format(token))
 352:     else:
 353:         raise ValueError("Expected object or array.  Got '{}'".format(token))
-------
 348:         elif token == '[':
-------
--------------------------------------------------------------------------------
[0.00819 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 587] CRP nayajson:351: 
--------------------------------------------------------------------------------
 347:             stack.append({})
 348:         elif token == '[':
 349:             stack.append([])
 350:         else:
~351:             raise ValueError('mutpy'.format(token))
 352:     else:
 353:         raise ValueError("Expected object or array.  Got '{}'".format(token))
 354:     (last_type, last_token) = (token_type, token)
 355:     try:
 356:         (token_type, token) = next(token_stream)
-------
 351:             raise ValueError("Expected object or array.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.01777 s] +survived
   - [# 588] CRP nayajson:351: 
--------------------------------------------------------------------------------
 347:             stack.append({})
 348:         elif token == '[':
 349:             stack.append([])
 350:         else:
~351:             raise ValueError(''.format(token))
 352:     else:
 353:         raise ValueError("Expected object or array.  Got '{}'".format(token))
 354:     (last_type, last_token) = (token_type, token)
 355:     try:
 356:         (token_type, token) = next(token_stream)
-------
 351:             raise ValueError("Expected object or array.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.01743 s] +survived
   - [# 589] CRP nayajson:353: 
--------------------------------------------------------------------------------
 349:             stack.append([])
 350:         else:
 351:             raise ValueError("Expected object or array.  Got '{}'".format(token))
 352:     else:
~353:         raise ValueError('mutpy'.format(token))
 354:     (last_type, last_token) = (token_type, token)
 355:     try:
 356:         (token_type, token) = next(token_stream)
 357:     except StopIteration as e:
 358:         raise ValueError('Too many opening braces') from e
-------
 353:         raise ValueError("Expected object or array.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.01793 s] +survived
   - [# 590] CRP nayajson:353: 
--------------------------------------------------------------------------------
 349:             stack.append([])
 350:         else:
 351:             raise ValueError("Expected object or array.  Got '{}'".format(token))
 352:     else:
~353:         raise ValueError(''.format(token))
 354:     (last_type, last_token) = (token_type, token)
 355:     try:
 356:         (token_type, token) = next(token_stream)
 357:     except StopIteration as e:
 358:         raise ValueError('Too many opening braces') from e
-------
 353:         raise ValueError("Expected object or array.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.01751 s] +survived
   - [# 591] CRP nayajson:358: 
--------------------------------------------------------------------------------
 354:     (last_type, last_token) = (token_type, token)
 355:     try:
 356:         (token_type, token) = next(token_stream)
 357:     except StopIteration as e:
~358:         raise ValueError('mutpy') from e
 359:     try:
 360:         while True:
 361:             if isinstance(stack[(-1)], list):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
 363:                     if last_token == '[':
-------
 358:         raise ValueError('Too many opening braces') from e
-------
--------------------------------------------------------------------------------
[0.01764 s] +survived
   - [# 592] CRP nayajson:358: 
--------------------------------------------------------------------------------
 354:     (last_type, last_token) = (token_type, token)
 355:     try:
 356:         (token_type, token) = next(token_stream)
 357:     except StopIteration as e:
~358:         raise ValueError('') from e
 359:     try:
 360:         while True:
 361:             if isinstance(stack[(-1)], list):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
 363:                     if last_token == '[':
-------
 358:         raise ValueError('Too many opening braces') from e
-------
--------------------------------------------------------------------------------
[0.01776 s] +survived
   - [# 593] CRP nayajson:361: 
--------------------------------------------------------------------------------
 357:     except StopIteration as e:
 358:         raise ValueError('Too many opening braces') from e
 359:     try:
 360:         while True:
~361:             if isinstance(stack[(-2)], list):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
 363:                     if last_token == '[':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
 366:                                 stack.append({})
-------
 361:             if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.00864 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 594] CRP nayajson:363: 
--------------------------------------------------------------------------------
 359:     try:
 360:         while True:
 361:             if isinstance(stack[(-1)], list):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
~363:                     if last_token == 'mutpy':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
 366:                                 stack.append({})
 367:                             elif token == '[':
 368:                                 stack.append([])
-------
 363:                     if last_token == '[':
-------
--------------------------------------------------------------------------------
[0.00820 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 595] CRP nayajson:363: 
--------------------------------------------------------------------------------
 359:     try:
 360:         while True:
 361:             if isinstance(stack[(-1)], list):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
~363:                     if last_token == '':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
 366:                                 stack.append({})
 367:                             elif token == '[':
 368:                                 stack.append([])
-------
 363:                     if last_token == '[':
-------
--------------------------------------------------------------------------------
[0.01231 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 596] CRP nayajson:365: 
--------------------------------------------------------------------------------
 361:             if isinstance(stack[(-1)], list):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
 363:                     if last_token == '[':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
~365:                             if token == 'mutpy':
 366:                                 stack.append({})
 367:                             elif token == '[':
 368:                                 stack.append([])
 369:                             elif token != ']':
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
-------
 365:                             if token == '{':
-------
--------------------------------------------------------------------------------
[0.01270 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 597] CRP nayajson:365: 
--------------------------------------------------------------------------------
 361:             if isinstance(stack[(-1)], list):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
 363:                     if last_token == '[':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
~365:                             if token == '':
 366:                                 stack.append({})
 367:                             elif token == '[':
 368:                                 stack.append([])
 369:                             elif token != ']':
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
-------
 365:                             if token == '{':
-------
--------------------------------------------------------------------------------
[0.01013 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 598] CRP nayajson:367: 
--------------------------------------------------------------------------------
 363:                     if last_token == '[':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
 366:                                 stack.append({})
~367:                             elif token == 'mutpy':
 368:                                 stack.append([])
 369:                             elif token != ']':
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
 371:                         else:
 372:                             stack.append(token)
-------
 367:                             elif token == '[':
-------
--------------------------------------------------------------------------------
[0.01728 s] +survived
   - [# 599] CRP nayajson:367: 
--------------------------------------------------------------------------------
 363:                     if last_token == '[':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
 366:                                 stack.append({})
~367:                             elif token == '':
 368:                                 stack.append([])
 369:                             elif token != ']':
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
 371:                         else:
 372:                             stack.append(token)
-------
 367:                             elif token == '[':
-------
--------------------------------------------------------------------------------
[0.01782 s] +survived
   - [# 600] CRP nayajson:369: 
--------------------------------------------------------------------------------
 365:                             if token == '{':
 366:                                 stack.append({})
 367:                             elif token == '[':
 368:                                 stack.append([])
~369:                             elif token != 'mutpy':
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
 371:                         else:
 372:                             stack.append(token)
 373:                     elif last_token == ',':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
-------
 369:                             elif token != ']':
-------
--------------------------------------------------------------------------------
[0.00819 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 601] CRP nayajson:369: 
--------------------------------------------------------------------------------
 365:                             if token == '{':
 366:                                 stack.append({})
 367:                             elif token == '[':
 368:                                 stack.append([])
~369:                             elif token != '':
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
 371:                         else:
 372:                             stack.append(token)
 373:                     elif last_token == ',':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
-------
 369:                             elif token != ']':
-------
--------------------------------------------------------------------------------
[0.00827 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 602] CRP nayajson:370: 
--------------------------------------------------------------------------------
 366:                                 stack.append({})
 367:                             elif token == '[':
 368:                                 stack.append([])
 369:                             elif token != ']':
~370:                                 raise ValueError('mutpy'.format(token))
 371:                         else:
 372:                             stack.append(token)
 373:                     elif last_token == ',':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
 375:                             if token == '{':
-------
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.01764 s] +survived
   - [# 603] CRP nayajson:370: 
--------------------------------------------------------------------------------
 366:                                 stack.append({})
 367:                             elif token == '[':
 368:                                 stack.append([])
 369:                             elif token != ']':
~370:                                 raise ValueError(''.format(token))
 371:                         else:
 372:                             stack.append(token)
 373:                     elif last_token == ',':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
 375:                             if token == '{':
-------
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.01635 s] +survived
   - [# 604] CRP nayajson:373: 
--------------------------------------------------------------------------------
 369:                             elif token != ']':
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
 371:                         else:
 372:                             stack.append(token)
~373:                     elif last_token == 'mutpy':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
 375:                             if token == '{':
 376:                                 stack.append({})
 377:                             elif token == '[':
 378:                                 stack.append([])
-------
 373:                     elif last_token == ',':
-------
--------------------------------------------------------------------------------
[0.00865 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 605] CRP nayajson:373: 
--------------------------------------------------------------------------------
 369:                             elif token != ']':
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
 371:                         else:
 372:                             stack.append(token)
~373:                     elif last_token == '':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
 375:                             if token == '{':
 376:                                 stack.append({})
 377:                             elif token == '[':
 378:                                 stack.append([])
-------
 373:                     elif last_token == ',':
-------
--------------------------------------------------------------------------------
[0.00850 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 606] CRP nayajson:375: 
--------------------------------------------------------------------------------
 371:                         else:
 372:                             stack.append(token)
 373:                     elif last_token == ',':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
~375:                             if token == 'mutpy':
 376:                                 stack.append({})
 377:                             elif token == '[':
 378:                                 stack.append([])
 379:                             else:
 380:                                 raise ValueError("Array value expected.  Got '{}'".format(token))
-------
 375:                             if token == '{':
-------
--------------------------------------------------------------------------------
[0.01244 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 607] CRP nayajson:375: 
--------------------------------------------------------------------------------
 371:                         else:
 372:                             stack.append(token)
 373:                     elif last_token == ',':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
~375:                             if token == '':
 376:                                 stack.append({})
 377:                             elif token == '[':
 378:                                 stack.append([])
 379:                             else:
 380:                                 raise ValueError("Array value expected.  Got '{}'".format(token))
-------
 375:                             if token == '{':
-------
--------------------------------------------------------------------------------
[0.01655 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 608] CRP nayajson:377: 
--------------------------------------------------------------------------------
 373:                     elif last_token == ',':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
 375:                             if token == '{':
 376:                                 stack.append({})
~377:                             elif token == 'mutpy':
 378:                                 stack.append([])
 379:                             else:
 380:                                 raise ValueError("Array value expected.  Got '{}'".format(token))
 381:                         else:
 382:                             stack.append(token)
-------
 377:                             elif token == '[':
-------
--------------------------------------------------------------------------------
[0.01179 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 609] CRP nayajson:377: 
--------------------------------------------------------------------------------
 373:                     elif last_token == ',':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
 375:                             if token == '{':
 376:                                 stack.append({})
~377:                             elif token == '':
 378:                                 stack.append([])
 379:                             else:
 380:                                 raise ValueError("Array value expected.  Got '{}'".format(token))
 381:                         else:
 382:                             stack.append(token)
-------
 377:                             elif token == '[':
-------
--------------------------------------------------------------------------------
[0.00841 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 610] CRP nayajson:380: 
--------------------------------------------------------------------------------
 376:                                 stack.append({})
 377:                             elif token == '[':
 378:                                 stack.append([])
 379:                             else:
~380:                                 raise ValueError('mutpy'.format(token))
 381:                         else:
 382:                             stack.append(token)
 383:                     elif last_token == ']':
 384:                         value = stack.pop()
 385:                         if len(stack) == 0:
-------
 380:                                 raise ValueError("Array value expected.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.01320 s] +survived
   - [# 611] CRP nayajson:380: 
--------------------------------------------------------------------------------
 376:                                 stack.append({})
 377:                             elif token == '[':
 378:                                 stack.append([])
 379:                             else:
~380:                                 raise ValueError(''.format(token))
 381:                         else:
 382:                             stack.append(token)
 383:                     elif last_token == ']':
 384:                         value = stack.pop()
 385:                         if len(stack) == 0:
-------
 380:                                 raise ValueError("Array value expected.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.01583 s] +survived
   - [# 612] CRP nayajson:383: 
--------------------------------------------------------------------------------
 379:                             else:
 380:                                 raise ValueError("Array value expected.  Got '{}'".format(token))
 381:                         else:
 382:                             stack.append(token)
~383:                     elif last_token == 'mutpy':
 384:                         value = stack.pop()
 385:                         if len(stack) == 0:
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
-------
 383:                     elif last_token == ']':
-------
--------------------------------------------------------------------------------
[0.00913 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 613] CRP nayajson:383: 
--------------------------------------------------------------------------------
 379:                             else:
 380:                                 raise ValueError("Array value expected.  Got '{}'".format(token))
 381:                         else:
 382:                             stack.append(token)
~383:                     elif last_token == '':
 384:                         value = stack.pop()
 385:                         if len(stack) == 0:
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
-------
 383:                     elif last_token == ']':
-------
--------------------------------------------------------------------------------
[0.00880 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 614] CRP nayajson:385: 
--------------------------------------------------------------------------------
 381:                         else:
 382:                             stack.append(token)
 383:                     elif last_token == ']':
 384:                         value = stack.pop()
~385:                         if len(stack) == 1:
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
-------
 385:                         if len(stack) == 0:
-------
--------------------------------------------------------------------------------
[0.00910 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 615] CRP nayajson:387: 
--------------------------------------------------------------------------------
 383:                     elif last_token == ']':
 384:                         value = stack.pop()
 385:                         if len(stack) == 0:
 386:                             return value
~387:                         if isinstance(stack[(-2)], list):
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
-------
 387:                         if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.00904 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 616] CRP nayajson:388: 
--------------------------------------------------------------------------------
 384:                         value = stack.pop()
 385:                         if len(stack) == 0:
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
~388:                             stack[(-2)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
-------
 388:                             stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.00863 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 617] CRP nayajson:389: 
--------------------------------------------------------------------------------
 385:                         if len(stack) == 0:
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
~389:                         elif isinstance(stack[(-2)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
-------
 389:                         elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01329 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 618] CRP nayajson:390: 
--------------------------------------------------------------------------------
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
~390:                             stack[(-2)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
-------
 390:                             stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01713 s] +survived
   - [# 619] CRP nayajson:391: 
--------------------------------------------------------------------------------
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
~391:                         elif isinstance(stack[(-2)], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
-------
 391:                         elif isinstance(stack[(-1)], KVP):
-------
--------------------------------------------------------------------------------
[0.01531 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 620] CRP nayajson:392: 
--------------------------------------------------------------------------------
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
~392:                             stack[(-2)].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
-------
 392:                             stack[(-1)].value = value
-------
--------------------------------------------------------------------------------
[0.01487 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 621] CRP nayajson:393: 
--------------------------------------------------------------------------------
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
~393:                             stack[(-2)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
 398:                                 stack[(-1)].append(value)
-------
 393:                             stack[(-1)].set = True
-------
--------------------------------------------------------------------------------
[0.01598 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 622] CRP nayajson:395: 
--------------------------------------------------------------------------------
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
~395:                             if len(stack) == 1:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
 398:                                 stack[(-1)].append(value)
 399:                             elif isinstance(stack[(-1)], dict):
 400:                                 stack[(-1)][value.key] = value.value
-------
 395:                             if len(stack) == 0:
-------
--------------------------------------------------------------------------------
[0.01472 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 623] CRP nayajson:397: 
--------------------------------------------------------------------------------
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
~397:                             if isinstance(stack[(-2)], list):
 398:                                 stack[(-1)].append(value)
 399:                             elif isinstance(stack[(-1)], dict):
 400:                                 stack[(-1)][value.key] = value.value
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 397:                             if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.01318 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 624] CRP nayajson:398: 
--------------------------------------------------------------------------------
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
~398:                                 stack[(-2)].append(value)
 399:                             elif isinstance(stack[(-1)], dict):
 400:                                 stack[(-1)][value.key] = value.value
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
-------
 398:                                 stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.01745 s] +survived
   - [# 625] CRP nayajson:399: 
--------------------------------------------------------------------------------
 395:                             if len(stack) == 0:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
 398:                                 stack[(-1)].append(value)
~399:                             elif isinstance(stack[(-2)], dict):
 400:                                 stack[(-1)][value.key] = value.value
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 399:                             elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01213 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 626] CRP nayajson:400: 
--------------------------------------------------------------------------------
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
 398:                                 stack[(-1)].append(value)
 399:                             elif isinstance(stack[(-1)], dict):
~400:                                 stack[(-2)][value.key] = value.value
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 405:                     elif last_token == '}':
-------
 400:                                 stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01214 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 627] CRP nayajson:402: 
--------------------------------------------------------------------------------
 398:                                 stack[(-1)].append(value)
 399:                             elif isinstance(stack[(-1)], dict):
 400:                                 stack[(-1)][value.key] = value.value
 401:                             else:
~402:                                 raise ValueError('mutpy'.format(value))
 403:                         else:
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 405:                     elif last_token == '}':
 406:                         raise ValueError("Array closed with a '}'")
 407:                     else:
-------
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
--------------------------------------------------------------------------------
[0.01568 s] +survived
   - [# 628] CRP nayajson:402: 
--------------------------------------------------------------------------------
 398:                                 stack[(-1)].append(value)
 399:                             elif isinstance(stack[(-1)], dict):
 400:                                 stack[(-1)][value.key] = value.value
 401:                             else:
~402:                                 raise ValueError(''.format(value))
 403:                         else:
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 405:                     elif last_token == '}':
 406:                         raise ValueError("Array closed with a '}'")
 407:                     else:
-------
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
--------------------------------------------------------------------------------
[0.00955 s] +survived
   - [# 629] CRP nayajson:404: 
--------------------------------------------------------------------------------
 400:                                 stack[(-1)][value.key] = value.value
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
~404:                             raise ValueError('mutpy'.format(value))
 405:                     elif last_token == '}':
 406:                         raise ValueError("Array closed with a '}'")
 407:                     else:
 408:                         raise ValueError("Array should not contain ':'")
 409:                 else:
-------
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
--------------------------------------------------------------------------------
[0.01649 s] +survived
   - [# 630] CRP nayajson:404: 
--------------------------------------------------------------------------------
 400:                                 stack[(-1)][value.key] = value.value
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
~404:                             raise ValueError(''.format(value))
 405:                     elif last_token == '}':
 406:                         raise ValueError("Array closed with a '}'")
 407:                     else:
 408:                         raise ValueError("Array should not contain ':'")
 409:                 else:
-------
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
--------------------------------------------------------------------------------
[0.01699 s] +survived
   - [# 631] CRP nayajson:405: 
--------------------------------------------------------------------------------
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
~405:                     elif last_token == 'mutpy':
 406:                         raise ValueError("Array closed with a '}'")
 407:                     else:
 408:                         raise ValueError("Array should not contain ':'")
 409:                 else:
 410:                     raise ValueError('Unknown Error')
-------
 405:                     elif last_token == '}':
-------
--------------------------------------------------------------------------------
[0.01788 s] +survived
   - [# 632] CRP nayajson:405: 
--------------------------------------------------------------------------------
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
~405:                     elif last_token == '':
 406:                         raise ValueError("Array closed with a '}'")
 407:                     else:
 408:                         raise ValueError("Array should not contain ':'")
 409:                 else:
 410:                     raise ValueError('Unknown Error')
-------
 405:                     elif last_token == '}':
-------
--------------------------------------------------------------------------------
[0.01743 s] +survived
   - [# 633] CRP nayajson:406: 
--------------------------------------------------------------------------------
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 405:                     elif last_token == '}':
~406:                         raise ValueError('mutpy')
 407:                     else:
 408:                         raise ValueError("Array should not contain ':'")
 409:                 else:
 410:                     raise ValueError('Unknown Error')
 411:             elif isinstance(stack[(-1)], dict):
-------
 406:                         raise ValueError("Array closed with a '}'")
-------
--------------------------------------------------------------------------------
[0.02043 s] +survived
   - [# 634] CRP nayajson:406: 
--------------------------------------------------------------------------------
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 405:                     elif last_token == '}':
~406:                         raise ValueError('')
 407:                     else:
 408:                         raise ValueError("Array should not contain ':'")
 409:                 else:
 410:                     raise ValueError('Unknown Error')
 411:             elif isinstance(stack[(-1)], dict):
-------
 406:                         raise ValueError("Array closed with a '}'")
-------
--------------------------------------------------------------------------------
[0.01964 s] +survived
   - [# 635] CRP nayajson:408: 
--------------------------------------------------------------------------------
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 405:                     elif last_token == '}':
 406:                         raise ValueError("Array closed with a '}'")
 407:                     else:
~408:                         raise ValueError('mutpy')
 409:                 else:
 410:                     raise ValueError('Unknown Error')
 411:             elif isinstance(stack[(-1)], dict):
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
 413:                     if last_token == '{':
-------
 408:                         raise ValueError("Array should not contain ':'")
-------
--------------------------------------------------------------------------------
[0.02171 s] +survived
   - [# 636] CRP nayajson:408: 
--------------------------------------------------------------------------------
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 405:                     elif last_token == '}':
 406:                         raise ValueError("Array closed with a '}'")
 407:                     else:
~408:                         raise ValueError('')
 409:                 else:
 410:                     raise ValueError('Unknown Error')
 411:             elif isinstance(stack[(-1)], dict):
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
 413:                     if last_token == '{':
-------
 408:                         raise ValueError("Array should not contain ':'")
-------
--------------------------------------------------------------------------------
[0.02031 s] +survived
   - [# 637] CRP nayajson:410: 
--------------------------------------------------------------------------------
 406:                         raise ValueError("Array closed with a '}'")
 407:                     else:
 408:                         raise ValueError("Array should not contain ':'")
 409:                 else:
~410:                     raise ValueError('mutpy')
 411:             elif isinstance(stack[(-1)], dict):
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
 413:                     if last_token == '{':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
-------
 410:                     raise ValueError('Unknown Error')
-------
--------------------------------------------------------------------------------
[0.01772 s] +survived
   - [# 638] CRP nayajson:410: 
--------------------------------------------------------------------------------
 406:                         raise ValueError("Array closed with a '}'")
 407:                     else:
 408:                         raise ValueError("Array should not contain ':'")
 409:                 else:
~410:                     raise ValueError('')
 411:             elif isinstance(stack[(-1)], dict):
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
 413:                     if last_token == '{':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
-------
 410:                     raise ValueError('Unknown Error')
-------
--------------------------------------------------------------------------------
[0.01738 s] +survived
   - [# 639] CRP nayajson:411: 
--------------------------------------------------------------------------------
 407:                     else:
 408:                         raise ValueError("Array should not contain ':'")
 409:                 else:
 410:                     raise ValueError('Unknown Error')
~411:             elif isinstance(stack[(-2)], dict):
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
 413:                     if last_token == '{':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
 416:                                 stack.append({})
-------
 411:             elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01040 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 640] CRP nayajson:413: 
--------------------------------------------------------------------------------
 409:                 else:
 410:                     raise ValueError('Unknown Error')
 411:             elif isinstance(stack[(-1)], dict):
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
~413:                     if last_token == 'mutpy':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
 416:                                 stack.append({})
 417:                             elif token == '[':
 418:                                 stack.append([])
-------
 413:                     if last_token == '{':
-------
--------------------------------------------------------------------------------
[0.01077 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 641] CRP nayajson:413: 
--------------------------------------------------------------------------------
 409:                 else:
 410:                     raise ValueError('Unknown Error')
 411:             elif isinstance(stack[(-1)], dict):
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
~413:                     if last_token == '':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
 416:                                 stack.append({})
 417:                             elif token == '[':
 418:                                 stack.append([])
-------
 413:                     if last_token == '{':
-------
--------------------------------------------------------------------------------
[0.01074 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 642] CRP nayajson:415: 
--------------------------------------------------------------------------------
 411:             elif isinstance(stack[(-1)], dict):
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
 413:                     if last_token == '{':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
~415:                             if token == 'mutpy':
 416:                                 stack.append({})
 417:                             elif token == '[':
 418:                                 stack.append([])
 419:                             elif token != '}':
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
-------
 415:                             if token == '{':
-------
--------------------------------------------------------------------------------
[0.01628 s] +survived
   - [# 643] CRP nayajson:415: 
--------------------------------------------------------------------------------
 411:             elif isinstance(stack[(-1)], dict):
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
 413:                     if last_token == '{':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
~415:                             if token == '':
 416:                                 stack.append({})
 417:                             elif token == '[':
 418:                                 stack.append([])
 419:                             elif token != '}':
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
-------
 415:                             if token == '{':
-------
--------------------------------------------------------------------------------
[0.01833 s] +survived
   - [# 644] CRP nayajson:417: 
--------------------------------------------------------------------------------
 413:                     if last_token == '{':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
 416:                                 stack.append({})
~417:                             elif token == 'mutpy':
 418:                                 stack.append([])
 419:                             elif token != '}':
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
 421:                         elif token_type == TOKEN_TYPE.STRING:
 422:                             stack.append(KVP(token))
-------
 417:                             elif token == '[':
-------
--------------------------------------------------------------------------------
[0.01682 s] +survived
   - [# 645] CRP nayajson:417: 
--------------------------------------------------------------------------------
 413:                     if last_token == '{':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
 416:                                 stack.append({})
~417:                             elif token == '':
 418:                                 stack.append([])
 419:                             elif token != '}':
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
 421:                         elif token_type == TOKEN_TYPE.STRING:
 422:                             stack.append(KVP(token))
-------
 417:                             elif token == '[':
-------
--------------------------------------------------------------------------------
[0.02171 s] +survived
   - [# 646] CRP nayajson:419: 
--------------------------------------------------------------------------------
 415:                             if token == '{':
 416:                                 stack.append({})
 417:                             elif token == '[':
 418:                                 stack.append([])
~419:                             elif token != 'mutpy':
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
 421:                         elif token_type == TOKEN_TYPE.STRING:
 422:                             stack.append(KVP(token))
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
-------
 419:                             elif token != '}':
-------
--------------------------------------------------------------------------------
[0.01053 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 647] CRP nayajson:419: 
--------------------------------------------------------------------------------
 415:                             if token == '{':
 416:                                 stack.append({})
 417:                             elif token == '[':
 418:                                 stack.append([])
~419:                             elif token != '':
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
 421:                         elif token_type == TOKEN_TYPE.STRING:
 422:                             stack.append(KVP(token))
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
-------
 419:                             elif token != '}':
-------
--------------------------------------------------------------------------------
[0.01422 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 648] CRP nayajson:420: 
--------------------------------------------------------------------------------
 416:                                 stack.append({})
 417:                             elif token == '[':
 418:                                 stack.append([])
 419:                             elif token != '}':
~420:                                 raise ValueError('mutpy'.format(token))
 421:                         elif token_type == TOKEN_TYPE.STRING:
 422:                             stack.append(KVP(token))
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 425:                     elif last_token == ',':
-------
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.02075 s] +survived
   - [# 649] CRP nayajson:420: 
--------------------------------------------------------------------------------
 416:                                 stack.append({})
 417:                             elif token == '[':
 418:                                 stack.append([])
 419:                             elif token != '}':
~420:                                 raise ValueError(''.format(token))
 421:                         elif token_type == TOKEN_TYPE.STRING:
 422:                             stack.append(KVP(token))
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 425:                     elif last_token == ',':
-------
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.01935 s] +survived
   - [# 650] CRP nayajson:424: 
--------------------------------------------------------------------------------
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
 421:                         elif token_type == TOKEN_TYPE.STRING:
 422:                             stack.append(KVP(token))
 423:                         else:
~424:                             raise ValueError('mutpy'.format(token))
 425:                     elif last_token == ',':
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
 427:                             if token == '{':
 428:                                 stack.append({})
 429:                             elif token == '[':
-------
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.01532 s] +survived
   - [# 651] CRP nayajson:424: 
--------------------------------------------------------------------------------
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
 421:                         elif token_type == TOKEN_TYPE.STRING:
 422:                             stack.append(KVP(token))
 423:                         else:
~424:                             raise ValueError(''.format(token))
 425:                     elif last_token == ',':
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
 427:                             if token == '{':
 428:                                 stack.append({})
 429:                             elif token == '[':
-------
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.01726 s] +survived
   - [# 652] CRP nayajson:425: 
--------------------------------------------------------------------------------
 421:                         elif token_type == TOKEN_TYPE.STRING:
 422:                             stack.append(KVP(token))
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
~425:                     elif last_token == 'mutpy':
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
 427:                             if token == '{':
 428:                                 stack.append({})
 429:                             elif token == '[':
 430:                                 stack.append([])
-------
 425:                     elif last_token == ',':
-------
--------------------------------------------------------------------------------
[0.01144 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 653] CRP nayajson:425: 
--------------------------------------------------------------------------------
 421:                         elif token_type == TOKEN_TYPE.STRING:
 422:                             stack.append(KVP(token))
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
~425:                     elif last_token == '':
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
 427:                             if token == '{':
 428:                                 stack.append({})
 429:                             elif token == '[':
 430:                                 stack.append([])
-------
 425:                     elif last_token == ',':
-------
--------------------------------------------------------------------------------
[0.01121 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 654] CRP nayajson:427: 
--------------------------------------------------------------------------------
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 425:                     elif last_token == ',':
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
~427:                             if token == 'mutpy':
 428:                                 stack.append({})
 429:                             elif token == '[':
 430:                                 stack.append([])
 431:                             else:
 432:                                 raise ValueError("Object key expected.  Got '{}'".format(token))
-------
 427:                             if token == '{':
-------
--------------------------------------------------------------------------------
[0.01748 s] +survived
   - [# 655] CRP nayajson:427: 
--------------------------------------------------------------------------------
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 425:                     elif last_token == ',':
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
~427:                             if token == '':
 428:                                 stack.append({})
 429:                             elif token == '[':
 430:                                 stack.append([])
 431:                             else:
 432:                                 raise ValueError("Object key expected.  Got '{}'".format(token))
-------
 427:                             if token == '{':
-------
--------------------------------------------------------------------------------
[0.01746 s] +survived
   - [# 656] CRP nayajson:429: 
--------------------------------------------------------------------------------
 425:                     elif last_token == ',':
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
 427:                             if token == '{':
 428:                                 stack.append({})
~429:                             elif token == 'mutpy':
 430:                                 stack.append([])
 431:                             else:
 432:                                 raise ValueError("Object key expected.  Got '{}'".format(token))
 433:                         elif token_type == TOKEN_TYPE.STRING:
 434:                             stack.append(KVP(token))
-------
 429:                             elif token == '[':
-------
--------------------------------------------------------------------------------
[0.01651 s] +survived
   - [# 657] CRP nayajson:429: 
--------------------------------------------------------------------------------
 425:                     elif last_token == ',':
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
 427:                             if token == '{':
 428:                                 stack.append({})
~429:                             elif token == '':
 430:                                 stack.append([])
 431:                             else:
 432:                                 raise ValueError("Object key expected.  Got '{}'".format(token))
 433:                         elif token_type == TOKEN_TYPE.STRING:
 434:                             stack.append(KVP(token))
-------
 429:                             elif token == '[':
-------
--------------------------------------------------------------------------------
[0.01745 s] +survived
   - [# 658] CRP nayajson:432: 
--------------------------------------------------------------------------------
 428:                                 stack.append({})
 429:                             elif token == '[':
 430:                                 stack.append([])
 431:                             else:
~432:                                 raise ValueError('mutpy'.format(token))
 433:                         elif token_type == TOKEN_TYPE.STRING:
 434:                             stack.append(KVP(token))
 435:                         else:
 436:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 437:                     elif last_token == '}':
-------
 432:                                 raise ValueError("Object key expected.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.01822 s] +survived
   - [# 659] CRP nayajson:432: 
--------------------------------------------------------------------------------
 428:                                 stack.append({})
 429:                             elif token == '[':
 430:                                 stack.append([])
 431:                             else:
~432:                                 raise ValueError(''.format(token))
 433:                         elif token_type == TOKEN_TYPE.STRING:
 434:                             stack.append(KVP(token))
 435:                         else:
 436:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 437:                     elif last_token == '}':
-------
 432:                                 raise ValueError("Object key expected.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.02021 s] +survived
   - [# 660] CRP nayajson:436: 
--------------------------------------------------------------------------------
 432:                                 raise ValueError("Object key expected.  Got '{}'".format(token))
 433:                         elif token_type == TOKEN_TYPE.STRING:
 434:                             stack.append(KVP(token))
 435:                         else:
~436:                             raise ValueError('mutpy'.format(token))
 437:                     elif last_token == '}':
 438:                         value = stack.pop()
 439:                         if len(stack) == 0:
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
-------
 436:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.02022 s] +survived
   - [# 661] CRP nayajson:436: 
--------------------------------------------------------------------------------
 432:                                 raise ValueError("Object key expected.  Got '{}'".format(token))
 433:                         elif token_type == TOKEN_TYPE.STRING:
 434:                             stack.append(KVP(token))
 435:                         else:
~436:                             raise ValueError(''.format(token))
 437:                     elif last_token == '}':
 438:                         value = stack.pop()
 439:                         if len(stack) == 0:
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
-------
 436:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.02016 s] +survived
   - [# 662] CRP nayajson:437: 
--------------------------------------------------------------------------------
 433:                         elif token_type == TOKEN_TYPE.STRING:
 434:                             stack.append(KVP(token))
 435:                         else:
 436:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
~437:                     elif last_token == 'mutpy':
 438:                         value = stack.pop()
 439:                         if len(stack) == 0:
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
-------
 437:                     elif last_token == '}':
-------
--------------------------------------------------------------------------------
[0.01126 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 663] CRP nayajson:437: 
--------------------------------------------------------------------------------
 433:                         elif token_type == TOKEN_TYPE.STRING:
 434:                             stack.append(KVP(token))
 435:                         else:
 436:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
~437:                     elif last_token == '':
 438:                         value = stack.pop()
 439:                         if len(stack) == 0:
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
-------
 437:                     elif last_token == '}':
-------
--------------------------------------------------------------------------------
[0.01088 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 664] CRP nayajson:439: 
--------------------------------------------------------------------------------
 435:                         else:
 436:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 437:                     elif last_token == '}':
 438:                         value = stack.pop()
~439:                         if len(stack) == 1:
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
-------
 439:                         if len(stack) == 0:
-------
--------------------------------------------------------------------------------
[0.01673 s] +survived
   - [# 665] CRP nayajson:441: 
--------------------------------------------------------------------------------
 437:                     elif last_token == '}':
 438:                         value = stack.pop()
 439:                         if len(stack) == 0:
 440:                             return value
~441:                         if isinstance(stack[(-2)], list):
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
-------
 441:                         if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.01474 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 666] CRP nayajson:442: 
--------------------------------------------------------------------------------
 438:                         value = stack.pop()
 439:                         if len(stack) == 0:
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
~442:                             stack[(-2)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
-------
 442:                             stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.01305 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 667] CRP nayajson:443: 
--------------------------------------------------------------------------------
 439:                         if len(stack) == 0:
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
~443:                         elif isinstance(stack[(-2)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
-------
 443:                         elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01120 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 668] CRP nayajson:444: 
--------------------------------------------------------------------------------
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
~444:                             stack[(-2)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
-------
 444:                             stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01718 s] +survived
   - [# 669] CRP nayajson:445: 
--------------------------------------------------------------------------------
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
~445:                         elif isinstance(stack[(-2)], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
-------
 445:                         elif isinstance(stack[(-1)], KVP):
-------
--------------------------------------------------------------------------------
[0.01129 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 670] CRP nayajson:446: 
--------------------------------------------------------------------------------
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
~446:                             stack[(-2)].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
-------
 446:                             stack[(-1)].value = value
-------
--------------------------------------------------------------------------------
[0.01081 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 671] CRP nayajson:447: 
--------------------------------------------------------------------------------
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
~447:                             stack[(-2)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
 452:                                 stack[(-1)].append(value)
-------
 447:                             stack[(-1)].set = True
-------
--------------------------------------------------------------------------------
[0.01512 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 672] CRP nayajson:449: 
--------------------------------------------------------------------------------
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
~449:                             if len(stack) == 1:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
 452:                                 stack[(-1)].append(value)
 453:                             elif isinstance(stack[(-1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
-------
 449:                             if len(stack) == 0:
-------
--------------------------------------------------------------------------------
[0.01424 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 673] CRP nayajson:451: 
--------------------------------------------------------------------------------
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
~451:                             if isinstance(stack[(-2)], list):
 452:                                 stack[(-1)].append(value)
 453:                             elif isinstance(stack[(-1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 451:                             if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.01449 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 674] CRP nayajson:452: 
--------------------------------------------------------------------------------
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
~452:                                 stack[(-2)].append(value)
 453:                             elif isinstance(stack[(-1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 457:                     elif last_token == ']':
-------
 452:                                 stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.01692 s] +survived
   - [# 675] CRP nayajson:453: 
--------------------------------------------------------------------------------
 449:                             if len(stack) == 0:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
 452:                                 stack[(-1)].append(value)
~453:                             elif isinstance(stack[(-2)], dict):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 457:                     elif last_token == ']':
 458:                         raise ValueError("Object closed with a ']'")
-------
 453:                             elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.00960 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 676] CRP nayajson:454: 
--------------------------------------------------------------------------------
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
 452:                                 stack[(-1)].append(value)
 453:                             elif isinstance(stack[(-1)], dict):
~454:                                 stack[(-2)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 457:                     elif last_token == ']':
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
-------
 454:                                 stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01202 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 677] CRP nayajson:456: 
--------------------------------------------------------------------------------
 452:                                 stack[(-1)].append(value)
 453:                             elif isinstance(stack[(-1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
~456:                                 raise ValueError('mutpy'.format(value))
 457:                     elif last_token == ']':
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
-------
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
--------------------------------------------------------------------------------
[0.01708 s] +survived
   - [# 678] CRP nayajson:456: 
--------------------------------------------------------------------------------
 452:                                 stack[(-1)].append(value)
 453:                             elif isinstance(stack[(-1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
~456:                                 raise ValueError(''.format(value))
 457:                     elif last_token == ']':
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
-------
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
--------------------------------------------------------------------------------
[0.01647 s] +survived
   - [# 679] CRP nayajson:457: 
--------------------------------------------------------------------------------
 453:                             elif isinstance(stack[(-1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
~457:                     elif last_token == 'mutpy':
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
-------
 457:                     elif last_token == ']':
-------
--------------------------------------------------------------------------------
[0.01674 s] +survived
   - [# 680] CRP nayajson:457: 
--------------------------------------------------------------------------------
 453:                             elif isinstance(stack[(-1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
~457:                     elif last_token == '':
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
-------
 457:                     elif last_token == ']':
-------
--------------------------------------------------------------------------------
[0.01656 s] +survived
   - [# 681] CRP nayajson:458: 
--------------------------------------------------------------------------------
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 457:                     elif last_token == ']':
~458:                         raise ValueError('mutpy')
 459:                     else:
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
-------
 458:                         raise ValueError("Object closed with a ']'")
-------
--------------------------------------------------------------------------------
[0.01663 s] +survived
   - [# 682] CRP nayajson:458: 
--------------------------------------------------------------------------------
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 457:                     elif last_token == ']':
~458:                         raise ValueError('')
 459:                     else:
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
-------
 458:                         raise ValueError("Object closed with a ']'")
-------
--------------------------------------------------------------------------------
[0.01661 s] +survived
   - [# 683] CRP nayajson:460: 
--------------------------------------------------------------------------------
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 457:                     elif last_token == ']':
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
~460:                         raise ValueError('mutpy')
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
-------
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
-------
--------------------------------------------------------------------------------
[0.01722 s] +survived
   - [# 684] CRP nayajson:460: 
--------------------------------------------------------------------------------
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 457:                     elif last_token == ']':
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
~460:                         raise ValueError('')
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
-------
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
-------
--------------------------------------------------------------------------------
[0.02044 s] +survived
   - [# 685] CRP nayajson:461: 
--------------------------------------------------------------------------------
 457:                     elif last_token == ']':
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
~461:             elif isinstance(stack[(-2)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
-------
 461:             elif isinstance(stack[(-1)], KVP):
-------
--------------------------------------------------------------------------------
[0.01172 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 686] CRP nayajson:462: 
--------------------------------------------------------------------------------
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
~462:                 if stack[(-2)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
-------
 462:                 if stack[(-1)].set:
-------
--------------------------------------------------------------------------------
[0.01021 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 687] CRP nayajson:464: 
--------------------------------------------------------------------------------
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
~464:                         if (token != 'mutpy' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
-------
 464:                         if (token != '}' and token != ','):
-------
--------------------------------------------------------------------------------
[0.01090 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 688] CRP nayajson:464: 
--------------------------------------------------------------------------------
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
~464:                         if (token != '' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
-------
 464:                         if (token != '}' and token != ','):
-------
--------------------------------------------------------------------------------
[0.01125 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 689] CRP nayajson:464: 
--------------------------------------------------------------------------------
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
~464:                         if (token != '}' and token != 'mutpy'):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
-------
 464:                         if (token != '}' and token != ','):
-------
--------------------------------------------------------------------------------
[0.01114 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 690] CRP nayajson:464: 
--------------------------------------------------------------------------------
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
~464:                         if (token != '}' and token != ''):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
-------
 464:                         if (token != '}' and token != ','):
-------
--------------------------------------------------------------------------------
[0.01121 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 691] CRP nayajson:465: 
--------------------------------------------------------------------------------
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
~465:                             raise ValueError('mutpy' + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
-------
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
-------
--------------------------------------------------------------------------------
[0.01670 s] +survived
   - [# 692] CRP nayajson:465: 
--------------------------------------------------------------------------------
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
~465:                             raise ValueError('' + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
-------
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
-------
--------------------------------------------------------------------------------
[0.01786 s] +survived
   - [# 693] CRP nayajson:465: 
--------------------------------------------------------------------------------
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
~465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + 'mutpy')
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
-------
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
-------
--------------------------------------------------------------------------------
[0.01754 s] +survived
   - [# 694] CRP nayajson:465: 
--------------------------------------------------------------------------------
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
~465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + '')
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
-------
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
-------
--------------------------------------------------------------------------------
[0.01741 s] +survived
   - [# 695] CRP nayajson:467: 
--------------------------------------------------------------------------------
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
~467:                         if len(stack) == 1:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
-------
 467:                         if len(stack) == 0:
-------
--------------------------------------------------------------------------------
[0.00959 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 696] CRP nayajson:469: 
--------------------------------------------------------------------------------
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
~469:                         if isinstance(stack[(-2)], list):
 470:                             stack[(-1)].append(value)
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 469:                         if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.01025 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 697] CRP nayajson:470: 
--------------------------------------------------------------------------------
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
~470:                             stack[(-2)].append(value)
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
-------
 470:                             stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.01438 s] +survived
   - [# 698] CRP nayajson:471: 
--------------------------------------------------------------------------------
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
~471:                         elif isinstance(stack[(-2)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
 476:                             return stack[0]
-------
 471:                         elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01069 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 699] CRP nayajson:472: 
--------------------------------------------------------------------------------
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
 471:                         elif isinstance(stack[(-1)], dict):
~472:                             stack[(-2)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
 476:                             return stack[0]
 477:                     else:
-------
 472:                             stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01027 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 700] CRP nayajson:474: 
--------------------------------------------------------------------------------
 470:                             stack[(-1)].append(value)
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
~474:                             raise ValueError('mutpy'.format(value))
 475:                         if (token == '}' and len(stack) == 1):
 476:                             return stack[0]
 477:                     else:
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
-------
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
--------------------------------------------------------------------------------
[0.01627 s] +survived
   - [# 701] CRP nayajson:474: 
--------------------------------------------------------------------------------
 470:                             stack[(-1)].append(value)
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
~474:                             raise ValueError(''.format(value))
 475:                         if (token == '}' and len(stack) == 1):
 476:                             return stack[0]
 477:                     else:
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
-------
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
--------------------------------------------------------------------------------
[0.01470 s] +survived
   - [# 702] CRP nayajson:475: 
--------------------------------------------------------------------------------
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
~475:                         if (token == 'mutpy' and len(stack) == 1):
 476:                             return stack[0]
 477:                     else:
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
-------
 475:                         if (token == '}' and len(stack) == 1):
-------
--------------------------------------------------------------------------------
[0.01304 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 703] CRP nayajson:475: 
--------------------------------------------------------------------------------
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
~475:                         if (token == '' and len(stack) == 1):
 476:                             return stack[0]
 477:                     else:
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
-------
 475:                         if (token == '}' and len(stack) == 1):
-------
--------------------------------------------------------------------------------
[0.01308 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 704] CRP nayajson:475: 
--------------------------------------------------------------------------------
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
~475:                         if (token == '}' and len(stack) == 2):
 476:                             return stack[0]
 477:                     else:
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
-------
 475:                         if (token == '}' and len(stack) == 1):
-------
--------------------------------------------------------------------------------
[0.01278 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 705] CRP nayajson:476: 
--------------------------------------------------------------------------------
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
~476:                             return stack[1]
 477:                     else:
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
-------
 476:                             return stack[0]
-------
--------------------------------------------------------------------------------
[0.01061 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 706] CRP nayajson:478: 
--------------------------------------------------------------------------------
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
 476:                             return stack[0]
 477:                     else:
~478:                         raise ValueError('mutpy' + token + "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
-------
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
-------
--------------------------------------------------------------------------------
[0.01728 s] +survived
   - [# 707] CRP nayajson:478: 
--------------------------------------------------------------------------------
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
 476:                             return stack[0]
 477:                     else:
~478:                         raise ValueError('' + token + "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
-------
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
-------
--------------------------------------------------------------------------------
[0.01152 s] +survived
   - [# 708] CRP nayajson:478: 
--------------------------------------------------------------------------------
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
 476:                             return stack[0]
 477:                     else:
~478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + 'mutpy')
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
-------
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
-------
--------------------------------------------------------------------------------
[0.02078 s] +survived
   - [# 709] CRP nayajson:478: 
--------------------------------------------------------------------------------
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
 476:                             return stack[0]
 477:                     else:
~478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + '')
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
-------
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
-------
--------------------------------------------------------------------------------
[0.01965 s] +survived
   - [# 710] CRP nayajson:480: 
--------------------------------------------------------------------------------
 476:                             return stack[0]
 477:                     else:
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
~480:                 token_type == TOKEN_TYPE.OPERATOR and token == 'mutpy' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
-------
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
-------
--------------------------------------------------------------------------------
[0.00641 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 711] CRP nayajson:480: 
--------------------------------------------------------------------------------
 476:                             return stack[0]
 477:                     else:
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
~480:                 token_type == TOKEN_TYPE.OPERATOR and token == '' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
-------
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
-------
--------------------------------------------------------------------------------
[0.01101 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 712] CRP nayajson:482: 
--------------------------------------------------------------------------------
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
~482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == 'mutpy'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
 486:                         elif token == '[':
 487:                             stack.append([])
-------
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
-------
--------------------------------------------------------------------------------
[0.01042 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 713] CRP nayajson:482: 
--------------------------------------------------------------------------------
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
~482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ''):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
 486:                         elif token == '[':
 487:                             stack.append([])
-------
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
-------
--------------------------------------------------------------------------------
[0.01062 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 714] CRP nayajson:484: 
--------------------------------------------------------------------------------
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
~484:                         if token == 'mutpy':
 485:                             stack.append({})
 486:                         elif token == '[':
 487:                             stack.append([])
 488:                         else:
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
-------
 484:                         if token == '{':
-------
--------------------------------------------------------------------------------
[0.01045 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 715] CRP nayajson:484: 
--------------------------------------------------------------------------------
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
~484:                         if token == '':
 485:                             stack.append({})
 486:                         elif token == '[':
 487:                             stack.append([])
 488:                         else:
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
-------
 484:                         if token == '{':
-------
--------------------------------------------------------------------------------
[0.01184 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 716] CRP nayajson:486: 
--------------------------------------------------------------------------------
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
~486:                         elif token == 'mutpy':
 487:                             stack.append([])
 488:                         else:
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
 490:                     else:
 491:                         stack[(-1)].value = token
-------
 486:                         elif token == '[':
-------
--------------------------------------------------------------------------------
[0.01290 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 717] CRP nayajson:486: 
--------------------------------------------------------------------------------
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
~486:                         elif token == '':
 487:                             stack.append([])
 488:                         else:
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
 490:                     else:
 491:                         stack[(-1)].value = token
-------
 486:                         elif token == '[':
-------
--------------------------------------------------------------------------------
[0.01074 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 718] CRP nayajson:489: 
--------------------------------------------------------------------------------
 485:                             stack.append({})
 486:                         elif token == '[':
 487:                             stack.append([])
 488:                         else:
~489:                             raise ValueError('mutpy'.format(token))
 490:                     else:
 491:                         stack[(-1)].value = token
 492:                         stack[(-1)].set = True
 493:                 else:
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
-------
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.02072 s] +survived
   - [# 719] CRP nayajson:489: 
--------------------------------------------------------------------------------
 485:                             stack.append({})
 486:                         elif token == '[':
 487:                             stack.append([])
 488:                         else:
~489:                             raise ValueError(''.format(token))
 490:                     else:
 491:                         stack[(-1)].value = token
 492:                         stack[(-1)].set = True
 493:                 else:
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
-------
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.02392 s] +survived
   - [# 720] CRP nayajson:491: 
--------------------------------------------------------------------------------
 487:                             stack.append([])
 488:                         else:
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
 490:                     else:
~491:                         stack[(-2)].value = token
 492:                         stack[(-1)].set = True
 493:                 else:
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
 495:             else:
 496:                 value = stack.pop()
-------
 491:                         stack[(-1)].value = token
-------
--------------------------------------------------------------------------------
[0.01710 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 721] CRP nayajson:492: 
--------------------------------------------------------------------------------
 488:                         else:
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
 490:                     else:
 491:                         stack[(-1)].value = token
~492:                         stack[(-2)].set = True
 493:                 else:
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
 495:             else:
 496:                 value = stack.pop()
 497:                 if isinstance(stack[(-1)], list):
-------
 492:                         stack[(-1)].set = True
-------
--------------------------------------------------------------------------------
[0.01513 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 722] CRP nayajson:494: 
--------------------------------------------------------------------------------
 490:                     else:
 491:                         stack[(-1)].value = token
 492:                         stack[(-1)].set = True
 493:                 else:
~494:                     raise ValueError('mutpy'.format(token))
 495:             else:
 496:                 value = stack.pop()
 497:                 if isinstance(stack[(-1)], list):
 498:                     stack[(-1)].append(value)
 499:                 elif isinstance(stack[(-1)], dict):
-------
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.01728 s] +survived
   - [# 723] CRP nayajson:494: 
--------------------------------------------------------------------------------
 490:                     else:
 491:                         stack[(-1)].value = token
 492:                         stack[(-1)].set = True
 493:                 else:
~494:                     raise ValueError(''.format(token))
 495:             else:
 496:                 value = stack.pop()
 497:                 if isinstance(stack[(-1)], list):
 498:                     stack[(-1)].append(value)
 499:                 elif isinstance(stack[(-1)], dict):
-------
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
-------
--------------------------------------------------------------------------------
[0.00928 s] +survived
   - [# 724] CRP nayajson:497: 
--------------------------------------------------------------------------------
 493:                 else:
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
 495:             else:
 496:                 value = stack.pop()
~497:                 if isinstance(stack[(-2)], list):
 498:                     stack[(-1)].append(value)
 499:                 elif isinstance(stack[(-1)], dict):
 500:                     stack[(-1)][value.key] = value.value
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
 497:                 if isinstance(stack[(-1)], list):
-------
--------------------------------------------------------------------------------
[0.00567 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 725] CRP nayajson:498: 
--------------------------------------------------------------------------------
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
 495:             else:
 496:                 value = stack.pop()
 497:                 if isinstance(stack[(-1)], list):
~498:                     stack[(-2)].append(value)
 499:                 elif isinstance(stack[(-1)], dict):
 500:                     stack[(-1)][value.key] = value.value
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 503:             (last_type, last_token) = (token_type, token)
-------
 498:                     stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.00852 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 726] CRP nayajson:499: 
--------------------------------------------------------------------------------
 495:             else:
 496:                 value = stack.pop()
 497:                 if isinstance(stack[(-1)], list):
 498:                     stack[(-1)].append(value)
~499:                 elif isinstance(stack[(-2)], dict):
 500:                     stack[(-1)][value.key] = value.value
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 503:             (last_type, last_token) = (token_type, token)
 504:             (token_type, token) = next(token_stream)
-------
 499:                 elif isinstance(stack[(-1)], dict):
-------
--------------------------------------------------------------------------------
[0.01750 s] +survived
   - [# 727] CRP nayajson:500: 
--------------------------------------------------------------------------------
 496:                 value = stack.pop()
 497:                 if isinstance(stack[(-1)], list):
 498:                     stack[(-1)].append(value)
 499:                 elif isinstance(stack[(-1)], dict):
~500:                     stack[(-2)][value.key] = value.value
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 503:             (last_type, last_token) = (token_type, token)
 504:             (token_type, token) = next(token_stream)
 505:     except StopIteration as e:
-------
 500:                     stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01727 s] +survived
   - [# 728] CRP nayajson:502: 
--------------------------------------------------------------------------------
 498:                     stack[(-1)].append(value)
 499:                 elif isinstance(stack[(-1)], dict):
 500:                     stack[(-1)][value.key] = value.value
 501:                 else:
~502:                     raise ValueError('mutpy'.format(value))
 503:             (last_type, last_token) = (token_type, token)
 504:             (token_type, token) = next(token_stream)
 505:     except StopIteration as e:
 506:         if len(stack) == 1:
 507:             return stack[0]
-------
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
--------------------------------------------------------------------------------
[0.01358 s] +survived
   - [# 729] CRP nayajson:502: 
--------------------------------------------------------------------------------
 498:                     stack[(-1)].append(value)
 499:                 elif isinstance(stack[(-1)], dict):
 500:                     stack[(-1)][value.key] = value.value
 501:                 else:
~502:                     raise ValueError(''.format(value))
 503:             (last_type, last_token) = (token_type, token)
 504:             (token_type, token) = next(token_stream)
 505:     except StopIteration as e:
 506:         if len(stack) == 1:
 507:             return stack[0]
-------
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
-------
--------------------------------------------------------------------------------
[0.01760 s] +survived
   - [# 730] CRP nayajson:506: 
--------------------------------------------------------------------------------
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 503:             (last_type, last_token) = (token_type, token)
 504:             (token_type, token) = next(token_stream)
 505:     except StopIteration as e:
~506:         if len(stack) == 2:
 507:             return stack[0]
 508:         else:
 509:             raise ValueError('JSON Object not properly closed') from e
-------
 506:         if len(stack) == 1:
-------
--------------------------------------------------------------------------------
[0.00893 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 731] CRP nayajson:507: 
--------------------------------------------------------------------------------
 503:             (last_type, last_token) = (token_type, token)
 504:             (token_type, token) = next(token_stream)
 505:     except StopIteration as e:
 506:         if len(stack) == 1:
~507:             return stack[1]
 508:         else:
 509:             raise ValueError('JSON Object not properly closed') from e
-------
 507:             return stack[0]
-------
--------------------------------------------------------------------------------
[0.00871 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 732] CRP nayajson:509: 
--------------------------------------------------------------------------------
 505:     except StopIteration as e:
 506:         if len(stack) == 1:
 507:             return stack[0]
 508:         else:
~509:             raise ValueError('mutpy') from e
-------
 509:             raise ValueError('JSON Object not properly closed') from e
-------
--------------------------------------------------------------------------------
[0.01649 s] +survived
   - [# 733] CRP nayajson:509: 
--------------------------------------------------------------------------------
 505:     except StopIteration as e:
 506:         if len(stack) == 1:
 507:             return stack[0]
 508:         else:
~509:             raise ValueError('') from e
-------
 509:             raise ValueError('JSON Object not properly closed') from e
-------
--------------------------------------------------------------------------------
[0.01760 s] +survived
   - [# 734] EHD nayajson:329: 
--------------------------------------------------------------------------------
 325:     token_stream = tokenize(file)
 326:     val = __parse(token_stream, next(token_stream))
 327:     try:
 328:         next(token_stream)
~329:     except StopIteration:
 330:         raise
 331:     raise ValueError('Improperly closed JSON object')
 332: def __parse(token_stream, first_token):
 333:     class KVP:
 334:         def __init__(self, key):
-------
 329:     except StopIteration:
-------
--------------------------------------------------------------------------------
[0.00846 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 735] EHD nayajson:505: 
--------------------------------------------------------------------------------
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 503:             (last_type, last_token) = (token_type, token)
 504:             (token_type, token) = next(token_stream)
~505:     except StopIteration as e:
 506:         raise
-------
 505:     except StopIteration as e:
-------
--------------------------------------------------------------------------------
[0.00980 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 736] EXS nayajson:310: 
--------------------------------------------------------------------------------
 306:     index = 0
 307:     while char:
 308:         try:
 309:             (advance, state, charcode) = process_char(char, charcode)
~310:         except ValueError as e:
 311:             pass
 312:         if completed:
 313:             completed = False
 314:             token = []
 315:             yield now_token
-------
 310:         except ValueError as e:
-------
--------------------------------------------------------------------------------
[0.01089 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 737] EXS nayajson:329: 
--------------------------------------------------------------------------------
 325:     token_stream = tokenize(file)
 326:     val = __parse(token_stream, next(token_stream))
 327:     try:
 328:         next(token_stream)
~329:     except StopIteration:
 330:         pass
 331:     raise ValueError('Improperly closed JSON object')
 332: def __parse(token_stream, first_token):
 333:     class KVP:
 334:         def __init__(self, key):
-------
 329:     except StopIteration:
-------
--------------------------------------------------------------------------------
[0.00847 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 738] EXS nayajson:357: 
--------------------------------------------------------------------------------
 353:         raise ValueError("Expected object or array.  Got '{}'".format(token))
 354:     (last_type, last_token) = (token_type, token)
 355:     try:
 356:         (token_type, token) = next(token_stream)
~357:     except StopIteration as e:
 358:         pass
 359:     try:
 360:         while True:
 361:             if isinstance(stack[(-1)], list):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
-------
 357:     except StopIteration as e:
-------
--------------------------------------------------------------------------------
[0.01785 s] ?survived
   - [# 739] EXS nayajson:505: 
--------------------------------------------------------------------------------
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 503:             (last_type, last_token) = (token_type, token)
 504:             (token_type, token) = next(token_stream)
~505:     except StopIteration as e:
 506:         pass
-------
 505:     except StopIteration as e:
-------
--------------------------------------------------------------------------------
[0.00783 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 740] LCR nayajson:36 : 
--------------------------------------------------------------------------------
  32:     UNICODE_3 = 24
  33:     UNICODE_4 = 25
  34: def tokenize(stream):
  35:     def is_delimiter(char):
~ 36:         return (char.isspace() and char in '{}[]:,')
  37:     token = []
  38:     charcode = 0
  39:     completed = False
  40:     now_token = ''
  41:     def process_char(char, charcode):
-------
  36:         return (char.isspace() or char in '{}[]:,')
-------
--------------------------------------------------------------------------------
[0.01011 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 741] LCR nayajson:90 : 
--------------------------------------------------------------------------------
  86:                 add_char = True
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
~ 90:             elif (char == 'e' and char == 'E'):
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
  92:                 add_char = True
  93:             elif is_delimiter(char):
  94:                 next_state = __TOKENIZER_STATE.WHITESPACE
  95:                 completed = True
-------
  90:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.01490 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 742] LCR nayajson:104: 
--------------------------------------------------------------------------------
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
 101:             if char == '.':
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
 103:                 add_char = True
~104:             elif (char == 'e' and char == 'E'):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 106:                 add_char = True
 107:             elif is_delimiter(char):
 108:                 next_state = __TOKENIZER_STATE.WHITESPACE
 109:                 completed = True
-------
 104:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.01037 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 743] LCR nayajson:124: 
--------------------------------------------------------------------------------
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
~124:             if (char == '+' and char == '-' and char in '0123456789'):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
-------
 124:             if (char == '+' or char == '-' or char in '0123456789'):
-------
--------------------------------------------------------------------------------
[0.01003 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 744] LCR nayajson:142: 
--------------------------------------------------------------------------------
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
 140:             if char in '0123456789':
 141:                 add_char = True
~142:             elif (char == 'e' and char == 'E'):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
 145:             elif is_delimiter(char):
 146:                 completed = True
 147:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
-------
 142:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.01103 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 745] LCR nayajson:231: 
--------------------------------------------------------------------------------
 227:             else:
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
 230:             next_state = __TOKENIZER_STATE.STRING
~231:             if (char == '\\' and char == '"'):
 232:                 add_char = True
 233:             elif char == 'b':
 234:                 char = '\x08'
 235:                 add_char = True
 236:             elif char == 'f':
-------
 231:             if (char == '\\' or char == '"'):
-------
--------------------------------------------------------------------------------
[0.01844 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 746] LCR nayajson:464: 
--------------------------------------------------------------------------------
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
~464:                         if (token != '}' or token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
-------
 464:                         if (token != '}' and token != ','):
-------
--------------------------------------------------------------------------------
[0.01041 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 747] LCR nayajson:475: 
--------------------------------------------------------------------------------
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
~475:                         if (token == '}' or len(stack) == 1):
 476:                             return stack[0]
 477:                     else:
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
-------
 475:                         if (token == '}' and len(stack) == 1):
-------
--------------------------------------------------------------------------------
[0.01009 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 748] LCR nayajson:480: 
--------------------------------------------------------------------------------
 476:                             return stack[0]
 477:                     else:
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
~480:                 token_type == TOKEN_TYPE.OPERATOR or token == ':' or last_type == TOKEN_TYPE.STRING):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
-------
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
-------
--------------------------------------------------------------------------------
[0.01143 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 749] LCR nayajson:482: 
--------------------------------------------------------------------------------
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
~482:                 elif (last_type == TOKEN_TYPE.OPERATOR or last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
 486:                         elif token == '[':
 487:                             stack.append([])
-------
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
-------
--------------------------------------------------------------------------------
[0.01737 s] +survived
   - [# 750] OIL nayajson:307: 
--------------------------------------------------------------------------------
 303:         return (advance, next_state, charcode)
 304:     state = __TOKENIZER_STATE.WHITESPACE
 305:     char = stream.read(1)
 306:     index = 0
~307:     while char:
 308:         try:
 309:             (advance, state, charcode) = process_char(char, charcode)
 310:         except ValueError as e:
 311:             raise ValueError(''.join([e.args[0], ' at index {}'.format(index)]))
 312:         if completed:
-------
 307:     while char:
-------
--------------------------------------------------------------------------------
[0.00797 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 751] OIL nayajson:360: 
--------------------------------------------------------------------------------
 356:         (token_type, token) = next(token_stream)
 357:     except StopIteration as e:
 358:         raise ValueError('Too many opening braces') from e
 359:     try:
~360:         while True:
 361:             if isinstance(stack[(-1)], list):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
 363:                     if last_token == '[':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
-------
 360:         while True:
-------
--------------------------------------------------------------------------------
[0.00757 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 752] ROR nayajson:46 : 
--------------------------------------------------------------------------------
  42:         nonlocal token, completed, now_token
  43:         advance = True
  44:         add_char = False
  45:         next_state = state
~ 46:         if state != __TOKENIZER_STATE.WHITESPACE:
  47:             if char == '{':
  48:                 completed = True
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
  50:             elif char == '}':
  51:                 completed = True
-------
  46:         if state == __TOKENIZER_STATE.WHITESPACE:
-------
--------------------------------------------------------------------------------
[0.00719 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 753] ROR nayajson:47 : 
--------------------------------------------------------------------------------
  43:         advance = True
  44:         add_char = False
  45:         next_state = state
  46:         if state == __TOKENIZER_STATE.WHITESPACE:
~ 47:             if char != '{':
  48:                 completed = True
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
  50:             elif char == '}':
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
-------
  47:             if char == '{':
-------
--------------------------------------------------------------------------------
[0.00755 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 754] ROR nayajson:50 : 
--------------------------------------------------------------------------------
  46:         if state == __TOKENIZER_STATE.WHITESPACE:
  47:             if char == '{':
  48:                 completed = True
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
~ 50:             elif char != '}':
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
  53:             elif char == '[':
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
-------
  50:             elif char == '}':
-------
--------------------------------------------------------------------------------
[0.00740 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 755] ROR nayajson:53 : 
--------------------------------------------------------------------------------
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
  50:             elif char == '}':
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
~ 53:             elif char != '[':
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
  56:             elif char == ']':
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
-------
  53:             elif char == '[':
-------
--------------------------------------------------------------------------------
[0.00755 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 756] ROR nayajson:56 : 
--------------------------------------------------------------------------------
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
  53:             elif char == '[':
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
~ 56:             elif char != ']':
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
  59:             elif char == ',':
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
-------
  56:             elif char == ']':
-------
--------------------------------------------------------------------------------
[0.00773 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 757] ROR nayajson:59 : 
--------------------------------------------------------------------------------
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
  56:             elif char == ']':
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
~ 59:             elif char != ',':
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
  62:             elif char == ':':
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
-------
  59:             elif char == ',':
-------
--------------------------------------------------------------------------------
[0.00909 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 758] ROR nayajson:62 : 
--------------------------------------------------------------------------------
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
  59:             elif char == ',':
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
~ 62:             elif char != ':':
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
  65:             elif char == '"':
  66:                 next_state = __TOKENIZER_STATE.STRING
  67:             elif char in '123456789':
-------
  62:             elif char == ':':
-------
--------------------------------------------------------------------------------
[0.00820 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 759] ROR nayajson:65 : 
--------------------------------------------------------------------------------
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
  62:             elif char == ':':
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
~ 65:             elif char != '"':
  66:                 next_state = __TOKENIZER_STATE.STRING
  67:             elif char in '123456789':
  68:                 next_state = __TOKENIZER_STATE.INTEGER
  69:                 add_char = True
  70:             elif char == '0':
-------
  65:             elif char == '"':
-------
--------------------------------------------------------------------------------
[0.00861 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 760] ROR nayajson:70 : 
--------------------------------------------------------------------------------
  66:                 next_state = __TOKENIZER_STATE.STRING
  67:             elif char in '123456789':
  68:                 next_state = __TOKENIZER_STATE.INTEGER
  69:                 add_char = True
~ 70:             elif char != '0':
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
  72:                 add_char = True
  73:             elif char == '-':
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
-------
  70:             elif char == '0':
-------
--------------------------------------------------------------------------------
[0.01265 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 761] ROR nayajson:73 : 
--------------------------------------------------------------------------------
  69:                 add_char = True
  70:             elif char == '0':
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
  72:                 add_char = True
~ 73:             elif char != '-':
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
  76:             elif char == 'f':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
  78:             elif char == 't':
-------
  73:             elif char == '-':
-------
--------------------------------------------------------------------------------
[0.00963 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 762] ROR nayajson:76 : 
--------------------------------------------------------------------------------
  72:                 add_char = True
  73:             elif char == '-':
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
~ 76:             elif char != 'f':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
  78:             elif char == 't':
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
  80:             elif char == 'n':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
-------
  76:             elif char == 'f':
-------
--------------------------------------------------------------------------------
[0.00908 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 763] ROR nayajson:78 : 
--------------------------------------------------------------------------------
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
  76:             elif char == 'f':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
~ 78:             elif char != 't':
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
  80:             elif char == 'n':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
  82:             elif (not char.isspace()):
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
  78:             elif char == 't':
-------
--------------------------------------------------------------------------------
[0.00894 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 764] ROR nayajson:80 : 
--------------------------------------------------------------------------------
  76:             elif char == 'f':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
  78:             elif char == 't':
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
~ 80:             elif char != 'n':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
  82:             elif (not char.isspace()):
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
  85:             if char in '0123456789':
-------
  80:             elif char == 'n':
-------
--------------------------------------------------------------------------------
[0.00880 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 765] ROR nayajson:84 : 
--------------------------------------------------------------------------------
  80:             elif char == 'n':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
  82:             elif (not char.isspace()):
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~ 84:         elif state != __TOKENIZER_STATE.INTEGER:
  85:             if char in '0123456789':
  86:                 add_char = True
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
-------
  84:         elif state == __TOKENIZER_STATE.INTEGER:
-------
--------------------------------------------------------------------------------
[0.00896 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 766] ROR nayajson:87 : 
--------------------------------------------------------------------------------
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
  85:             if char in '0123456789':
  86:                 add_char = True
~ 87:             elif char != '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
  90:             elif (char == 'e' or char == 'E'):
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
  92:                 add_char = True
-------
  87:             elif char == '.':
-------
--------------------------------------------------------------------------------
[0.00904 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 767] ROR nayajson:90 : 
--------------------------------------------------------------------------------
  86:                 add_char = True
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
~ 90:             elif (char != 'e' or char == 'E'):
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
  92:                 add_char = True
  93:             elif is_delimiter(char):
  94:                 next_state = __TOKENIZER_STATE.WHITESPACE
  95:                 completed = True
-------
  90:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.01618 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 768] ROR nayajson:90 : 
--------------------------------------------------------------------------------
  86:                 add_char = True
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
~ 90:             elif (char == 'e' or char != 'E'):
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
  92:                 add_char = True
  93:             elif is_delimiter(char):
  94:                 next_state = __TOKENIZER_STATE.WHITESPACE
  95:                 completed = True
-------
  90:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.00934 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 769] ROR nayajson:100: 
--------------------------------------------------------------------------------
  96:                 now_token = (TOKEN_TYPE.NUMBER, int(''.join(token)))
  97:                 advance = False
  98:             else:
  99:                 raise ValueError("A number must contain only digits.  Got '{}'".format(char))
~100:         elif state != __TOKENIZER_STATE.INTEGER_0:
 101:             if char == '.':
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
 103:                 add_char = True
 104:             elif (char == 'e' or char == 'E'):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
-------
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
-------
--------------------------------------------------------------------------------
[0.01001 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 770] ROR nayajson:101: 
--------------------------------------------------------------------------------
  97:                 advance = False
  98:             else:
  99:                 raise ValueError("A number must contain only digits.  Got '{}'".format(char))
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
~101:             if char != '.':
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
 103:                 add_char = True
 104:             elif (char == 'e' or char == 'E'):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 106:                 add_char = True
-------
 101:             if char == '.':
-------
--------------------------------------------------------------------------------
[0.00894 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 771] ROR nayajson:104: 
--------------------------------------------------------------------------------
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
 101:             if char == '.':
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
 103:                 add_char = True
~104:             elif (char != 'e' or char == 'E'):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 106:                 add_char = True
 107:             elif is_delimiter(char):
 108:                 next_state = __TOKENIZER_STATE.WHITESPACE
 109:                 completed = True
-------
 104:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.00871 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 772] ROR nayajson:104: 
--------------------------------------------------------------------------------
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
 101:             if char == '.':
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
 103:                 add_char = True
~104:             elif (char == 'e' or char != 'E'):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 106:                 add_char = True
 107:             elif is_delimiter(char):
 108:                 next_state = __TOKENIZER_STATE.WHITESPACE
 109:                 completed = True
-------
 104:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.00868 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 773] ROR nayajson:114: 
--------------------------------------------------------------------------------
 110:                 now_token = (TOKEN_TYPE.NUMBER, 0)
 111:                 advance = False
 112:             else:
 113:                 raise ValueError("A 0 must be followed by a '.' or a 'e'.  Got '{0}'".format(char))
~114:         elif state != __TOKENIZER_STATE.INTEGER_SIGN:
 115:             if char == '0':
 116:                 next_state = __TOKENIZER_STATE.INTEGER_0
 117:                 add_char = True
 118:             elif char in '123456789':
 119:                 next_state = __TOKENIZER_STATE.INTEGER
-------
 114:         elif state == __TOKENIZER_STATE.INTEGER_SIGN:
-------
--------------------------------------------------------------------------------
[0.00907 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 774] ROR nayajson:115: 
--------------------------------------------------------------------------------
 111:                 advance = False
 112:             else:
 113:                 raise ValueError("A 0 must be followed by a '.' or a 'e'.  Got '{0}'".format(char))
 114:         elif state == __TOKENIZER_STATE.INTEGER_SIGN:
~115:             if char != '0':
 116:                 next_state = __TOKENIZER_STATE.INTEGER_0
 117:                 add_char = True
 118:             elif char in '123456789':
 119:                 next_state = __TOKENIZER_STATE.INTEGER
 120:                 add_char = True
-------
 115:             if char == '0':
-------
--------------------------------------------------------------------------------
[0.00920 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 775] ROR nayajson:123: 
--------------------------------------------------------------------------------
 119:                 next_state = __TOKENIZER_STATE.INTEGER
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
~123:         elif state != __TOKENIZER_STATE.INTEGER_EXP_0:
 124:             if (char == '+' or char == '-' or char in '0123456789'):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
-------
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
-------
--------------------------------------------------------------------------------
[0.00853 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 776] ROR nayajson:124: 
--------------------------------------------------------------------------------
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
~124:             if (char != '+' or char == '-' or char in '0123456789'):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
-------
 124:             if (char == '+' or char == '-' or char in '0123456789'):
-------
--------------------------------------------------------------------------------
[0.01747 s] +survived
   - [# 777] ROR nayajson:124: 
--------------------------------------------------------------------------------
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
~124:             if (char == '+' or char != '-' or char in '0123456789'):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
-------
 124:             if (char == '+' or char == '-' or char in '0123456789'):
-------
--------------------------------------------------------------------------------
[0.01019 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 778] ROR nayajson:129: 
--------------------------------------------------------------------------------
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
~129:         elif state != __TOKENIZER_STATE.INTEGER_EXP:
 130:             if char in '0123456789':
 131:                 add_char = True
 132:             elif is_delimiter(char):
 133:                 completed = True
 134:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
-------
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
-------
--------------------------------------------------------------------------------
[0.00881 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 779] ROR nayajson:139: 
--------------------------------------------------------------------------------
 135:                 next_state = __TOKENIZER_STATE.WHITESPACE
 136:                 advance = False
 137:             else:
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
~139:         elif state != __TOKENIZER_STATE.FLOATING_POINT:
 140:             if char in '0123456789':
 141:                 add_char = True
 142:             elif (char == 'e' or char == 'E'):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
-------
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
-------
--------------------------------------------------------------------------------
[0.00872 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 780] ROR nayajson:142: 
--------------------------------------------------------------------------------
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
 140:             if char in '0123456789':
 141:                 add_char = True
~142:             elif (char != 'e' or char == 'E'):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
 145:             elif is_delimiter(char):
 146:                 completed = True
 147:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
-------
 142:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.00882 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 781] ROR nayajson:142: 
--------------------------------------------------------------------------------
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
 140:             if char in '0123456789':
 141:                 add_char = True
~142:             elif (char == 'e' or char != 'E'):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
 145:             elif is_delimiter(char):
 146:                 completed = True
 147:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
-------
 142:             elif (char == 'e' or char == 'E'):
-------
--------------------------------------------------------------------------------
[0.00941 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 782] ROR nayajson:152: 
--------------------------------------------------------------------------------
 148:                 next_state = __TOKENIZER_STATE.WHITESPACE
 149:                 advance = False
 150:             else:
 151:                 raise ValueError('A number must include only digits')
~152:         elif state != __TOKENIZER_STATE.FLOATING_POINT_0:
 153:             if char in '0123456789':
 154:                 next_state = __TOKENIZER_STATE.FLOATING_POINT
 155:                 add_char = True
 156:             else:
 157:                 raise ValueError('A number with a decimal point must be followed by a fractional part')
-------
 152:         elif state == __TOKENIZER_STATE.FLOATING_POINT_0:
-------
--------------------------------------------------------------------------------
[0.00891 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 783] ROR nayajson:158: 
--------------------------------------------------------------------------------
 154:                 next_state = __TOKENIZER_STATE.FLOATING_POINT
 155:                 add_char = True
 156:             else:
 157:                 raise ValueError('A number with a decimal point must be followed by a fractional part')
~158:         elif state != __TOKENIZER_STATE.FALSE_1:
 159:             if char == 'a':
 160:                 next_state = __TOKENIZER_STATE.FALSE_2
 161:             else:
 162:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 163:         elif state == __TOKENIZER_STATE.FALSE_2:
-------
 158:         elif state == __TOKENIZER_STATE.FALSE_1:
-------
--------------------------------------------------------------------------------
[0.00891 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 784] ROR nayajson:159: 
--------------------------------------------------------------------------------
 155:                 add_char = True
 156:             else:
 157:                 raise ValueError('A number with a decimal point must be followed by a fractional part')
 158:         elif state == __TOKENIZER_STATE.FALSE_1:
~159:             if char != 'a':
 160:                 next_state = __TOKENIZER_STATE.FALSE_2
 161:             else:
 162:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 163:         elif state == __TOKENIZER_STATE.FALSE_2:
 164:             if char == 'l':
-------
 159:             if char == 'a':
-------
--------------------------------------------------------------------------------
[0.01748 s] +survived
   - [# 785] ROR nayajson:163: 
--------------------------------------------------------------------------------
 159:             if char == 'a':
 160:                 next_state = __TOKENIZER_STATE.FALSE_2
 161:             else:
 162:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~163:         elif state != __TOKENIZER_STATE.FALSE_2:
 164:             if char == 'l':
 165:                 next_state = __TOKENIZER_STATE.FALSE_3
 166:             else:
 167:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 168:         elif state == __TOKENIZER_STATE.FALSE_3:
-------
 163:         elif state == __TOKENIZER_STATE.FALSE_2:
-------
--------------------------------------------------------------------------------
[0.00919 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 786] ROR nayajson:164: 
--------------------------------------------------------------------------------
 160:                 next_state = __TOKENIZER_STATE.FALSE_2
 161:             else:
 162:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 163:         elif state == __TOKENIZER_STATE.FALSE_2:
~164:             if char != 'l':
 165:                 next_state = __TOKENIZER_STATE.FALSE_3
 166:             else:
 167:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 168:         elif state == __TOKENIZER_STATE.FALSE_3:
 169:             if char == 's':
-------
 164:             if char == 'l':
-------
--------------------------------------------------------------------------------
[0.01722 s] +survived
   - [# 787] ROR nayajson:168: 
--------------------------------------------------------------------------------
 164:             if char == 'l':
 165:                 next_state = __TOKENIZER_STATE.FALSE_3
 166:             else:
 167:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~168:         elif state != __TOKENIZER_STATE.FALSE_3:
 169:             if char == 's':
 170:                 next_state = __TOKENIZER_STATE.FALSE_4
 171:             else:
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 173:         elif state == __TOKENIZER_STATE.FALSE_4:
-------
 168:         elif state == __TOKENIZER_STATE.FALSE_3:
-------
--------------------------------------------------------------------------------
[0.00893 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 788] ROR nayajson:169: 
--------------------------------------------------------------------------------
 165:                 next_state = __TOKENIZER_STATE.FALSE_3
 166:             else:
 167:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 168:         elif state == __TOKENIZER_STATE.FALSE_3:
~169:             if char != 's':
 170:                 next_state = __TOKENIZER_STATE.FALSE_4
 171:             else:
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 173:         elif state == __TOKENIZER_STATE.FALSE_4:
 174:             if char == 'e':
-------
 169:             if char == 's':
-------
--------------------------------------------------------------------------------
[0.01682 s] +survived
   - [# 789] ROR nayajson:173: 
--------------------------------------------------------------------------------
 169:             if char == 's':
 170:                 next_state = __TOKENIZER_STATE.FALSE_4
 171:             else:
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~173:         elif state != __TOKENIZER_STATE.FALSE_4:
 174:             if char == 'e':
 175:                 next_state = __TOKENIZER_STATE.WHITESPACE
 176:                 completed = True
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
 178:             else:
-------
 173:         elif state == __TOKENIZER_STATE.FALSE_4:
-------
--------------------------------------------------------------------------------
[0.00938 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 790] ROR nayajson:174: 
--------------------------------------------------------------------------------
 170:                 next_state = __TOKENIZER_STATE.FALSE_4
 171:             else:
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 173:         elif state == __TOKENIZER_STATE.FALSE_4:
~174:             if char != 'e':
 175:                 next_state = __TOKENIZER_STATE.WHITESPACE
 176:                 completed = True
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
 178:             else:
 179:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 174:             if char == 'e':
-------
--------------------------------------------------------------------------------
[0.01977 s] +survived
   - [# 791] ROR nayajson:180: 
--------------------------------------------------------------------------------
 176:                 completed = True
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
 178:             else:
 179:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~180:         elif state != __TOKENIZER_STATE.TRUE_1:
 181:             if char == 'r':
 182:                 next_state = __TOKENIZER_STATE.TRUE_2
 183:             else:
 184:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 185:         elif state == __TOKENIZER_STATE.TRUE_2:
-------
 180:         elif state == __TOKENIZER_STATE.TRUE_1:
-------
--------------------------------------------------------------------------------
[0.01272 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 792] ROR nayajson:181: 
--------------------------------------------------------------------------------
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
 178:             else:
 179:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 180:         elif state == __TOKENIZER_STATE.TRUE_1:
~181:             if char != 'r':
 182:                 next_state = __TOKENIZER_STATE.TRUE_2
 183:             else:
 184:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 185:         elif state == __TOKENIZER_STATE.TRUE_2:
 186:             if char == 'u':
-------
 181:             if char == 'r':
-------
--------------------------------------------------------------------------------
[0.01200 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 793] ROR nayajson:185: 
--------------------------------------------------------------------------------
 181:             if char == 'r':
 182:                 next_state = __TOKENIZER_STATE.TRUE_2
 183:             else:
 184:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~185:         elif state != __TOKENIZER_STATE.TRUE_2:
 186:             if char == 'u':
 187:                 next_state = __TOKENIZER_STATE.TRUE_3
 188:             else:
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 190:         elif state == __TOKENIZER_STATE.TRUE_3:
-------
 185:         elif state == __TOKENIZER_STATE.TRUE_2:
-------
--------------------------------------------------------------------------------
[0.00917 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 794] ROR nayajson:186: 
--------------------------------------------------------------------------------
 182:                 next_state = __TOKENIZER_STATE.TRUE_2
 183:             else:
 184:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 185:         elif state == __TOKENIZER_STATE.TRUE_2:
~186:             if char != 'u':
 187:                 next_state = __TOKENIZER_STATE.TRUE_3
 188:             else:
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 190:         elif state == __TOKENIZER_STATE.TRUE_3:
 191:             if char == 'e':
-------
 186:             if char == 'u':
-------
--------------------------------------------------------------------------------
[0.01145 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 795] ROR nayajson:190: 
--------------------------------------------------------------------------------
 186:             if char == 'u':
 187:                 next_state = __TOKENIZER_STATE.TRUE_3
 188:             else:
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~190:         elif state != __TOKENIZER_STATE.TRUE_3:
 191:             if char == 'e':
 192:                 next_state = __TOKENIZER_STATE.WHITESPACE
 193:                 completed = True
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
 195:             else:
-------
 190:         elif state == __TOKENIZER_STATE.TRUE_3:
-------
--------------------------------------------------------------------------------
[0.00949 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 796] ROR nayajson:191: 
--------------------------------------------------------------------------------
 187:                 next_state = __TOKENIZER_STATE.TRUE_3
 188:             else:
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 190:         elif state == __TOKENIZER_STATE.TRUE_3:
~191:             if char != 'e':
 192:                 next_state = __TOKENIZER_STATE.WHITESPACE
 193:                 completed = True
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
 195:             else:
 196:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 191:             if char == 'e':
-------
--------------------------------------------------------------------------------
[0.01119 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 797] ROR nayajson:197: 
--------------------------------------------------------------------------------
 193:                 completed = True
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
 195:             else:
 196:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~197:         elif state != __TOKENIZER_STATE.NULL_1:
 198:             if char == 'u':
 199:                 next_state = __TOKENIZER_STATE.NULL_2
 200:             else:
 201:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 202:         elif state == __TOKENIZER_STATE.NULL_2:
-------
 197:         elif state == __TOKENIZER_STATE.NULL_1:
-------
--------------------------------------------------------------------------------
[0.00892 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 798] ROR nayajson:198: 
--------------------------------------------------------------------------------
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
 195:             else:
 196:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 197:         elif state == __TOKENIZER_STATE.NULL_1:
~198:             if char != 'u':
 199:                 next_state = __TOKENIZER_STATE.NULL_2
 200:             else:
 201:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 202:         elif state == __TOKENIZER_STATE.NULL_2:
 203:             if char == 'l':
-------
 198:             if char == 'u':
-------
--------------------------------------------------------------------------------
[0.01388 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 799] ROR nayajson:202: 
--------------------------------------------------------------------------------
 198:             if char == 'u':
 199:                 next_state = __TOKENIZER_STATE.NULL_2
 200:             else:
 201:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~202:         elif state != __TOKENIZER_STATE.NULL_2:
 203:             if char == 'l':
 204:                 next_state = __TOKENIZER_STATE.NULL_3
 205:             else:
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 207:         elif state == __TOKENIZER_STATE.NULL_3:
-------
 202:         elif state == __TOKENIZER_STATE.NULL_2:
-------
--------------------------------------------------------------------------------
[0.00903 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 800] ROR nayajson:203: 
--------------------------------------------------------------------------------
 199:                 next_state = __TOKENIZER_STATE.NULL_2
 200:             else:
 201:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 202:         elif state == __TOKENIZER_STATE.NULL_2:
~203:             if char != 'l':
 204:                 next_state = __TOKENIZER_STATE.NULL_3
 205:             else:
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 207:         elif state == __TOKENIZER_STATE.NULL_3:
 208:             if char == 'l':
-------
 203:             if char == 'l':
-------
--------------------------------------------------------------------------------
[0.01370 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 801] ROR nayajson:207: 
--------------------------------------------------------------------------------
 203:             if char == 'l':
 204:                 next_state = __TOKENIZER_STATE.NULL_3
 205:             else:
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~207:         elif state != __TOKENIZER_STATE.NULL_3:
 208:             if char == 'l':
 209:                 next_state = __TOKENIZER_STATE.WHITESPACE
 210:                 completed = True
 211:                 now_token = (TOKEN_TYPE.NULL, None)
 212:             else:
-------
 207:         elif state == __TOKENIZER_STATE.NULL_3:
-------
--------------------------------------------------------------------------------
[0.01007 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 802] ROR nayajson:208: 
--------------------------------------------------------------------------------
 204:                 next_state = __TOKENIZER_STATE.NULL_3
 205:             else:
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 207:         elif state == __TOKENIZER_STATE.NULL_3:
~208:             if char != 'l':
 209:                 next_state = __TOKENIZER_STATE.WHITESPACE
 210:                 completed = True
 211:                 now_token = (TOKEN_TYPE.NULL, None)
 212:             else:
 213:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
-------
 208:             if char == 'l':
-------
--------------------------------------------------------------------------------
[0.01277 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 803] ROR nayajson:214: 
--------------------------------------------------------------------------------
 210:                 completed = True
 211:                 now_token = (TOKEN_TYPE.NULL, None)
 212:             else:
 213:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
~214:         elif state != __TOKENIZER_STATE.STRING:
 215:             if char == '"':
 216:                 completed = True
 217:                 now_token = (TOKEN_TYPE.STRING, ''.join(token))
 218:                 next_state = __TOKENIZER_STATE.STRING_END
 219:             elif char == '\\':
-------
 214:         elif state == __TOKENIZER_STATE.STRING:
-------
--------------------------------------------------------------------------------
[0.00889 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 804] ROR nayajson:215: 
--------------------------------------------------------------------------------
 211:                 now_token = (TOKEN_TYPE.NULL, None)
 212:             else:
 213:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 214:         elif state == __TOKENIZER_STATE.STRING:
~215:             if char != '"':
 216:                 completed = True
 217:                 now_token = (TOKEN_TYPE.STRING, ''.join(token))
 218:                 next_state = __TOKENIZER_STATE.STRING_END
 219:             elif char == '\\':
 220:                 next_state = __TOKENIZER_STATE.STRING_ESCAPE
-------
 215:             if char == '"':
-------
--------------------------------------------------------------------------------
[0.00854 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 805] ROR nayajson:219: 
--------------------------------------------------------------------------------
 215:             if char == '"':
 216:                 completed = True
 217:                 now_token = (TOKEN_TYPE.STRING, ''.join(token))
 218:                 next_state = __TOKENIZER_STATE.STRING_END
~219:             elif char != '\\':
 220:                 next_state = __TOKENIZER_STATE.STRING_ESCAPE
 221:             else:
 222:                 add_char = True
 223:         elif state == __TOKENIZER_STATE.STRING_END:
 224:             if is_delimiter(char):
-------
 219:             elif char == '\\':
-------
--------------------------------------------------------------------------------
[0.00861 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 806] ROR nayajson:223: 
--------------------------------------------------------------------------------
 219:             elif char == '\\':
 220:                 next_state = __TOKENIZER_STATE.STRING_ESCAPE
 221:             else:
 222:                 add_char = True
~223:         elif state != __TOKENIZER_STATE.STRING_END:
 224:             if is_delimiter(char):
 225:                 advance = False
 226:                 next_state = __TOKENIZER_STATE.WHITESPACE
 227:             else:
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
-------
 223:         elif state == __TOKENIZER_STATE.STRING_END:
-------
--------------------------------------------------------------------------------
[0.00815 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 807] ROR nayajson:229: 
--------------------------------------------------------------------------------
 225:                 advance = False
 226:                 next_state = __TOKENIZER_STATE.WHITESPACE
 227:             else:
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
~229:         elif state != __TOKENIZER_STATE.STRING_ESCAPE:
 230:             next_state = __TOKENIZER_STATE.STRING
 231:             if (char == '\\' or char == '"'):
 232:                 add_char = True
 233:             elif char == 'b':
 234:                 char = '\x08'
-------
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
-------
--------------------------------------------------------------------------------
[0.01671 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 808] ROR nayajson:231: 
--------------------------------------------------------------------------------
 227:             else:
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
 230:             next_state = __TOKENIZER_STATE.STRING
~231:             if (char != '\\' or char == '"'):
 232:                 add_char = True
 233:             elif char == 'b':
 234:                 char = '\x08'
 235:                 add_char = True
 236:             elif char == 'f':
-------
 231:             if (char == '\\' or char == '"'):
-------
--------------------------------------------------------------------------------
[0.01727 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 809] ROR nayajson:231: 
--------------------------------------------------------------------------------
 227:             else:
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
 230:             next_state = __TOKENIZER_STATE.STRING
~231:             if (char == '\\' or char != '"'):
 232:                 add_char = True
 233:             elif char == 'b':
 234:                 char = '\x08'
 235:                 add_char = True
 236:             elif char == 'f':
-------
 231:             if (char == '\\' or char == '"'):
-------
--------------------------------------------------------------------------------
[0.01692 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 810] ROR nayajson:233: 
--------------------------------------------------------------------------------
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
 230:             next_state = __TOKENIZER_STATE.STRING
 231:             if (char == '\\' or char == '"'):
 232:                 add_char = True
~233:             elif char != 'b':
 234:                 char = '\x08'
 235:                 add_char = True
 236:             elif char == 'f':
 237:                 char = '\x0c'
 238:                 add_char = True
-------
 233:             elif char == 'b':
-------
--------------------------------------------------------------------------------
[0.01901 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 811] ROR nayajson:236: 
--------------------------------------------------------------------------------
 232:                 add_char = True
 233:             elif char == 'b':
 234:                 char = '\x08'
 235:                 add_char = True
~236:             elif char != 'f':
 237:                 char = '\x0c'
 238:                 add_char = True
 239:             elif char == 'n':
 240:                 char = '\n'
 241:                 add_char = True
-------
 236:             elif char == 'f':
-------
--------------------------------------------------------------------------------
[0.01984 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 812] ROR nayajson:239: 
--------------------------------------------------------------------------------
 235:                 add_char = True
 236:             elif char == 'f':
 237:                 char = '\x0c'
 238:                 add_char = True
~239:             elif char != 'n':
 240:                 char = '\n'
 241:                 add_char = True
 242:             elif char == 't':
 243:                 char = '\t'
 244:                 add_char = True
-------
 239:             elif char == 'n':
-------
--------------------------------------------------------------------------------
[0.01969 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 813] ROR nayajson:242: 
--------------------------------------------------------------------------------
 238:                 add_char = True
 239:             elif char == 'n':
 240:                 char = '\n'
 241:                 add_char = True
~242:             elif char != 't':
 243:                 char = '\t'
 244:                 add_char = True
 245:             elif char == 'r':
 246:                 char = '\r'
 247:                 add_char = True
-------
 242:             elif char == 't':
-------
--------------------------------------------------------------------------------
[0.01621 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 814] ROR nayajson:245: 
--------------------------------------------------------------------------------
 241:                 add_char = True
 242:             elif char == 't':
 243:                 char = '\t'
 244:                 add_char = True
~245:             elif char != 'r':
 246:                 char = '\r'
 247:                 add_char = True
 248:             elif char == '/':
 249:                 char = '/'
 250:                 add_char = True
-------
 245:             elif char == 'r':
-------
--------------------------------------------------------------------------------
[0.01863 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 815] ROR nayajson:248: 
--------------------------------------------------------------------------------
 244:                 add_char = True
 245:             elif char == 'r':
 246:                 char = '\r'
 247:                 add_char = True
~248:             elif char != '/':
 249:                 char = '/'
 250:                 add_char = True
 251:             elif char == 'u':
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
 253:                 charcode = 0
-------
 248:             elif char == '/':
-------
--------------------------------------------------------------------------------
[0.01869 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 816] ROR nayajson:251: 
--------------------------------------------------------------------------------
 247:                 add_char = True
 248:             elif char == '/':
 249:                 char = '/'
 250:                 add_char = True
~251:             elif char != 'u':
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
 253:                 charcode = 0
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
-------
 251:             elif char == 'u':
-------
--------------------------------------------------------------------------------
[0.01776 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 817] ROR nayajson:256: 
--------------------------------------------------------------------------------
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
 253:                 charcode = 0
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
~256:         elif state != __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
-------
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
-------
--------------------------------------------------------------------------------
[0.01800 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 818] ROR nayajson:267: 
--------------------------------------------------------------------------------
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
~267:         elif state != __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
 272:             elif char in 'ABCDEF':
-------
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
-------
--------------------------------------------------------------------------------
[0.01760 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 819] ROR nayajson:278: 
--------------------------------------------------------------------------------
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
 277:             char = ''
~278:         elif state != __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
 283:             elif char in 'ABCDEF':
-------
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
-------
--------------------------------------------------------------------------------
[0.01700 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 820] ROR nayajson:289: 
--------------------------------------------------------------------------------
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
 288:             char = ''
~289:         elif state != __TOKENIZER_STATE.UNICODE_4:
 290:             if char in '0123456789':
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
 293:                 charcode += ord(char) - 87
 294:             elif char in 'ABCDEF':
-------
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
-------
--------------------------------------------------------------------------------
[0.02064 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 821] ROR nayajson:345: 
--------------------------------------------------------------------------------
 341:             else:
 342:                 return '{}: <NULL>'.format(self.key)
 343:     stack = []
 344:     (token_type, token) = first_token
~345:     if token_type != TOKEN_TYPE.OPERATOR:
 346:         if token == '{':
 347:             stack.append({})
 348:         elif token == '[':
 349:             stack.append([])
 350:         else:
-------
 345:     if token_type == TOKEN_TYPE.OPERATOR:
-------
--------------------------------------------------------------------------------
[0.00863 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 822] ROR nayajson:346: 
--------------------------------------------------------------------------------
 342:                 return '{}: <NULL>'.format(self.key)
 343:     stack = []
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
~346:         if token != '{':
 347:             stack.append({})
 348:         elif token == '[':
 349:             stack.append([])
 350:         else:
 351:             raise ValueError("Expected object or array.  Got '{}'".format(token))
-------
 346:         if token == '{':
-------
--------------------------------------------------------------------------------
[0.00828 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 823] ROR nayajson:348: 
--------------------------------------------------------------------------------
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
 346:         if token == '{':
 347:             stack.append({})
~348:         elif token != '[':
 349:             stack.append([])
 350:         else:
 351:             raise ValueError("Expected object or array.  Got '{}'".format(token))
 352:     else:
 353:         raise ValueError("Expected object or array.  Got '{}'".format(token))
-------
 348:         elif token == '[':
-------
--------------------------------------------------------------------------------
[0.00822 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 824] ROR nayajson:362: 
--------------------------------------------------------------------------------
 358:         raise ValueError('Too many opening braces') from e
 359:     try:
 360:         while True:
 361:             if isinstance(stack[(-1)], list):
~362:                 if last_type != TOKEN_TYPE.OPERATOR:
 363:                     if last_token == '[':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
 366:                                 stack.append({})
 367:                             elif token == '[':
-------
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
-------
--------------------------------------------------------------------------------
[0.01137 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 825] ROR nayajson:363: 
--------------------------------------------------------------------------------
 359:     try:
 360:         while True:
 361:             if isinstance(stack[(-1)], list):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
~363:                     if last_token != '[':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
 366:                                 stack.append({})
 367:                             elif token == '[':
 368:                                 stack.append([])
-------
 363:                     if last_token == '[':
-------
--------------------------------------------------------------------------------
[0.00733 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 826] ROR nayajson:364: 
--------------------------------------------------------------------------------
 360:         while True:
 361:             if isinstance(stack[(-1)], list):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
 363:                     if last_token == '[':
~364:                         if token_type != TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
 366:                                 stack.append({})
 367:                             elif token == '[':
 368:                                 stack.append([])
 369:                             elif token != ']':
-------
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
-------
--------------------------------------------------------------------------------
[0.00838 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 827] ROR nayajson:365: 
--------------------------------------------------------------------------------
 361:             if isinstance(stack[(-1)], list):
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
 363:                     if last_token == '[':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
~365:                             if token != '{':
 366:                                 stack.append({})
 367:                             elif token == '[':
 368:                                 stack.append([])
 369:                             elif token != ']':
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
-------
 365:                             if token == '{':
-------
--------------------------------------------------------------------------------
[0.00859 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 828] ROR nayajson:367: 
--------------------------------------------------------------------------------
 363:                     if last_token == '[':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
 366:                                 stack.append({})
~367:                             elif token != '[':
 368:                                 stack.append([])
 369:                             elif token != ']':
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
 371:                         else:
 372:                             stack.append(token)
-------
 367:                             elif token == '[':
-------
--------------------------------------------------------------------------------
[0.00826 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 829] ROR nayajson:369: 
--------------------------------------------------------------------------------
 365:                             if token == '{':
 366:                                 stack.append({})
 367:                             elif token == '[':
 368:                                 stack.append([])
~369:                             elif token == ']':
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
 371:                         else:
 372:                             stack.append(token)
 373:                     elif last_token == ',':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
-------
 369:                             elif token != ']':
-------
--------------------------------------------------------------------------------
[0.00887 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 830] ROR nayajson:373: 
--------------------------------------------------------------------------------
 369:                             elif token != ']':
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
 371:                         else:
 372:                             stack.append(token)
~373:                     elif last_token != ',':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
 375:                             if token == '{':
 376:                                 stack.append({})
 377:                             elif token == '[':
 378:                                 stack.append([])
-------
 373:                     elif last_token == ',':
-------
--------------------------------------------------------------------------------
[0.00972 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 831] ROR nayajson:374: 
--------------------------------------------------------------------------------
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
 371:                         else:
 372:                             stack.append(token)
 373:                     elif last_token == ',':
~374:                         if token_type != TOKEN_TYPE.OPERATOR:
 375:                             if token == '{':
 376:                                 stack.append({})
 377:                             elif token == '[':
 378:                                 stack.append([])
 379:                             else:
-------
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
-------
--------------------------------------------------------------------------------
[0.00811 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 832] ROR nayajson:375: 
--------------------------------------------------------------------------------
 371:                         else:
 372:                             stack.append(token)
 373:                     elif last_token == ',':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
~375:                             if token != '{':
 376:                                 stack.append({})
 377:                             elif token == '[':
 378:                                 stack.append([])
 379:                             else:
 380:                                 raise ValueError("Array value expected.  Got '{}'".format(token))
-------
 375:                             if token == '{':
-------
--------------------------------------------------------------------------------
[0.00929 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 833] ROR nayajson:377: 
--------------------------------------------------------------------------------
 373:                     elif last_token == ',':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
 375:                             if token == '{':
 376:                                 stack.append({})
~377:                             elif token != '[':
 378:                                 stack.append([])
 379:                             else:
 380:                                 raise ValueError("Array value expected.  Got '{}'".format(token))
 381:                         else:
 382:                             stack.append(token)
-------
 377:                             elif token == '[':
-------
--------------------------------------------------------------------------------
[0.00869 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 834] ROR nayajson:383: 
--------------------------------------------------------------------------------
 379:                             else:
 380:                                 raise ValueError("Array value expected.  Got '{}'".format(token))
 381:                         else:
 382:                             stack.append(token)
~383:                     elif last_token != ']':
 384:                         value = stack.pop()
 385:                         if len(stack) == 0:
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
-------
 383:                     elif last_token == ']':
-------
--------------------------------------------------------------------------------
[0.00894 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 835] ROR nayajson:385: 
--------------------------------------------------------------------------------
 381:                         else:
 382:                             stack.append(token)
 383:                     elif last_token == ']':
 384:                         value = stack.pop()
~385:                         if len(stack) != 0:
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
-------
 385:                         if len(stack) == 0:
-------
--------------------------------------------------------------------------------
[0.00881 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 836] ROR nayajson:395: 
--------------------------------------------------------------------------------
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
~395:                             if len(stack) != 0:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
 398:                                 stack[(-1)].append(value)
 399:                             elif isinstance(stack[(-1)], dict):
 400:                                 stack[(-1)][value.key] = value.value
-------
 395:                             if len(stack) == 0:
-------
--------------------------------------------------------------------------------
[0.01313 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 837] ROR nayajson:405: 
--------------------------------------------------------------------------------
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
~405:                     elif last_token != '}':
 406:                         raise ValueError("Array closed with a '}'")
 407:                     else:
 408:                         raise ValueError("Array should not contain ':'")
 409:                 else:
 410:                     raise ValueError('Unknown Error')
-------
 405:                     elif last_token == '}':
-------
--------------------------------------------------------------------------------
[0.01726 s] +survived
   - [# 838] ROR nayajson:412: 
--------------------------------------------------------------------------------
 408:                         raise ValueError("Array should not contain ':'")
 409:                 else:
 410:                     raise ValueError('Unknown Error')
 411:             elif isinstance(stack[(-1)], dict):
~412:                 if last_type != TOKEN_TYPE.OPERATOR:
 413:                     if last_token == '{':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
 416:                                 stack.append({})
 417:                             elif token == '[':
-------
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
-------
--------------------------------------------------------------------------------
[0.01222 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 839] ROR nayajson:413: 
--------------------------------------------------------------------------------
 409:                 else:
 410:                     raise ValueError('Unknown Error')
 411:             elif isinstance(stack[(-1)], dict):
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
~413:                     if last_token != '{':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
 416:                                 stack.append({})
 417:                             elif token == '[':
 418:                                 stack.append([])
-------
 413:                     if last_token == '{':
-------
--------------------------------------------------------------------------------
[0.00971 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 840] ROR nayajson:414: 
--------------------------------------------------------------------------------
 410:                     raise ValueError('Unknown Error')
 411:             elif isinstance(stack[(-1)], dict):
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
 413:                     if last_token == '{':
~414:                         if token_type != TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
 416:                                 stack.append({})
 417:                             elif token == '[':
 418:                                 stack.append([])
 419:                             elif token != '}':
-------
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
-------
--------------------------------------------------------------------------------
[0.01002 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 841] ROR nayajson:415: 
--------------------------------------------------------------------------------
 411:             elif isinstance(stack[(-1)], dict):
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
 413:                     if last_token == '{':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
~415:                             if token != '{':
 416:                                 stack.append({})
 417:                             elif token == '[':
 418:                                 stack.append([])
 419:                             elif token != '}':
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
-------
 415:                             if token == '{':
-------
--------------------------------------------------------------------------------
[0.01024 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 842] ROR nayajson:417: 
--------------------------------------------------------------------------------
 413:                     if last_token == '{':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
 416:                                 stack.append({})
~417:                             elif token != '[':
 418:                                 stack.append([])
 419:                             elif token != '}':
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
 421:                         elif token_type == TOKEN_TYPE.STRING:
 422:                             stack.append(KVP(token))
-------
 417:                             elif token == '[':
-------
--------------------------------------------------------------------------------
[0.01126 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 843] ROR nayajson:419: 
--------------------------------------------------------------------------------
 415:                             if token == '{':
 416:                                 stack.append({})
 417:                             elif token == '[':
 418:                                 stack.append([])
~419:                             elif token == '}':
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
 421:                         elif token_type == TOKEN_TYPE.STRING:
 422:                             stack.append(KVP(token))
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
-------
 419:                             elif token != '}':
-------
--------------------------------------------------------------------------------
[0.01099 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 844] ROR nayajson:421: 
--------------------------------------------------------------------------------
 417:                             elif token == '[':
 418:                                 stack.append([])
 419:                             elif token != '}':
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
~421:                         elif token_type != TOKEN_TYPE.STRING:
 422:                             stack.append(KVP(token))
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 425:                     elif last_token == ',':
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
-------
 421:                         elif token_type == TOKEN_TYPE.STRING:
-------
--------------------------------------------------------------------------------
[0.01027 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 845] ROR nayajson:425: 
--------------------------------------------------------------------------------
 421:                         elif token_type == TOKEN_TYPE.STRING:
 422:                             stack.append(KVP(token))
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
~425:                     elif last_token != ',':
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
 427:                             if token == '{':
 428:                                 stack.append({})
 429:                             elif token == '[':
 430:                                 stack.append([])
-------
 425:                     elif last_token == ',':
-------
--------------------------------------------------------------------------------
[0.01064 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 846] ROR nayajson:426: 
--------------------------------------------------------------------------------
 422:                             stack.append(KVP(token))
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 425:                     elif last_token == ',':
~426:                         if token_type != TOKEN_TYPE.OPERATOR:
 427:                             if token == '{':
 428:                                 stack.append({})
 429:                             elif token == '[':
 430:                                 stack.append([])
 431:                             else:
-------
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
-------
--------------------------------------------------------------------------------
[0.01386 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 847] ROR nayajson:427: 
--------------------------------------------------------------------------------
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 425:                     elif last_token == ',':
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
~427:                             if token != '{':
 428:                                 stack.append({})
 429:                             elif token == '[':
 430:                                 stack.append([])
 431:                             else:
 432:                                 raise ValueError("Object key expected.  Got '{}'".format(token))
-------
 427:                             if token == '{':
-------
--------------------------------------------------------------------------------
[0.01631 s] +survived
   - [# 848] ROR nayajson:429: 
--------------------------------------------------------------------------------
 425:                     elif last_token == ',':
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
 427:                             if token == '{':
 428:                                 stack.append({})
~429:                             elif token != '[':
 430:                                 stack.append([])
 431:                             else:
 432:                                 raise ValueError("Object key expected.  Got '{}'".format(token))
 433:                         elif token_type == TOKEN_TYPE.STRING:
 434:                             stack.append(KVP(token))
-------
 429:                             elif token == '[':
-------
--------------------------------------------------------------------------------
[0.01737 s] +survived
   - [# 849] ROR nayajson:433: 
--------------------------------------------------------------------------------
 429:                             elif token == '[':
 430:                                 stack.append([])
 431:                             else:
 432:                                 raise ValueError("Object key expected.  Got '{}'".format(token))
~433:                         elif token_type != TOKEN_TYPE.STRING:
 434:                             stack.append(KVP(token))
 435:                         else:
 436:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 437:                     elif last_token == '}':
 438:                         value = stack.pop()
-------
 433:                         elif token_type == TOKEN_TYPE.STRING:
-------
--------------------------------------------------------------------------------
[0.01060 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 850] ROR nayajson:437: 
--------------------------------------------------------------------------------
 433:                         elif token_type == TOKEN_TYPE.STRING:
 434:                             stack.append(KVP(token))
 435:                         else:
 436:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
~437:                     elif last_token != '}':
 438:                         value = stack.pop()
 439:                         if len(stack) == 0:
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
-------
 437:                     elif last_token == '}':
-------
--------------------------------------------------------------------------------
[0.01095 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 851] ROR nayajson:439: 
--------------------------------------------------------------------------------
 435:                         else:
 436:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 437:                     elif last_token == '}':
 438:                         value = stack.pop()
~439:                         if len(stack) != 0:
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
-------
 439:                         if len(stack) == 0:
-------
--------------------------------------------------------------------------------
[0.01109 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 852] ROR nayajson:449: 
--------------------------------------------------------------------------------
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
~449:                             if len(stack) != 0:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
 452:                                 stack[(-1)].append(value)
 453:                             elif isinstance(stack[(-1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
-------
 449:                             if len(stack) == 0:
-------
--------------------------------------------------------------------------------
[0.01043 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 853] ROR nayajson:457: 
--------------------------------------------------------------------------------
 453:                             elif isinstance(stack[(-1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
~457:                     elif last_token != ']':
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
-------
 457:                     elif last_token == ']':
-------
--------------------------------------------------------------------------------
[0.01793 s] +survived
   - [# 854] ROR nayajson:463: 
--------------------------------------------------------------------------------
 459:                     else:
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
~463:                     if token_type != TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
-------
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
-------
--------------------------------------------------------------------------------
[0.01045 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 855] ROR nayajson:464: 
--------------------------------------------------------------------------------
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
~464:                         if (token == '}' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
-------
 464:                         if (token != '}' and token != ','):
-------
--------------------------------------------------------------------------------
[0.01001 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 856] ROR nayajson:464: 
--------------------------------------------------------------------------------
 460:                         raise ValueError("Object key value pairs should be separated by comma, not ':'")
 461:             elif isinstance(stack[(-1)], KVP):
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
~464:                         if (token != '}' and token == ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
-------
 464:                         if (token != '}' and token != ','):
-------
--------------------------------------------------------------------------------
[0.01068 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 857] ROR nayajson:467: 
--------------------------------------------------------------------------------
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
~467:                         if len(stack) != 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
-------
 467:                         if len(stack) == 0:
-------
--------------------------------------------------------------------------------
[0.01286 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 858] ROR nayajson:475: 
--------------------------------------------------------------------------------
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
~475:                         if (token != '}' and len(stack) == 1):
 476:                             return stack[0]
 477:                     else:
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
-------
 475:                         if (token == '}' and len(stack) == 1):
-------
--------------------------------------------------------------------------------
[0.01090 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 859] ROR nayajson:475: 
--------------------------------------------------------------------------------
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
~475:                         if (token == '}' and len(stack) != 1):
 476:                             return stack[0]
 477:                     else:
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
-------
 475:                         if (token == '}' and len(stack) == 1):
-------
--------------------------------------------------------------------------------
[0.01053 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 860] ROR nayajson:480: 
--------------------------------------------------------------------------------
 476:                             return stack[0]
 477:                     else:
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
~480:                 token_type != TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
-------
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
-------
--------------------------------------------------------------------------------
[0.01026 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 861] ROR nayajson:480: 
--------------------------------------------------------------------------------
 476:                             return stack[0]
 477:                     else:
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
~480:                 token_type == TOKEN_TYPE.OPERATOR and token != ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
-------
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
-------
--------------------------------------------------------------------------------
[0.01068 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 862] ROR nayajson:480: 
--------------------------------------------------------------------------------
 476:                             return stack[0]
 477:                     else:
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
~480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type != TOKEN_TYPE.STRING):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
-------
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
-------
--------------------------------------------------------------------------------
[0.01148 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 863] ROR nayajson:482: 
--------------------------------------------------------------------------------
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
~482:                 elif (last_type != TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
 486:                         elif token == '[':
 487:                             stack.append([])
-------
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
-------
--------------------------------------------------------------------------------
[0.00935 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 864] ROR nayajson:482: 
--------------------------------------------------------------------------------
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
~482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token != ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
 486:                         elif token == '[':
 487:                             stack.append([])
-------
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
-------
--------------------------------------------------------------------------------
[0.01032 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 865] ROR nayajson:483: 
--------------------------------------------------------------------------------
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
~483:                     if token_type != TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
 486:                         elif token == '[':
 487:                             stack.append([])
 488:                         else:
-------
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
-------
--------------------------------------------------------------------------------
[0.01061 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 866] ROR nayajson:484: 
--------------------------------------------------------------------------------
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
~484:                         if token != '{':
 485:                             stack.append({})
 486:                         elif token == '[':
 487:                             stack.append([])
 488:                         else:
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
-------
 484:                         if token == '{':
-------
--------------------------------------------------------------------------------
[0.01150 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 867] ROR nayajson:486: 
--------------------------------------------------------------------------------
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
~486:                         elif token != '[':
 487:                             stack.append([])
 488:                         else:
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
 490:                     else:
 491:                         stack[(-1)].value = token
-------
 486:                         elif token == '[':
-------
--------------------------------------------------------------------------------
[0.01242 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 868] ROR nayajson:506: 
--------------------------------------------------------------------------------
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 503:             (last_type, last_token) = (token_type, token)
 504:             (token_type, token) = next(token_stream)
 505:     except StopIteration as e:
~506:         if len(stack) != 1:
 507:             return stack[0]
 508:         else:
 509:             raise ValueError('JSON Object not properly closed') from e
-------
 506:         if len(stack) == 1:
-------
--------------------------------------------------------------------------------
[0.00828 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 869] SDI nayajson:334: 
--------------------------------------------------------------------------------
 330:         return val
 331:     raise ValueError('Improperly closed JSON object')
 332: def __parse(token_stream, first_token):
 333:     class KVP:
~334:         @staticmethod
 335:         def __init__(self, key):
 336:             self.key = key
 337:             self.value = None
 338:             self.set = False
 339:         def __str__(self):
-------
 334:         def __init__(self, key):
-------
--------------------------------------------------------------------------------
[0.01586 s] incompetent
   - [# 870] SDI nayajson:338: 
--------------------------------------------------------------------------------
 334:         def __init__(self, key):
 335:             self.key = key
 336:             self.value = None
 337:             self.set = False
~338:         @staticmethod
 339:         def __str__(self):
 340:             if self.set:
 341:                 return '{}: {}'.format(self.key, self.value)
 342:             else:
 343:                 return '{}: <NULL>'.format(self.key)
-------
 338:         def __str__(self):
-------
--------------------------------------------------------------------------------
[0.01819 s] -survived
   - [# 871] SDL nayajson:3  : 
--------------------------------------------------------------------------------
   1: from io import StringIO
   2: class TOKEN_TYPE:
~  3:     pass
   4:     STRING = 1
   5:     NUMBER = 2
   6:     BOOLEAN = 3
   7:     NULL = 4
   8: class __TOKENIZER_STATE:
-------
   3:     OPERATOR = 0
-------
--------------------------------------------------------------------------------
[0.00876 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 872] SDL nayajson:4  : 
--------------------------------------------------------------------------------
   1: from io import StringIO
   2: class TOKEN_TYPE:
   3:     OPERATOR = 0
~  4:     pass
   5:     NUMBER = 2
   6:     BOOLEAN = 3
   7:     NULL = 4
   8: class __TOKENIZER_STATE:
   9:     WHITESPACE = 0
-------
   4:     STRING = 1
-------
--------------------------------------------------------------------------------
[0.00925 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 873] SDL nayajson:5  : 
--------------------------------------------------------------------------------
   1: from io import StringIO
   2: class TOKEN_TYPE:
   3:     OPERATOR = 0
   4:     STRING = 1
~  5:     pass
   6:     BOOLEAN = 3
   7:     NULL = 4
   8: class __TOKENIZER_STATE:
   9:     WHITESPACE = 0
  10:     INTEGER_0 = 1
-------
   5:     NUMBER = 2
-------
--------------------------------------------------------------------------------
[0.01011 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 874] SDL nayajson:6  : 
--------------------------------------------------------------------------------
   2: class TOKEN_TYPE:
   3:     OPERATOR = 0
   4:     STRING = 1
   5:     NUMBER = 2
~  6:     pass
   7:     NULL = 4
   8: class __TOKENIZER_STATE:
   9:     WHITESPACE = 0
  10:     INTEGER_0 = 1
  11:     INTEGER_SIGN = 2
-------
   6:     BOOLEAN = 3
-------
--------------------------------------------------------------------------------
[0.01184 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 875] SDL nayajson:7  : 
--------------------------------------------------------------------------------
   3:     OPERATOR = 0
   4:     STRING = 1
   5:     NUMBER = 2
   6:     BOOLEAN = 3
~  7:     pass
   8: class __TOKENIZER_STATE:
   9:     WHITESPACE = 0
  10:     INTEGER_0 = 1
  11:     INTEGER_SIGN = 2
  12:     INTEGER = 3
-------
   7:     NULL = 4
-------
--------------------------------------------------------------------------------
[0.01302 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 876] SDL nayajson:9  : 
--------------------------------------------------------------------------------
   5:     NUMBER = 2
   6:     BOOLEAN = 3
   7:     NULL = 4
   8: class __TOKENIZER_STATE:
~  9:     pass
  10:     INTEGER_0 = 1
  11:     INTEGER_SIGN = 2
  12:     INTEGER = 3
  13:     INTEGER_EXP = 4
  14:     INTEGER_EXP_0 = 5
-------
   9:     WHITESPACE = 0
-------
--------------------------------------------------------------------------------
[0.00752 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 877] SDL nayajson:10 : 
--------------------------------------------------------------------------------
   6:     BOOLEAN = 3
   7:     NULL = 4
   8: class __TOKENIZER_STATE:
   9:     WHITESPACE = 0
~ 10:     pass
  11:     INTEGER_SIGN = 2
  12:     INTEGER = 3
  13:     INTEGER_EXP = 4
  14:     INTEGER_EXP_0 = 5
  15:     FLOATING_POINT_0 = 6
-------
  10:     INTEGER_0 = 1
-------
--------------------------------------------------------------------------------
[0.00910 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 878] SDL nayajson:11 : 
--------------------------------------------------------------------------------
   7:     NULL = 4
   8: class __TOKENIZER_STATE:
   9:     WHITESPACE = 0
  10:     INTEGER_0 = 1
~ 11:     pass
  12:     INTEGER = 3
  13:     INTEGER_EXP = 4
  14:     INTEGER_EXP_0 = 5
  15:     FLOATING_POINT_0 = 6
  16:     FLOATING_POINT = 8
-------
  11:     INTEGER_SIGN = 2
-------
--------------------------------------------------------------------------------
[0.01346 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 879] SDL nayajson:12 : 
--------------------------------------------------------------------------------
   8: class __TOKENIZER_STATE:
   9:     WHITESPACE = 0
  10:     INTEGER_0 = 1
  11:     INTEGER_SIGN = 2
~ 12:     pass
  13:     INTEGER_EXP = 4
  14:     INTEGER_EXP_0 = 5
  15:     FLOATING_POINT_0 = 6
  16:     FLOATING_POINT = 8
  17:     STRING = 9
-------
  12:     INTEGER = 3
-------
--------------------------------------------------------------------------------
[0.00856 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 880] SDL nayajson:13 : 
--------------------------------------------------------------------------------
   9:     WHITESPACE = 0
  10:     INTEGER_0 = 1
  11:     INTEGER_SIGN = 2
  12:     INTEGER = 3
~ 13:     pass
  14:     INTEGER_EXP_0 = 5
  15:     FLOATING_POINT_0 = 6
  16:     FLOATING_POINT = 8
  17:     STRING = 9
  18:     STRING_ESCAPE = 10
-------
  13:     INTEGER_EXP = 4
-------
--------------------------------------------------------------------------------
[0.00890 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 881] SDL nayajson:14 : 
--------------------------------------------------------------------------------
  10:     INTEGER_0 = 1
  11:     INTEGER_SIGN = 2
  12:     INTEGER = 3
  13:     INTEGER_EXP = 4
~ 14:     pass
  15:     FLOATING_POINT_0 = 6
  16:     FLOATING_POINT = 8
  17:     STRING = 9
  18:     STRING_ESCAPE = 10
  19:     STRING_END = 11
-------
  14:     INTEGER_EXP_0 = 5
-------
--------------------------------------------------------------------------------
[0.00893 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 882] SDL nayajson:15 : 
--------------------------------------------------------------------------------
  11:     INTEGER_SIGN = 2
  12:     INTEGER = 3
  13:     INTEGER_EXP = 4
  14:     INTEGER_EXP_0 = 5
~ 15:     pass
  16:     FLOATING_POINT = 8
  17:     STRING = 9
  18:     STRING_ESCAPE = 10
  19:     STRING_END = 11
  20:     TRUE_1 = 12
-------
  15:     FLOATING_POINT_0 = 6
-------
--------------------------------------------------------------------------------
[0.00888 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 883] SDL nayajson:16 : 
--------------------------------------------------------------------------------
  12:     INTEGER = 3
  13:     INTEGER_EXP = 4
  14:     INTEGER_EXP_0 = 5
  15:     FLOATING_POINT_0 = 6
~ 16:     pass
  17:     STRING = 9
  18:     STRING_ESCAPE = 10
  19:     STRING_END = 11
  20:     TRUE_1 = 12
  21:     TRUE_2 = 13
-------
  16:     FLOATING_POINT = 8
-------
--------------------------------------------------------------------------------
[0.00882 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 884] SDL nayajson:17 : 
--------------------------------------------------------------------------------
  13:     INTEGER_EXP = 4
  14:     INTEGER_EXP_0 = 5
  15:     FLOATING_POINT_0 = 6
  16:     FLOATING_POINT = 8
~ 17:     pass
  18:     STRING_ESCAPE = 10
  19:     STRING_END = 11
  20:     TRUE_1 = 12
  21:     TRUE_2 = 13
  22:     TRUE_3 = 14
-------
  17:     STRING = 9
-------
--------------------------------------------------------------------------------
[0.00841 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 885] SDL nayajson:18 : 
--------------------------------------------------------------------------------
  14:     INTEGER_EXP_0 = 5
  15:     FLOATING_POINT_0 = 6
  16:     FLOATING_POINT = 8
  17:     STRING = 9
~ 18:     pass
  19:     STRING_END = 11
  20:     TRUE_1 = 12
  21:     TRUE_2 = 13
  22:     TRUE_3 = 14
  23:     FALSE_1 = 15
-------
  18:     STRING_ESCAPE = 10
-------
--------------------------------------------------------------------------------
[0.01817 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 886] SDL nayajson:19 : 
--------------------------------------------------------------------------------
  15:     FLOATING_POINT_0 = 6
  16:     FLOATING_POINT = 8
  17:     STRING = 9
  18:     STRING_ESCAPE = 10
~ 19:     pass
  20:     TRUE_1 = 12
  21:     TRUE_2 = 13
  22:     TRUE_3 = 14
  23:     FALSE_1 = 15
  24:     FALSE_2 = 16
-------
  19:     STRING_END = 11
-------
--------------------------------------------------------------------------------
[0.00920 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 887] SDL nayajson:20 : 
--------------------------------------------------------------------------------
  16:     FLOATING_POINT = 8
  17:     STRING = 9
  18:     STRING_ESCAPE = 10
  19:     STRING_END = 11
~ 20:     pass
  21:     TRUE_2 = 13
  22:     TRUE_3 = 14
  23:     FALSE_1 = 15
  24:     FALSE_2 = 16
  25:     FALSE_3 = 17
-------
  20:     TRUE_1 = 12
-------
--------------------------------------------------------------------------------
[0.01047 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 888] SDL nayajson:21 : 
--------------------------------------------------------------------------------
  17:     STRING = 9
  18:     STRING_ESCAPE = 10
  19:     STRING_END = 11
  20:     TRUE_1 = 12
~ 21:     pass
  22:     TRUE_3 = 14
  23:     FALSE_1 = 15
  24:     FALSE_2 = 16
  25:     FALSE_3 = 17
  26:     FALSE_4 = 18
-------
  21:     TRUE_2 = 13
-------
--------------------------------------------------------------------------------
[0.00931 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 889] SDL nayajson:22 : 
--------------------------------------------------------------------------------
  18:     STRING_ESCAPE = 10
  19:     STRING_END = 11
  20:     TRUE_1 = 12
  21:     TRUE_2 = 13
~ 22:     pass
  23:     FALSE_1 = 15
  24:     FALSE_2 = 16
  25:     FALSE_3 = 17
  26:     FALSE_4 = 18
  27:     NULL_1 = 19
-------
  22:     TRUE_3 = 14
-------
--------------------------------------------------------------------------------
[0.00899 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 890] SDL nayajson:23 : 
--------------------------------------------------------------------------------
  19:     STRING_END = 11
  20:     TRUE_1 = 12
  21:     TRUE_2 = 13
  22:     TRUE_3 = 14
~ 23:     pass
  24:     FALSE_2 = 16
  25:     FALSE_3 = 17
  26:     FALSE_4 = 18
  27:     NULL_1 = 19
  28:     NULL_2 = 20
-------
  23:     FALSE_1 = 15
-------
--------------------------------------------------------------------------------
[0.00902 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 891] SDL nayajson:24 : 
--------------------------------------------------------------------------------
  20:     TRUE_1 = 12
  21:     TRUE_2 = 13
  22:     TRUE_3 = 14
  23:     FALSE_1 = 15
~ 24:     pass
  25:     FALSE_3 = 17
  26:     FALSE_4 = 18
  27:     NULL_1 = 19
  28:     NULL_2 = 20
  29:     NULL_3 = 21
-------
  24:     FALSE_2 = 16
-------
--------------------------------------------------------------------------------
[0.00915 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 892] SDL nayajson:25 : 
--------------------------------------------------------------------------------
  21:     TRUE_2 = 13
  22:     TRUE_3 = 14
  23:     FALSE_1 = 15
  24:     FALSE_2 = 16
~ 25:     pass
  26:     FALSE_4 = 18
  27:     NULL_1 = 19
  28:     NULL_2 = 20
  29:     NULL_3 = 21
  30:     UNICODE_1 = 22
-------
  25:     FALSE_3 = 17
-------
--------------------------------------------------------------------------------
[0.00903 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 893] SDL nayajson:26 : 
--------------------------------------------------------------------------------
  22:     TRUE_3 = 14
  23:     FALSE_1 = 15
  24:     FALSE_2 = 16
  25:     FALSE_3 = 17
~ 26:     pass
  27:     NULL_1 = 19
  28:     NULL_2 = 20
  29:     NULL_3 = 21
  30:     UNICODE_1 = 22
  31:     UNICODE_2 = 23
-------
  26:     FALSE_4 = 18
-------
--------------------------------------------------------------------------------
[0.00936 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 894] SDL nayajson:27 : 
--------------------------------------------------------------------------------
  23:     FALSE_1 = 15
  24:     FALSE_2 = 16
  25:     FALSE_3 = 17
  26:     FALSE_4 = 18
~ 27:     pass
  28:     NULL_2 = 20
  29:     NULL_3 = 21
  30:     UNICODE_1 = 22
  31:     UNICODE_2 = 23
  32:     UNICODE_3 = 24
-------
  27:     NULL_1 = 19
-------
--------------------------------------------------------------------------------
[0.00885 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 895] SDL nayajson:28 : 
--------------------------------------------------------------------------------
  24:     FALSE_2 = 16
  25:     FALSE_3 = 17
  26:     FALSE_4 = 18
  27:     NULL_1 = 19
~ 28:     pass
  29:     NULL_3 = 21
  30:     UNICODE_1 = 22
  31:     UNICODE_2 = 23
  32:     UNICODE_3 = 24
  33:     UNICODE_4 = 25
-------
  28:     NULL_2 = 20
-------
--------------------------------------------------------------------------------
[0.01369 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 896] SDL nayajson:29 : 
--------------------------------------------------------------------------------
  25:     FALSE_3 = 17
  26:     FALSE_4 = 18
  27:     NULL_1 = 19
  28:     NULL_2 = 20
~ 29:     pass
  30:     UNICODE_1 = 22
  31:     UNICODE_2 = 23
  32:     UNICODE_3 = 24
  33:     UNICODE_4 = 25
  34: def tokenize(stream):
-------
  29:     NULL_3 = 21
-------
--------------------------------------------------------------------------------
[0.00839 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 897] SDL nayajson:30 : 
--------------------------------------------------------------------------------
  26:     FALSE_4 = 18
  27:     NULL_1 = 19
  28:     NULL_2 = 20
  29:     NULL_3 = 21
~ 30:     pass
  31:     UNICODE_2 = 23
  32:     UNICODE_3 = 24
  33:     UNICODE_4 = 25
  34: def tokenize(stream):
  35:     def is_delimiter(char):
-------
  30:     UNICODE_1 = 22
-------
--------------------------------------------------------------------------------
[0.01511 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 898] SDL nayajson:31 : 
--------------------------------------------------------------------------------
  27:     NULL_1 = 19
  28:     NULL_2 = 20
  29:     NULL_3 = 21
  30:     UNICODE_1 = 22
~ 31:     pass
  32:     UNICODE_3 = 24
  33:     UNICODE_4 = 25
  34: def tokenize(stream):
  35:     def is_delimiter(char):
  36:         return (char.isspace() or char in '{}[]:,')
-------
  31:     UNICODE_2 = 23
-------
--------------------------------------------------------------------------------
[0.01889 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 899] SDL nayajson:32 : 
--------------------------------------------------------------------------------
  28:     NULL_2 = 20
  29:     NULL_3 = 21
  30:     UNICODE_1 = 22
  31:     UNICODE_2 = 23
~ 32:     pass
  33:     UNICODE_4 = 25
  34: def tokenize(stream):
  35:     def is_delimiter(char):
  36:         return (char.isspace() or char in '{}[]:,')
  37:     token = []
-------
  32:     UNICODE_3 = 24
-------
--------------------------------------------------------------------------------
[0.02027 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 900] SDL nayajson:33 : 
--------------------------------------------------------------------------------
  29:     NULL_3 = 21
  30:     UNICODE_1 = 22
  31:     UNICODE_2 = 23
  32:     UNICODE_3 = 24
~ 33:     pass
  34: def tokenize(stream):
  35:     def is_delimiter(char):
  36:         return (char.isspace() or char in '{}[]:,')
  37:     token = []
  38:     charcode = 0
-------
  33:     UNICODE_4 = 25
-------
--------------------------------------------------------------------------------
[0.01900 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 901] SDL nayajson:36 : 
--------------------------------------------------------------------------------
  32:     UNICODE_3 = 24
  33:     UNICODE_4 = 25
  34: def tokenize(stream):
  35:     def is_delimiter(char):
~ 36:         pass
  37:     token = []
  38:     charcode = 0
  39:     completed = False
  40:     now_token = ''
  41:     def process_char(char, charcode):
-------
  36:         return (char.isspace() or char in '{}[]:,')
-------
--------------------------------------------------------------------------------
[0.00916 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 902] SDL nayajson:37 : 
--------------------------------------------------------------------------------
  33:     UNICODE_4 = 25
  34: def tokenize(stream):
  35:     def is_delimiter(char):
  36:         return (char.isspace() or char in '{}[]:,')
~ 37:     pass
  38:     charcode = 0
  39:     completed = False
  40:     now_token = ''
  41:     def process_char(char, charcode):
  42:         nonlocal token, completed, now_token
-------
  37:     token = []
-------
--------------------------------------------------------------------------------
[0.00941 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 903] SDL nayajson:38 : 
--------------------------------------------------------------------------------
  34: def tokenize(stream):
  35:     def is_delimiter(char):
  36:         return (char.isspace() or char in '{}[]:,')
  37:     token = []
~ 38:     pass
  39:     completed = False
  40:     now_token = ''
  41:     def process_char(char, charcode):
  42:         nonlocal token, completed, now_token
  43:         advance = True
-------
  38:     charcode = 0
-------
--------------------------------------------------------------------------------
[0.00829 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 904] SDL nayajson:39 : 
--------------------------------------------------------------------------------
  35:     def is_delimiter(char):
  36:         return (char.isspace() or char in '{}[]:,')
  37:     token = []
  38:     charcode = 0
~ 39:     pass
  40:     now_token = ''
  41:     def process_char(char, charcode):
  42:         nonlocal token, completed, now_token
  43:         advance = True
  44:         add_char = False
-------
  39:     completed = False
-------
--------------------------------------------------------------------------------
[0.00922 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 905] SDL nayajson:40 : 
--------------------------------------------------------------------------------
  36:         return (char.isspace() or char in '{}[]:,')
  37:     token = []
  38:     charcode = 0
  39:     completed = False
~ 40:     pass
  41:     def process_char(char, charcode):
  42:         nonlocal token, completed, now_token
  43:         advance = True
  44:         add_char = False
  45:         next_state = state
-------
  40:     now_token = ''
-------
--------------------------------------------------------------------------------
[0.00000 s] incompetent
   - [# 906] SDL nayajson:43 : 
--------------------------------------------------------------------------------
  39:     completed = False
  40:     now_token = ''
  41:     def process_char(char, charcode):
  42:         nonlocal token, completed, now_token
~ 43:         pass
  44:         add_char = False
  45:         next_state = state
  46:         if state == __TOKENIZER_STATE.WHITESPACE:
  47:             if char == '{':
  48:                 completed = True
-------
  43:         advance = True
-------
--------------------------------------------------------------------------------
[0.00819 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 907] SDL nayajson:44 : 
--------------------------------------------------------------------------------
  40:     now_token = ''
  41:     def process_char(char, charcode):
  42:         nonlocal token, completed, now_token
  43:         advance = True
~ 44:         pass
  45:         next_state = state
  46:         if state == __TOKENIZER_STATE.WHITESPACE:
  47:             if char == '{':
  48:                 completed = True
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
-------
  44:         add_char = False
-------
--------------------------------------------------------------------------------
[0.00836 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 908] SDL nayajson:45 : 
--------------------------------------------------------------------------------
  41:     def process_char(char, charcode):
  42:         nonlocal token, completed, now_token
  43:         advance = True
  44:         add_char = False
~ 45:         pass
  46:         if state == __TOKENIZER_STATE.WHITESPACE:
  47:             if char == '{':
  48:                 completed = True
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
  50:             elif char == '}':
-------
  45:         next_state = state
-------
--------------------------------------------------------------------------------
[0.00828 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 909] SDL nayajson:48 : 
--------------------------------------------------------------------------------
  44:         add_char = False
  45:         next_state = state
  46:         if state == __TOKENIZER_STATE.WHITESPACE:
  47:             if char == '{':
~ 48:                 pass
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
  50:             elif char == '}':
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
  53:             elif char == '[':
-------
  48:                 completed = True
-------
--------------------------------------------------------------------------------
[0.01461 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 910] SDL nayajson:49 : 
--------------------------------------------------------------------------------
  45:         next_state = state
  46:         if state == __TOKENIZER_STATE.WHITESPACE:
  47:             if char == '{':
  48:                 completed = True
~ 49:                 pass
  50:             elif char == '}':
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
  53:             elif char == '[':
  54:                 completed = True
-------
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
-------
--------------------------------------------------------------------------------
[0.01403 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 911] SDL nayajson:51 : 
--------------------------------------------------------------------------------
  47:             if char == '{':
  48:                 completed = True
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
  50:             elif char == '}':
~ 51:                 pass
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
  53:             elif char == '[':
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
  56:             elif char == ']':
-------
  51:                 completed = True
-------
--------------------------------------------------------------------------------
[0.01108 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 912] SDL nayajson:52 : 
--------------------------------------------------------------------------------
  48:                 completed = True
  49:                 now_token = (TOKEN_TYPE.OPERATOR, '{')
  50:             elif char == '}':
  51:                 completed = True
~ 52:                 pass
  53:             elif char == '[':
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
  56:             elif char == ']':
  57:                 completed = True
-------
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
-------
--------------------------------------------------------------------------------
[0.01177 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 913] SDL nayajson:54 : 
--------------------------------------------------------------------------------
  50:             elif char == '}':
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
  53:             elif char == '[':
~ 54:                 pass
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
  56:             elif char == ']':
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
  59:             elif char == ',':
-------
  54:                 completed = True
-------
--------------------------------------------------------------------------------
[0.00855 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 914] SDL nayajson:55 : 
--------------------------------------------------------------------------------
  51:                 completed = True
  52:                 now_token = (TOKEN_TYPE.OPERATOR, '}')
  53:             elif char == '[':
  54:                 completed = True
~ 55:                 pass
  56:             elif char == ']':
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
  59:             elif char == ',':
  60:                 completed = True
-------
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
-------
--------------------------------------------------------------------------------
[0.00806 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 915] SDL nayajson:57 : 
--------------------------------------------------------------------------------
  53:             elif char == '[':
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
  56:             elif char == ']':
~ 57:                 pass
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
  59:             elif char == ',':
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
  62:             elif char == ':':
-------
  57:                 completed = True
-------
--------------------------------------------------------------------------------
[0.00881 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 916] SDL nayajson:58 : 
--------------------------------------------------------------------------------
  54:                 completed = True
  55:                 now_token = (TOKEN_TYPE.OPERATOR, '[')
  56:             elif char == ']':
  57:                 completed = True
~ 58:                 pass
  59:             elif char == ',':
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
  62:             elif char == ':':
  63:                 completed = True
-------
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
-------
--------------------------------------------------------------------------------
[0.00870 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 917] SDL nayajson:60 : 
--------------------------------------------------------------------------------
  56:             elif char == ']':
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
  59:             elif char == ',':
~ 60:                 pass
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
  62:             elif char == ':':
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
  65:             elif char == '"':
-------
  60:                 completed = True
-------
--------------------------------------------------------------------------------
[0.00891 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 918] SDL nayajson:61 : 
--------------------------------------------------------------------------------
  57:                 completed = True
  58:                 now_token = (TOKEN_TYPE.OPERATOR, ']')
  59:             elif char == ',':
  60:                 completed = True
~ 61:                 pass
  62:             elif char == ':':
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
  65:             elif char == '"':
  66:                 next_state = __TOKENIZER_STATE.STRING
-------
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
-------
--------------------------------------------------------------------------------
[0.00860 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 919] SDL nayajson:63 : 
--------------------------------------------------------------------------------
  59:             elif char == ',':
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
  62:             elif char == ':':
~ 63:                 pass
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
  65:             elif char == '"':
  66:                 next_state = __TOKENIZER_STATE.STRING
  67:             elif char in '123456789':
  68:                 next_state = __TOKENIZER_STATE.INTEGER
-------
  63:                 completed = True
-------
--------------------------------------------------------------------------------
[0.01140 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 920] SDL nayajson:64 : 
--------------------------------------------------------------------------------
  60:                 completed = True
  61:                 now_token = (TOKEN_TYPE.OPERATOR, ',')
  62:             elif char == ':':
  63:                 completed = True
~ 64:                 pass
  65:             elif char == '"':
  66:                 next_state = __TOKENIZER_STATE.STRING
  67:             elif char in '123456789':
  68:                 next_state = __TOKENIZER_STATE.INTEGER
  69:                 add_char = True
-------
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
-------
--------------------------------------------------------------------------------
[0.01076 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 921] SDL nayajson:66 : 
--------------------------------------------------------------------------------
  62:             elif char == ':':
  63:                 completed = True
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
  65:             elif char == '"':
~ 66:                 pass
  67:             elif char in '123456789':
  68:                 next_state = __TOKENIZER_STATE.INTEGER
  69:                 add_char = True
  70:             elif char == '0':
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
-------
  66:                 next_state = __TOKENIZER_STATE.STRING
-------
--------------------------------------------------------------------------------
[0.00991 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 922] SDL nayajson:68 : 
--------------------------------------------------------------------------------
  64:                 now_token = (TOKEN_TYPE.OPERATOR, ':')
  65:             elif char == '"':
  66:                 next_state = __TOKENIZER_STATE.STRING
  67:             elif char in '123456789':
~ 68:                 pass
  69:                 add_char = True
  70:             elif char == '0':
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
  72:                 add_char = True
  73:             elif char == '-':
-------
  68:                 next_state = __TOKENIZER_STATE.INTEGER
-------
--------------------------------------------------------------------------------
[0.01416 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 923] SDL nayajson:69 : 
--------------------------------------------------------------------------------
  65:             elif char == '"':
  66:                 next_state = __TOKENIZER_STATE.STRING
  67:             elif char in '123456789':
  68:                 next_state = __TOKENIZER_STATE.INTEGER
~ 69:                 pass
  70:             elif char == '0':
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
  72:                 add_char = True
  73:             elif char == '-':
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
-------
  69:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.00770 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 924] SDL nayajson:71 : 
--------------------------------------------------------------------------------
  67:             elif char in '123456789':
  68:                 next_state = __TOKENIZER_STATE.INTEGER
  69:                 add_char = True
  70:             elif char == '0':
~ 71:                 pass
  72:                 add_char = True
  73:             elif char == '-':
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
  76:             elif char == 'f':
-------
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
-------
--------------------------------------------------------------------------------
[0.00930 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 925] SDL nayajson:72 : 
--------------------------------------------------------------------------------
  68:                 next_state = __TOKENIZER_STATE.INTEGER
  69:                 add_char = True
  70:             elif char == '0':
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
~ 72:                 pass
  73:             elif char == '-':
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
  76:             elif char == 'f':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
-------
  72:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.01023 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 926] SDL nayajson:74 : 
--------------------------------------------------------------------------------
  70:             elif char == '0':
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
  72:                 add_char = True
  73:             elif char == '-':
~ 74:                 pass
  75:                 add_char = True
  76:             elif char == 'f':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
  78:             elif char == 't':
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
-------
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
-------
--------------------------------------------------------------------------------
[0.01769 s] +survived
   - [# 927] SDL nayajson:75 : 
--------------------------------------------------------------------------------
  71:                 next_state = __TOKENIZER_STATE.INTEGER_0
  72:                 add_char = True
  73:             elif char == '-':
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
~ 75:                 pass
  76:             elif char == 'f':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
  78:             elif char == 't':
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
  80:             elif char == 'n':
-------
  75:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.01787 s] +survived
   - [# 928] SDL nayajson:77 : 
--------------------------------------------------------------------------------
  73:             elif char == '-':
  74:                 next_state = __TOKENIZER_STATE.INTEGER_SIGN
  75:                 add_char = True
  76:             elif char == 'f':
~ 77:                 pass
  78:             elif char == 't':
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
  80:             elif char == 'n':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
  82:             elif (not char.isspace()):
-------
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
-------
--------------------------------------------------------------------------------
[0.01754 s] +survived
   - [# 929] SDL nayajson:79 : 
--------------------------------------------------------------------------------
  75:                 add_char = True
  76:             elif char == 'f':
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
  78:             elif char == 't':
~ 79:                 pass
  80:             elif char == 'n':
  81:                 next_state = __TOKENIZER_STATE.NULL_1
  82:             elif (not char.isspace()):
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
-------
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
-------
--------------------------------------------------------------------------------
[0.01252 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 930] SDL nayajson:81 : 
--------------------------------------------------------------------------------
  77:                 next_state = __TOKENIZER_STATE.FALSE_1
  78:             elif char == 't':
  79:                 next_state = __TOKENIZER_STATE.TRUE_1
  80:             elif char == 'n':
~ 81:                 pass
  82:             elif (not char.isspace()):
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
  85:             if char in '0123456789':
  86:                 add_char = True
-------
  81:                 next_state = __TOKENIZER_STATE.NULL_1
-------
--------------------------------------------------------------------------------
[0.01380 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 931] SDL nayajson:86 : 
--------------------------------------------------------------------------------
  82:             elif (not char.isspace()):
  83:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
  84:         elif state == __TOKENIZER_STATE.INTEGER:
  85:             if char in '0123456789':
~ 86:                 pass
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
  90:             elif (char == 'e' or char == 'E'):
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
-------
  86:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.00969 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 932] SDL nayajson:88 : 
--------------------------------------------------------------------------------
  84:         elif state == __TOKENIZER_STATE.INTEGER:
  85:             if char in '0123456789':
  86:                 add_char = True
  87:             elif char == '.':
~ 88:                 pass
  89:                 add_char = True
  90:             elif (char == 'e' or char == 'E'):
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
  92:                 add_char = True
  93:             elif is_delimiter(char):
-------
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
-------
--------------------------------------------------------------------------------
[0.00961 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 933] SDL nayajson:89 : 
--------------------------------------------------------------------------------
  85:             if char in '0123456789':
  86:                 add_char = True
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
~ 89:                 pass
  90:             elif (char == 'e' or char == 'E'):
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
  92:                 add_char = True
  93:             elif is_delimiter(char):
  94:                 next_state = __TOKENIZER_STATE.WHITESPACE
-------
  89:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.00774 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 934] SDL nayajson:91 : 
--------------------------------------------------------------------------------
  87:             elif char == '.':
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
  90:             elif (char == 'e' or char == 'E'):
~ 91:                 pass
  92:                 add_char = True
  93:             elif is_delimiter(char):
  94:                 next_state = __TOKENIZER_STATE.WHITESPACE
  95:                 completed = True
  96:                 now_token = (TOKEN_TYPE.NUMBER, int(''.join(token)))
-------
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
-------
--------------------------------------------------------------------------------
[0.00980 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 935] SDL nayajson:92 : 
--------------------------------------------------------------------------------
  88:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
  89:                 add_char = True
  90:             elif (char == 'e' or char == 'E'):
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
~ 92:                 pass
  93:             elif is_delimiter(char):
  94:                 next_state = __TOKENIZER_STATE.WHITESPACE
  95:                 completed = True
  96:                 now_token = (TOKEN_TYPE.NUMBER, int(''.join(token)))
  97:                 advance = False
-------
  92:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.00923 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 936] SDL nayajson:94 : 
--------------------------------------------------------------------------------
  90:             elif (char == 'e' or char == 'E'):
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
  92:                 add_char = True
  93:             elif is_delimiter(char):
~ 94:                 pass
  95:                 completed = True
  96:                 now_token = (TOKEN_TYPE.NUMBER, int(''.join(token)))
  97:                 advance = False
  98:             else:
  99:                 raise ValueError("A number must contain only digits.  Got '{}'".format(char))
-------
  94:                 next_state = __TOKENIZER_STATE.WHITESPACE
-------
--------------------------------------------------------------------------------
[0.01733 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 937] SDL nayajson:95 : 
--------------------------------------------------------------------------------
  91:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
  92:                 add_char = True
  93:             elif is_delimiter(char):
  94:                 next_state = __TOKENIZER_STATE.WHITESPACE
~ 95:                 pass
  96:                 now_token = (TOKEN_TYPE.NUMBER, int(''.join(token)))
  97:                 advance = False
  98:             else:
  99:                 raise ValueError("A number must contain only digits.  Got '{}'".format(char))
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
-------
  95:                 completed = True
-------
--------------------------------------------------------------------------------
[0.01340 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 938] SDL nayajson:96 : 
--------------------------------------------------------------------------------
  92:                 add_char = True
  93:             elif is_delimiter(char):
  94:                 next_state = __TOKENIZER_STATE.WHITESPACE
  95:                 completed = True
~ 96:                 pass
  97:                 advance = False
  98:             else:
  99:                 raise ValueError("A number must contain only digits.  Got '{}'".format(char))
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
 101:             if char == '.':
-------
  96:                 now_token = (TOKEN_TYPE.NUMBER, int(''.join(token)))
-------
--------------------------------------------------------------------------------
[0.00943 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 939] SDL nayajson:97 : 
--------------------------------------------------------------------------------
  93:             elif is_delimiter(char):
  94:                 next_state = __TOKENIZER_STATE.WHITESPACE
  95:                 completed = True
  96:                 now_token = (TOKEN_TYPE.NUMBER, int(''.join(token)))
~ 97:                 pass
  98:             else:
  99:                 raise ValueError("A number must contain only digits.  Got '{}'".format(char))
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
 101:             if char == '.':
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
-------
  97:                 advance = False
-------
--------------------------------------------------------------------------------
[0.01227 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 940] SDL nayajson:102: 
--------------------------------------------------------------------------------
  98:             else:
  99:                 raise ValueError("A number must contain only digits.  Got '{}'".format(char))
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
 101:             if char == '.':
~102:                 pass
 103:                 add_char = True
 104:             elif (char == 'e' or char == 'E'):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 106:                 add_char = True
 107:             elif is_delimiter(char):
-------
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
-------
--------------------------------------------------------------------------------
[0.01027 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 941] SDL nayajson:103: 
--------------------------------------------------------------------------------
  99:                 raise ValueError("A number must contain only digits.  Got '{}'".format(char))
 100:         elif state == __TOKENIZER_STATE.INTEGER_0:
 101:             if char == '.':
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
~103:                 pass
 104:             elif (char == 'e' or char == 'E'):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 106:                 add_char = True
 107:             elif is_delimiter(char):
 108:                 next_state = __TOKENIZER_STATE.WHITESPACE
-------
 103:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.00875 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 942] SDL nayajson:105: 
--------------------------------------------------------------------------------
 101:             if char == '.':
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
 103:                 add_char = True
 104:             elif (char == 'e' or char == 'E'):
~105:                 pass
 106:                 add_char = True
 107:             elif is_delimiter(char):
 108:                 next_state = __TOKENIZER_STATE.WHITESPACE
 109:                 completed = True
 110:                 now_token = (TOKEN_TYPE.NUMBER, 0)
-------
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
-------
--------------------------------------------------------------------------------
[0.01541 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 943] SDL nayajson:106: 
--------------------------------------------------------------------------------
 102:                 next_state = __TOKENIZER_STATE.FLOATING_POINT_0
 103:                 add_char = True
 104:             elif (char == 'e' or char == 'E'):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
~106:                 pass
 107:             elif is_delimiter(char):
 108:                 next_state = __TOKENIZER_STATE.WHITESPACE
 109:                 completed = True
 110:                 now_token = (TOKEN_TYPE.NUMBER, 0)
 111:                 advance = False
-------
 106:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.01013 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 944] SDL nayajson:108: 
--------------------------------------------------------------------------------
 104:             elif (char == 'e' or char == 'E'):
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 106:                 add_char = True
 107:             elif is_delimiter(char):
~108:                 pass
 109:                 completed = True
 110:                 now_token = (TOKEN_TYPE.NUMBER, 0)
 111:                 advance = False
 112:             else:
 113:                 raise ValueError("A 0 must be followed by a '.' or a 'e'.  Got '{0}'".format(char))
-------
 108:                 next_state = __TOKENIZER_STATE.WHITESPACE
-------
--------------------------------------------------------------------------------
[0.01244 s] +survived
   - [# 945] SDL nayajson:109: 
--------------------------------------------------------------------------------
 105:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 106:                 add_char = True
 107:             elif is_delimiter(char):
 108:                 next_state = __TOKENIZER_STATE.WHITESPACE
~109:                 pass
 110:                 now_token = (TOKEN_TYPE.NUMBER, 0)
 111:                 advance = False
 112:             else:
 113:                 raise ValueError("A 0 must be followed by a '.' or a 'e'.  Got '{0}'".format(char))
 114:         elif state == __TOKENIZER_STATE.INTEGER_SIGN:
-------
 109:                 completed = True
-------
--------------------------------------------------------------------------------
[0.00912 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 946] SDL nayajson:110: 
--------------------------------------------------------------------------------
 106:                 add_char = True
 107:             elif is_delimiter(char):
 108:                 next_state = __TOKENIZER_STATE.WHITESPACE
 109:                 completed = True
~110:                 pass
 111:                 advance = False
 112:             else:
 113:                 raise ValueError("A 0 must be followed by a '.' or a 'e'.  Got '{0}'".format(char))
 114:         elif state == __TOKENIZER_STATE.INTEGER_SIGN:
 115:             if char == '0':
-------
 110:                 now_token = (TOKEN_TYPE.NUMBER, 0)
-------
--------------------------------------------------------------------------------
[0.00933 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 947] SDL nayajson:111: 
--------------------------------------------------------------------------------
 107:             elif is_delimiter(char):
 108:                 next_state = __TOKENIZER_STATE.WHITESPACE
 109:                 completed = True
 110:                 now_token = (TOKEN_TYPE.NUMBER, 0)
~111:                 pass
 112:             else:
 113:                 raise ValueError("A 0 must be followed by a '.' or a 'e'.  Got '{0}'".format(char))
 114:         elif state == __TOKENIZER_STATE.INTEGER_SIGN:
 115:             if char == '0':
 116:                 next_state = __TOKENIZER_STATE.INTEGER_0
-------
 111:                 advance = False
-------
--------------------------------------------------------------------------------
[0.01788 s] +survived
   - [# 948] SDL nayajson:116: 
--------------------------------------------------------------------------------
 112:             else:
 113:                 raise ValueError("A 0 must be followed by a '.' or a 'e'.  Got '{0}'".format(char))
 114:         elif state == __TOKENIZER_STATE.INTEGER_SIGN:
 115:             if char == '0':
~116:                 pass
 117:                 add_char = True
 118:             elif char in '123456789':
 119:                 next_state = __TOKENIZER_STATE.INTEGER
 120:                 add_char = True
 121:             else:
-------
 116:                 next_state = __TOKENIZER_STATE.INTEGER_0
-------
--------------------------------------------------------------------------------
[0.00983 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 949] SDL nayajson:117: 
--------------------------------------------------------------------------------
 113:                 raise ValueError("A 0 must be followed by a '.' or a 'e'.  Got '{0}'".format(char))
 114:         elif state == __TOKENIZER_STATE.INTEGER_SIGN:
 115:             if char == '0':
 116:                 next_state = __TOKENIZER_STATE.INTEGER_0
~117:                 pass
 118:             elif char in '123456789':
 119:                 next_state = __TOKENIZER_STATE.INTEGER
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
-------
 117:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.02021 s] +survived
   - [# 950] SDL nayajson:119: 
--------------------------------------------------------------------------------
 115:             if char == '0':
 116:                 next_state = __TOKENIZER_STATE.INTEGER_0
 117:                 add_char = True
 118:             elif char in '123456789':
~119:                 pass
 120:                 add_char = True
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
 124:             if (char == '+' or char == '-' or char in '0123456789'):
-------
 119:                 next_state = __TOKENIZER_STATE.INTEGER
-------
--------------------------------------------------------------------------------
[0.02239 s] +survived
   - [# 951] SDL nayajson:120: 
--------------------------------------------------------------------------------
 116:                 next_state = __TOKENIZER_STATE.INTEGER_0
 117:                 add_char = True
 118:             elif char in '123456789':
 119:                 next_state = __TOKENIZER_STATE.INTEGER
~120:                 pass
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
 124:             if (char == '+' or char == '-' or char in '0123456789'):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
-------
 120:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.01998 s] +survived
   - [# 952] SDL nayajson:125: 
--------------------------------------------------------------------------------
 121:             else:
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
 124:             if (char == '+' or char == '-' or char in '0123456789'):
~125:                 pass
 126:                 add_char = True
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
 130:             if char in '0123456789':
-------
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
-------
--------------------------------------------------------------------------------
[0.01043 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 953] SDL nayajson:126: 
--------------------------------------------------------------------------------
 122:                 raise ValueError("A - must be followed by a digit.  Got '{0}'".format(char))
 123:         elif state == __TOKENIZER_STATE.INTEGER_EXP_0:
 124:             if (char == '+' or char == '-' or char in '0123456789'):
 125:                 next_state = __TOKENIZER_STATE.INTEGER_EXP
~126:                 pass
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
 130:             if char in '0123456789':
 131:                 add_char = True
-------
 126:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.00920 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 954] SDL nayajson:131: 
--------------------------------------------------------------------------------
 127:             else:
 128:                 raise ValueError("An e in a number must be followed by a '+', '-' or digit.  Got '{0}'".format(char))
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
 130:             if char in '0123456789':
~131:                 pass
 132:             elif is_delimiter(char):
 133:                 completed = True
 134:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
 135:                 next_state = __TOKENIZER_STATE.WHITESPACE
 136:                 advance = False
-------
 131:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.00962 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 955] SDL nayajson:133: 
--------------------------------------------------------------------------------
 129:         elif state == __TOKENIZER_STATE.INTEGER_EXP:
 130:             if char in '0123456789':
 131:                 add_char = True
 132:             elif is_delimiter(char):
~133:                 pass
 134:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
 135:                 next_state = __TOKENIZER_STATE.WHITESPACE
 136:                 advance = False
 137:             else:
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
-------
 133:                 completed = True
-------
--------------------------------------------------------------------------------
[0.00933 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 956] SDL nayajson:134: 
--------------------------------------------------------------------------------
 130:             if char in '0123456789':
 131:                 add_char = True
 132:             elif is_delimiter(char):
 133:                 completed = True
~134:                 pass
 135:                 next_state = __TOKENIZER_STATE.WHITESPACE
 136:                 advance = False
 137:             else:
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
-------
 134:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
-------
--------------------------------------------------------------------------------
[0.00911 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 957] SDL nayajson:135: 
--------------------------------------------------------------------------------
 131:                 add_char = True
 132:             elif is_delimiter(char):
 133:                 completed = True
 134:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
~135:                 pass
 136:                 advance = False
 137:             else:
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
 140:             if char in '0123456789':
-------
 135:                 next_state = __TOKENIZER_STATE.WHITESPACE
-------
--------------------------------------------------------------------------------
[0.01831 s] +survived
   - [# 958] SDL nayajson:136: 
--------------------------------------------------------------------------------
 132:             elif is_delimiter(char):
 133:                 completed = True
 134:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
 135:                 next_state = __TOKENIZER_STATE.WHITESPACE
~136:                 pass
 137:             else:
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
 140:             if char in '0123456789':
 141:                 add_char = True
-------
 136:                 advance = False
-------
--------------------------------------------------------------------------------
[0.01730 s] +survived
   - [# 959] SDL nayajson:141: 
--------------------------------------------------------------------------------
 137:             else:
 138:                 raise ValueError("A number exponent must consist only of digits.  Got '{}'".format(char))
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
 140:             if char in '0123456789':
~141:                 pass
 142:             elif (char == 'e' or char == 'E'):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
 145:             elif is_delimiter(char):
 146:                 completed = True
-------
 141:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.00976 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 960] SDL nayajson:143: 
--------------------------------------------------------------------------------
 139:         elif state == __TOKENIZER_STATE.FLOATING_POINT:
 140:             if char in '0123456789':
 141:                 add_char = True
 142:             elif (char == 'e' or char == 'E'):
~143:                 pass
 144:                 add_char = True
 145:             elif is_delimiter(char):
 146:                 completed = True
 147:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
 148:                 next_state = __TOKENIZER_STATE.WHITESPACE
-------
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
-------
--------------------------------------------------------------------------------
[0.02049 s] +survived
   - [# 961] SDL nayajson:144: 
--------------------------------------------------------------------------------
 140:             if char in '0123456789':
 141:                 add_char = True
 142:             elif (char == 'e' or char == 'E'):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
~144:                 pass
 145:             elif is_delimiter(char):
 146:                 completed = True
 147:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
 148:                 next_state = __TOKENIZER_STATE.WHITESPACE
 149:                 advance = False
-------
 144:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.00971 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 962] SDL nayajson:146: 
--------------------------------------------------------------------------------
 142:             elif (char == 'e' or char == 'E'):
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
 145:             elif is_delimiter(char):
~146:                 pass
 147:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
 148:                 next_state = __TOKENIZER_STATE.WHITESPACE
 149:                 advance = False
 150:             else:
 151:                 raise ValueError('A number must include only digits')
-------
 146:                 completed = True
-------
--------------------------------------------------------------------------------
[0.01252 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 963] SDL nayajson:147: 
--------------------------------------------------------------------------------
 143:                 next_state = __TOKENIZER_STATE.INTEGER_EXP_0
 144:                 add_char = True
 145:             elif is_delimiter(char):
 146:                 completed = True
~147:                 pass
 148:                 next_state = __TOKENIZER_STATE.WHITESPACE
 149:                 advance = False
 150:             else:
 151:                 raise ValueError('A number must include only digits')
 152:         elif state == __TOKENIZER_STATE.FLOATING_POINT_0:
-------
 147:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
-------
--------------------------------------------------------------------------------
[0.01303 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 964] SDL nayajson:148: 
--------------------------------------------------------------------------------
 144:                 add_char = True
 145:             elif is_delimiter(char):
 146:                 completed = True
 147:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
~148:                 pass
 149:                 advance = False
 150:             else:
 151:                 raise ValueError('A number must include only digits')
 152:         elif state == __TOKENIZER_STATE.FLOATING_POINT_0:
 153:             if char in '0123456789':
-------
 148:                 next_state = __TOKENIZER_STATE.WHITESPACE
-------
--------------------------------------------------------------------------------
[0.01215 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 965] SDL nayajson:149: 
--------------------------------------------------------------------------------
 145:             elif is_delimiter(char):
 146:                 completed = True
 147:                 now_token = (TOKEN_TYPE.NUMBER, float(''.join(token)))
 148:                 next_state = __TOKENIZER_STATE.WHITESPACE
~149:                 pass
 150:             else:
 151:                 raise ValueError('A number must include only digits')
 152:         elif state == __TOKENIZER_STATE.FLOATING_POINT_0:
 153:             if char in '0123456789':
 154:                 next_state = __TOKENIZER_STATE.FLOATING_POINT
-------
 149:                 advance = False
-------
--------------------------------------------------------------------------------
[0.01320 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 966] SDL nayajson:154: 
--------------------------------------------------------------------------------
 150:             else:
 151:                 raise ValueError('A number must include only digits')
 152:         elif state == __TOKENIZER_STATE.FLOATING_POINT_0:
 153:             if char in '0123456789':
~154:                 pass
 155:                 add_char = True
 156:             else:
 157:                 raise ValueError('A number with a decimal point must be followed by a fractional part')
 158:         elif state == __TOKENIZER_STATE.FALSE_1:
 159:             if char == 'a':
-------
 154:                 next_state = __TOKENIZER_STATE.FLOATING_POINT
-------
--------------------------------------------------------------------------------
[0.00967 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 967] SDL nayajson:155: 
--------------------------------------------------------------------------------
 151:                 raise ValueError('A number must include only digits')
 152:         elif state == __TOKENIZER_STATE.FLOATING_POINT_0:
 153:             if char in '0123456789':
 154:                 next_state = __TOKENIZER_STATE.FLOATING_POINT
~155:                 pass
 156:             else:
 157:                 raise ValueError('A number with a decimal point must be followed by a fractional part')
 158:         elif state == __TOKENIZER_STATE.FALSE_1:
 159:             if char == 'a':
 160:                 next_state = __TOKENIZER_STATE.FALSE_2
-------
 155:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.00951 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [# 968] SDL nayajson:160: 
--------------------------------------------------------------------------------
 156:             else:
 157:                 raise ValueError('A number with a decimal point must be followed by a fractional part')
 158:         elif state == __TOKENIZER_STATE.FALSE_1:
 159:             if char == 'a':
~160:                 pass
 161:             else:
 162:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 163:         elif state == __TOKENIZER_STATE.FALSE_2:
 164:             if char == 'l':
 165:                 next_state = __TOKENIZER_STATE.FALSE_3
-------
 160:                 next_state = __TOKENIZER_STATE.FALSE_2
-------
--------------------------------------------------------------------------------
[0.01772 s] +survived
   - [# 969] SDL nayajson:165: 
--------------------------------------------------------------------------------
 161:             else:
 162:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 163:         elif state == __TOKENIZER_STATE.FALSE_2:
 164:             if char == 'l':
~165:                 pass
 166:             else:
 167:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 168:         elif state == __TOKENIZER_STATE.FALSE_3:
 169:             if char == 's':
 170:                 next_state = __TOKENIZER_STATE.FALSE_4
-------
 165:                 next_state = __TOKENIZER_STATE.FALSE_3
-------
--------------------------------------------------------------------------------
[0.01829 s] +survived
   - [# 970] SDL nayajson:170: 
--------------------------------------------------------------------------------
 166:             else:
 167:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 168:         elif state == __TOKENIZER_STATE.FALSE_3:
 169:             if char == 's':
~170:                 pass
 171:             else:
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 173:         elif state == __TOKENIZER_STATE.FALSE_4:
 174:             if char == 'e':
 175:                 next_state = __TOKENIZER_STATE.WHITESPACE
-------
 170:                 next_state = __TOKENIZER_STATE.FALSE_4
-------
--------------------------------------------------------------------------------
[0.01898 s] +survived
   - [# 971] SDL nayajson:175: 
--------------------------------------------------------------------------------
 171:             else:
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 173:         elif state == __TOKENIZER_STATE.FALSE_4:
 174:             if char == 'e':
~175:                 pass
 176:                 completed = True
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
 178:             else:
 179:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 180:         elif state == __TOKENIZER_STATE.TRUE_1:
-------
 175:                 next_state = __TOKENIZER_STATE.WHITESPACE
-------
--------------------------------------------------------------------------------
[0.01701 s] +survived
   - [# 972] SDL nayajson:176: 
--------------------------------------------------------------------------------
 172:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 173:         elif state == __TOKENIZER_STATE.FALSE_4:
 174:             if char == 'e':
 175:                 next_state = __TOKENIZER_STATE.WHITESPACE
~176:                 pass
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
 178:             else:
 179:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 180:         elif state == __TOKENIZER_STATE.TRUE_1:
 181:             if char == 'r':
-------
 176:                 completed = True
-------
--------------------------------------------------------------------------------
[0.01810 s] +survived
   - [# 973] SDL nayajson:177: 
--------------------------------------------------------------------------------
 173:         elif state == __TOKENIZER_STATE.FALSE_4:
 174:             if char == 'e':
 175:                 next_state = __TOKENIZER_STATE.WHITESPACE
 176:                 completed = True
~177:                 pass
 178:             else:
 179:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 180:         elif state == __TOKENIZER_STATE.TRUE_1:
 181:             if char == 'r':
 182:                 next_state = __TOKENIZER_STATE.TRUE_2
-------
 177:                 now_token = (TOKEN_TYPE.BOOLEAN, False)
-------
--------------------------------------------------------------------------------
[0.02205 s] +survived
   - [# 974] SDL nayajson:182: 
--------------------------------------------------------------------------------
 178:             else:
 179:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 180:         elif state == __TOKENIZER_STATE.TRUE_1:
 181:             if char == 'r':
~182:                 pass
 183:             else:
 184:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 185:         elif state == __TOKENIZER_STATE.TRUE_2:
 186:             if char == 'u':
 187:                 next_state = __TOKENIZER_STATE.TRUE_3
-------
 182:                 next_state = __TOKENIZER_STATE.TRUE_2
-------
--------------------------------------------------------------------------------
[0.01514 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 975] SDL nayajson:187: 
--------------------------------------------------------------------------------
 183:             else:
 184:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 185:         elif state == __TOKENIZER_STATE.TRUE_2:
 186:             if char == 'u':
~187:                 pass
 188:             else:
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 190:         elif state == __TOKENIZER_STATE.TRUE_3:
 191:             if char == 'e':
 192:                 next_state = __TOKENIZER_STATE.WHITESPACE
-------
 187:                 next_state = __TOKENIZER_STATE.TRUE_3
-------
--------------------------------------------------------------------------------
[0.01257 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 976] SDL nayajson:192: 
--------------------------------------------------------------------------------
 188:             else:
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 190:         elif state == __TOKENIZER_STATE.TRUE_3:
 191:             if char == 'e':
~192:                 pass
 193:                 completed = True
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
 195:             else:
 196:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 197:         elif state == __TOKENIZER_STATE.NULL_1:
-------
 192:                 next_state = __TOKENIZER_STATE.WHITESPACE
-------
--------------------------------------------------------------------------------
[0.01151 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 977] SDL nayajson:193: 
--------------------------------------------------------------------------------
 189:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 190:         elif state == __TOKENIZER_STATE.TRUE_3:
 191:             if char == 'e':
 192:                 next_state = __TOKENIZER_STATE.WHITESPACE
~193:                 pass
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
 195:             else:
 196:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 197:         elif state == __TOKENIZER_STATE.NULL_1:
 198:             if char == 'u':
-------
 193:                 completed = True
-------
--------------------------------------------------------------------------------
[0.01163 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 978] SDL nayajson:194: 
--------------------------------------------------------------------------------
 190:         elif state == __TOKENIZER_STATE.TRUE_3:
 191:             if char == 'e':
 192:                 next_state = __TOKENIZER_STATE.WHITESPACE
 193:                 completed = True
~194:                 pass
 195:             else:
 196:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 197:         elif state == __TOKENIZER_STATE.NULL_1:
 198:             if char == 'u':
 199:                 next_state = __TOKENIZER_STATE.NULL_2
-------
 194:                 now_token = (TOKEN_TYPE.BOOLEAN, True)
-------
--------------------------------------------------------------------------------
[0.01135 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 979] SDL nayajson:199: 
--------------------------------------------------------------------------------
 195:             else:
 196:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 197:         elif state == __TOKENIZER_STATE.NULL_1:
 198:             if char == 'u':
~199:                 pass
 200:             else:
 201:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 202:         elif state == __TOKENIZER_STATE.NULL_2:
 203:             if char == 'l':
 204:                 next_state = __TOKENIZER_STATE.NULL_3
-------
 199:                 next_state = __TOKENIZER_STATE.NULL_2
-------
--------------------------------------------------------------------------------
[0.01263 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 980] SDL nayajson:204: 
--------------------------------------------------------------------------------
 200:             else:
 201:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 202:         elif state == __TOKENIZER_STATE.NULL_2:
 203:             if char == 'l':
~204:                 pass
 205:             else:
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 207:         elif state == __TOKENIZER_STATE.NULL_3:
 208:             if char == 'l':
 209:                 next_state = __TOKENIZER_STATE.WHITESPACE
-------
 204:                 next_state = __TOKENIZER_STATE.NULL_3
-------
--------------------------------------------------------------------------------
[0.01384 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 981] SDL nayajson:209: 
--------------------------------------------------------------------------------
 205:             else:
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 207:         elif state == __TOKENIZER_STATE.NULL_3:
 208:             if char == 'l':
~209:                 pass
 210:                 completed = True
 211:                 now_token = (TOKEN_TYPE.NULL, None)
 212:             else:
 213:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 214:         elif state == __TOKENIZER_STATE.STRING:
-------
 209:                 next_state = __TOKENIZER_STATE.WHITESPACE
-------
--------------------------------------------------------------------------------
[0.01383 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 982] SDL nayajson:210: 
--------------------------------------------------------------------------------
 206:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 207:         elif state == __TOKENIZER_STATE.NULL_3:
 208:             if char == 'l':
 209:                 next_state = __TOKENIZER_STATE.WHITESPACE
~210:                 pass
 211:                 now_token = (TOKEN_TYPE.NULL, None)
 212:             else:
 213:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 214:         elif state == __TOKENIZER_STATE.STRING:
 215:             if char == '"':
-------
 210:                 completed = True
-------
--------------------------------------------------------------------------------
[0.01332 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 983] SDL nayajson:211: 
--------------------------------------------------------------------------------
 207:         elif state == __TOKENIZER_STATE.NULL_3:
 208:             if char == 'l':
 209:                 next_state = __TOKENIZER_STATE.WHITESPACE
 210:                 completed = True
~211:                 pass
 212:             else:
 213:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 214:         elif state == __TOKENIZER_STATE.STRING:
 215:             if char == '"':
 216:                 completed = True
-------
 211:                 now_token = (TOKEN_TYPE.NULL, None)
-------
--------------------------------------------------------------------------------
[0.01280 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [# 984] SDL nayajson:216: 
--------------------------------------------------------------------------------
 212:             else:
 213:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 214:         elif state == __TOKENIZER_STATE.STRING:
 215:             if char == '"':
~216:                 pass
 217:                 now_token = (TOKEN_TYPE.STRING, ''.join(token))
 218:                 next_state = __TOKENIZER_STATE.STRING_END
 219:             elif char == '\\':
 220:                 next_state = __TOKENIZER_STATE.STRING_ESCAPE
 221:             else:
-------
 216:                 completed = True
-------
--------------------------------------------------------------------------------
[0.00792 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 985] SDL nayajson:217: 
--------------------------------------------------------------------------------
 213:                 raise ValueError("Invalid JSON character: '{0}'".format(char))
 214:         elif state == __TOKENIZER_STATE.STRING:
 215:             if char == '"':
 216:                 completed = True
~217:                 pass
 218:                 next_state = __TOKENIZER_STATE.STRING_END
 219:             elif char == '\\':
 220:                 next_state = __TOKENIZER_STATE.STRING_ESCAPE
 221:             else:
 222:                 add_char = True
-------
 217:                 now_token = (TOKEN_TYPE.STRING, ''.join(token))
-------
--------------------------------------------------------------------------------
[0.01258 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 986] SDL nayajson:218: 
--------------------------------------------------------------------------------
 214:         elif state == __TOKENIZER_STATE.STRING:
 215:             if char == '"':
 216:                 completed = True
 217:                 now_token = (TOKEN_TYPE.STRING, ''.join(token))
~218:                 pass
 219:             elif char == '\\':
 220:                 next_state = __TOKENIZER_STATE.STRING_ESCAPE
 221:             else:
 222:                 add_char = True
 223:         elif state == __TOKENIZER_STATE.STRING_END:
-------
 218:                 next_state = __TOKENIZER_STATE.STRING_END
-------
--------------------------------------------------------------------------------
[0.01013 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 987] SDL nayajson:220: 
--------------------------------------------------------------------------------
 216:                 completed = True
 217:                 now_token = (TOKEN_TYPE.STRING, ''.join(token))
 218:                 next_state = __TOKENIZER_STATE.STRING_END
 219:             elif char == '\\':
~220:                 pass
 221:             else:
 222:                 add_char = True
 223:         elif state == __TOKENIZER_STATE.STRING_END:
 224:             if is_delimiter(char):
 225:                 advance = False
-------
 220:                 next_state = __TOKENIZER_STATE.STRING_ESCAPE
-------
--------------------------------------------------------------------------------
[0.01904 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 988] SDL nayajson:222: 
--------------------------------------------------------------------------------
 218:                 next_state = __TOKENIZER_STATE.STRING_END
 219:             elif char == '\\':
 220:                 next_state = __TOKENIZER_STATE.STRING_ESCAPE
 221:             else:
~222:                 pass
 223:         elif state == __TOKENIZER_STATE.STRING_END:
 224:             if is_delimiter(char):
 225:                 advance = False
 226:                 next_state = __TOKENIZER_STATE.WHITESPACE
 227:             else:
-------
 222:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.00880 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 989] SDL nayajson:225: 
--------------------------------------------------------------------------------
 221:             else:
 222:                 add_char = True
 223:         elif state == __TOKENIZER_STATE.STRING_END:
 224:             if is_delimiter(char):
~225:                 pass
 226:                 next_state = __TOKENIZER_STATE.WHITESPACE
 227:             else:
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
 230:             next_state = __TOKENIZER_STATE.STRING
-------
 225:                 advance = False
-------
--------------------------------------------------------------------------------
[0.00888 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [# 990] SDL nayajson:226: 
--------------------------------------------------------------------------------
 222:                 add_char = True
 223:         elif state == __TOKENIZER_STATE.STRING_END:
 224:             if is_delimiter(char):
 225:                 advance = False
~226:                 pass
 227:             else:
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
 230:             next_state = __TOKENIZER_STATE.STRING
 231:             if (char == '\\' or char == '"'):
-------
 226:                 next_state = __TOKENIZER_STATE.WHITESPACE
-------
--------------------------------------------------------------------------------
[5.00694 s] timeout
   - [# 991] SDL nayajson:230: 
--------------------------------------------------------------------------------
 226:                 next_state = __TOKENIZER_STATE.WHITESPACE
 227:             else:
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
~230:             pass
 231:             if (char == '\\' or char == '"'):
 232:                 add_char = True
 233:             elif char == 'b':
 234:                 char = '\x08'
 235:                 add_char = True
-------
 230:             next_state = __TOKENIZER_STATE.STRING
-------
--------------------------------------------------------------------------------
[0.02066 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 992] SDL nayajson:232: 
--------------------------------------------------------------------------------
 228:                 raise ValueError("Expected whitespace or an operator after strin.  Got '{}'".format(char))
 229:         elif state == __TOKENIZER_STATE.STRING_ESCAPE:
 230:             next_state = __TOKENIZER_STATE.STRING
 231:             if (char == '\\' or char == '"'):
~232:                 pass
 233:             elif char == 'b':
 234:                 char = '\x08'
 235:                 add_char = True
 236:             elif char == 'f':
 237:                 char = '\x0c'
-------
 232:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.01896 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 993] SDL nayajson:234: 
--------------------------------------------------------------------------------
 230:             next_state = __TOKENIZER_STATE.STRING
 231:             if (char == '\\' or char == '"'):
 232:                 add_char = True
 233:             elif char == 'b':
~234:                 pass
 235:                 add_char = True
 236:             elif char == 'f':
 237:                 char = '\x0c'
 238:                 add_char = True
 239:             elif char == 'n':
-------
 234:                 char = '\x08'
-------
--------------------------------------------------------------------------------
[0.01823 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 994] SDL nayajson:235: 
--------------------------------------------------------------------------------
 231:             if (char == '\\' or char == '"'):
 232:                 add_char = True
 233:             elif char == 'b':
 234:                 char = '\x08'
~235:                 pass
 236:             elif char == 'f':
 237:                 char = '\x0c'
 238:                 add_char = True
 239:             elif char == 'n':
 240:                 char = '\n'
-------
 235:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.02210 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 995] SDL nayajson:237: 
--------------------------------------------------------------------------------
 233:             elif char == 'b':
 234:                 char = '\x08'
 235:                 add_char = True
 236:             elif char == 'f':
~237:                 pass
 238:                 add_char = True
 239:             elif char == 'n':
 240:                 char = '\n'
 241:                 add_char = True
 242:             elif char == 't':
-------
 237:                 char = '\x0c'
-------
--------------------------------------------------------------------------------
[0.02209 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 996] SDL nayajson:238: 
--------------------------------------------------------------------------------
 234:                 char = '\x08'
 235:                 add_char = True
 236:             elif char == 'f':
 237:                 char = '\x0c'
~238:                 pass
 239:             elif char == 'n':
 240:                 char = '\n'
 241:                 add_char = True
 242:             elif char == 't':
 243:                 char = '\t'
-------
 238:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.02155 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 997] SDL nayajson:240: 
--------------------------------------------------------------------------------
 236:             elif char == 'f':
 237:                 char = '\x0c'
 238:                 add_char = True
 239:             elif char == 'n':
~240:                 pass
 241:                 add_char = True
 242:             elif char == 't':
 243:                 char = '\t'
 244:                 add_char = True
 245:             elif char == 'r':
-------
 240:                 char = '\n'
-------
--------------------------------------------------------------------------------
[0.02015 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 998] SDL nayajson:241: 
--------------------------------------------------------------------------------
 237:                 char = '\x0c'
 238:                 add_char = True
 239:             elif char == 'n':
 240:                 char = '\n'
~241:                 pass
 242:             elif char == 't':
 243:                 char = '\t'
 244:                 add_char = True
 245:             elif char == 'r':
 246:                 char = '\r'
-------
 241:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.01913 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [# 999] SDL nayajson:243: 
--------------------------------------------------------------------------------
 239:             elif char == 'n':
 240:                 char = '\n'
 241:                 add_char = True
 242:             elif char == 't':
~243:                 pass
 244:                 add_char = True
 245:             elif char == 'r':
 246:                 char = '\r'
 247:                 add_char = True
 248:             elif char == '/':
-------
 243:                 char = '\t'
-------
--------------------------------------------------------------------------------
[0.01885 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#1000] SDL nayajson:244: 
--------------------------------------------------------------------------------
 240:                 char = '\n'
 241:                 add_char = True
 242:             elif char == 't':
 243:                 char = '\t'
~244:                 pass
 245:             elif char == 'r':
 246:                 char = '\r'
 247:                 add_char = True
 248:             elif char == '/':
 249:                 char = '/'
-------
 244:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.01876 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#1001] SDL nayajson:246: 
--------------------------------------------------------------------------------
 242:             elif char == 't':
 243:                 char = '\t'
 244:                 add_char = True
 245:             elif char == 'r':
~246:                 pass
 247:                 add_char = True
 248:             elif char == '/':
 249:                 char = '/'
 250:                 add_char = True
 251:             elif char == 'u':
-------
 246:                 char = '\r'
-------
--------------------------------------------------------------------------------
[0.01962 s] +survived
   - [#1002] SDL nayajson:247: 
--------------------------------------------------------------------------------
 243:                 char = '\t'
 244:                 add_char = True
 245:             elif char == 'r':
 246:                 char = '\r'
~247:                 pass
 248:             elif char == '/':
 249:                 char = '/'
 250:                 add_char = True
 251:             elif char == 'u':
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
-------
 247:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.01800 s] +survived
   - [#1003] SDL nayajson:249: 
--------------------------------------------------------------------------------
 245:             elif char == 'r':
 246:                 char = '\r'
 247:                 add_char = True
 248:             elif char == '/':
~249:                 pass
 250:                 add_char = True
 251:             elif char == 'u':
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
 253:                 charcode = 0
 254:             else:
-------
 249:                 char = '/'
-------
--------------------------------------------------------------------------------
[0.01702 s] +survived
   - [#1004] SDL nayajson:250: 
--------------------------------------------------------------------------------
 246:                 char = '\r'
 247:                 add_char = True
 248:             elif char == '/':
 249:                 char = '/'
~250:                 pass
 251:             elif char == 'u':
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
 253:                 charcode = 0
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
-------
 250:                 add_char = True
-------
--------------------------------------------------------------------------------
[0.02003 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#1005] SDL nayajson:252: 
--------------------------------------------------------------------------------
 248:             elif char == '/':
 249:                 char = '/'
 250:                 add_char = True
 251:             elif char == 'u':
~252:                 pass
 253:                 charcode = 0
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
-------
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
-------
--------------------------------------------------------------------------------
[0.02048 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#1006] SDL nayajson:253: 
--------------------------------------------------------------------------------
 249:                 char = '/'
 250:                 add_char = True
 251:             elif char == 'u':
 252:                 next_state = __TOKENIZER_STATE.UNICODE_1
~253:                 pass
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
-------
 253:                 charcode = 0
-------
--------------------------------------------------------------------------------
[0.01840 s] +survived
   - [#1007] SDL nayajson:258: 
--------------------------------------------------------------------------------
 254:             else:
 255:                 raise ValueError('Invalid string escape: {}'.format(char))
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
~258:                 pass
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
-------
 258:                 charcode = ord(char) - 48 * 4096
-------
--------------------------------------------------------------------------------
[0.02049 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#1008] SDL nayajson:260: 
--------------------------------------------------------------------------------
 256:         elif state == __TOKENIZER_STATE.UNICODE_1:
 257:             if char in '0123456789':
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
~260:                 pass
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
-------
 260:                 charcode = ord(char) - 87 * 4096
-------
--------------------------------------------------------------------------------
[0.01892 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#1009] SDL nayajson:262: 
--------------------------------------------------------------------------------
 258:                 charcode = ord(char) - 48 * 4096
 259:             elif char in 'abcdef':
 260:                 charcode = ord(char) - 87 * 4096
 261:             elif char in 'ABCDEF':
~262:                 pass
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
-------
 262:                 charcode = ord(char) - 55 * 4096
-------
--------------------------------------------------------------------------------
[0.01892 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#1010] SDL nayajson:265: 
--------------------------------------------------------------------------------
 261:             elif char in 'ABCDEF':
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
~265:             pass
 266:             char = ''
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
-------
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
-------
--------------------------------------------------------------------------------
[0.01808 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#1011] SDL nayajson:266: 
--------------------------------------------------------------------------------
 262:                 charcode = ord(char) - 55 * 4096
 263:             else:
 264:                 raise ValueError('Invalid character code: {}'.format(char))
 265:             next_state = __TOKENIZER_STATE.UNICODE_2
~266:             pass
 267:         elif state == __TOKENIZER_STATE.UNICODE_2:
 268:             if char in '0123456789':
 269:                 charcode += ord(char) - 48 * 256
 270:             elif char in 'abcdef':
 271:                 charcode += ord(char) - 87 * 256
-------
 266:             char = ''
-------
--------------------------------------------------------------------------------
[0.01815 s] +survived
   - [#1012] SDL nayajson:276: 
--------------------------------------------------------------------------------
 272:             elif char in 'ABCDEF':
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
~276:             pass
 277:             char = ''
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
-------
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
-------
--------------------------------------------------------------------------------
[0.01937 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#1013] SDL nayajson:277: 
--------------------------------------------------------------------------------
 273:                 charcode += ord(char) - 55 * 256
 274:             else:
 275:                 raise ValueError('Invalid character code: {}'.format(char))
 276:             next_state = __TOKENIZER_STATE.UNICODE_3
~277:             pass
 278:         elif state == __TOKENIZER_STATE.UNICODE_3:
 279:             if char in '0123456789':
 280:                 charcode += ord(char) - 48 * 16
 281:             elif char in 'abcdef':
 282:                 charcode += ord(char) - 87 * 16
-------
 277:             char = ''
-------
--------------------------------------------------------------------------------
[0.01792 s] +survived
   - [#1014] SDL nayajson:287: 
--------------------------------------------------------------------------------
 283:             elif char in 'ABCDEF':
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
~287:             pass
 288:             char = ''
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
 290:             if char in '0123456789':
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
-------
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
-------
--------------------------------------------------------------------------------
[0.01852 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#1015] SDL nayajson:288: 
--------------------------------------------------------------------------------
 284:                 charcode += ord(char) - 55 * 16
 285:             else:
 286:                 raise ValueError('Invalid character code: {}'.format(char))
 287:             next_state = __TOKENIZER_STATE.UNICODE_4
~288:             pass
 289:         elif state == __TOKENIZER_STATE.UNICODE_4:
 290:             if char in '0123456789':
 291:                 charcode += ord(char) - 48
 292:             elif char in 'abcdef':
 293:                 charcode += ord(char) - 87
-------
 288:             char = ''
-------
--------------------------------------------------------------------------------
[0.01824 s] +survived
   - [#1016] SDL nayajson:298: 
--------------------------------------------------------------------------------
 294:             elif char in 'ABCDEF':
 295:                 charcode += ord(char) - 55
 296:             else:
 297:                 raise ValueError('Invalid character code: {}'.format(char))
~298:             pass
 299:             char = chr(charcode)
 300:             add_char = True
 301:         if add_char:
 302:             token.append(char)
 303:         return (advance, next_state, charcode)
-------
 298:             next_state = __TOKENIZER_STATE.STRING
-------
--------------------------------------------------------------------------------
[0.02417 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#1017] SDL nayajson:299: 
--------------------------------------------------------------------------------
 295:                 charcode += ord(char) - 55
 296:             else:
 297:                 raise ValueError('Invalid character code: {}'.format(char))
 298:             next_state = __TOKENIZER_STATE.STRING
~299:             pass
 300:             add_char = True
 301:         if add_char:
 302:             token.append(char)
 303:         return (advance, next_state, charcode)
 304:     state = __TOKENIZER_STATE.WHITESPACE
-------
 299:             char = chr(charcode)
-------
--------------------------------------------------------------------------------
[0.02267 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#1018] SDL nayajson:300: 
--------------------------------------------------------------------------------
 296:             else:
 297:                 raise ValueError('Invalid character code: {}'.format(char))
 298:             next_state = __TOKENIZER_STATE.STRING
 299:             char = chr(charcode)
~300:             pass
 301:         if add_char:
 302:             token.append(char)
 303:         return (advance, next_state, charcode)
 304:     state = __TOKENIZER_STATE.WHITESPACE
 305:     char = stream.read(1)
-------
 300:             add_char = True
-------
--------------------------------------------------------------------------------
[0.02025 s] killed by test_string_parsing (nayajson_test.TestJsonTokenization)
   - [#1019] SDL nayajson:302: 
--------------------------------------------------------------------------------
 298:             next_state = __TOKENIZER_STATE.STRING
 299:             char = chr(charcode)
 300:             add_char = True
 301:         if add_char:
~302:             pass
 303:         return (advance, next_state, charcode)
 304:     state = __TOKENIZER_STATE.WHITESPACE
 305:     char = stream.read(1)
 306:     index = 0
 307:     while char:
-------
 302:             token.append(char)
-------
--------------------------------------------------------------------------------
[0.00798 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1020] SDL nayajson:303: 
--------------------------------------------------------------------------------
 299:             char = chr(charcode)
 300:             add_char = True
 301:         if add_char:
 302:             token.append(char)
~303:         pass
 304:     state = __TOKENIZER_STATE.WHITESPACE
 305:     char = stream.read(1)
 306:     index = 0
 307:     while char:
 308:         try:
-------
 303:         return (advance, next_state, charcode)
-------
--------------------------------------------------------------------------------
[0.00722 s] incompetent
   - [#1021] SDL nayajson:304: 
--------------------------------------------------------------------------------
 300:             add_char = True
 301:         if add_char:
 302:             token.append(char)
 303:         return (advance, next_state, charcode)
~304:     pass
 305:     char = stream.read(1)
 306:     index = 0
 307:     while char:
 308:         try:
 309:             (advance, state, charcode) = process_char(char, charcode)
-------
 304:     state = __TOKENIZER_STATE.WHITESPACE
-------
--------------------------------------------------------------------------------
[0.00840 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1022] SDL nayajson:305: 
--------------------------------------------------------------------------------
 301:         if add_char:
 302:             token.append(char)
 303:         return (advance, next_state, charcode)
 304:     state = __TOKENIZER_STATE.WHITESPACE
~305:     pass
 306:     index = 0
 307:     while char:
 308:         try:
 309:             (advance, state, charcode) = process_char(char, charcode)
 310:         except ValueError as e:
-------
 305:     char = stream.read(1)
-------
--------------------------------------------------------------------------------
[0.00822 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1023] SDL nayajson:306: 
--------------------------------------------------------------------------------
 302:             token.append(char)
 303:         return (advance, next_state, charcode)
 304:     state = __TOKENIZER_STATE.WHITESPACE
 305:     char = stream.read(1)
~306:     pass
 307:     while char:
 308:         try:
 309:             (advance, state, charcode) = process_char(char, charcode)
 310:         except ValueError as e:
 311:             raise ValueError(''.join([e.args[0], ' at index {}'.format(index)]))
-------
 306:     index = 0
-------
--------------------------------------------------------------------------------
[0.00849 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1024] SDL nayajson:309: 
--------------------------------------------------------------------------------
 305:     char = stream.read(1)
 306:     index = 0
 307:     while char:
 308:         try:
~309:             pass
 310:         except ValueError as e:
 311:             raise ValueError(''.join([e.args[0], ' at index {}'.format(index)]))
 312:         if completed:
 313:             completed = False
 314:             token = []
-------
 309:             (advance, state, charcode) = process_char(char, charcode)
-------
--------------------------------------------------------------------------------
[0.00952 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1025] SDL nayajson:313: 
--------------------------------------------------------------------------------
 309:             (advance, state, charcode) = process_char(char, charcode)
 310:         except ValueError as e:
 311:             raise ValueError(''.join([e.args[0], ' at index {}'.format(index)]))
 312:         if completed:
~313:             pass
 314:             token = []
 315:             yield now_token
 316:         if advance:
 317:             char = stream.read(1)
 318:             index += 1
-------
 313:             completed = False
-------
--------------------------------------------------------------------------------
[0.00956 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1026] SDL nayajson:314: 
--------------------------------------------------------------------------------
 310:         except ValueError as e:
 311:             raise ValueError(''.join([e.args[0], ' at index {}'.format(index)]))
 312:         if completed:
 313:             completed = False
~314:             pass
 315:             yield now_token
 316:         if advance:
 317:             char = stream.read(1)
 318:             index += 1
 319:     process_char(' ', charcode)
-------
 314:             token = []
-------
--------------------------------------------------------------------------------
[0.01046 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1027] SDL nayajson:315: 
--------------------------------------------------------------------------------
 311:             raise ValueError(''.join([e.args[0], ' at index {}'.format(index)]))
 312:         if completed:
 313:             completed = False
 314:             token = []
~315:             pass
 316:         if advance:
 317:             char = stream.read(1)
 318:             index += 1
 319:     process_char(' ', charcode)
 320:     if completed:
-------
 315:             yield now_token
-------
--------------------------------------------------------------------------------
[0.00794 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1028] SDL nayajson:317: 
--------------------------------------------------------------------------------
 313:             completed = False
 314:             token = []
 315:             yield now_token
 316:         if advance:
~317:             pass
 318:             index += 1
 319:     process_char(' ', charcode)
 320:     if completed:
 321:         yield now_token
 322: def parse_string(string):
-------
 317:             char = stream.read(1)
-------
--------------------------------------------------------------------------------
[5.00327 s] timeout
   - [#1029] SDL nayajson:319: 
--------------------------------------------------------------------------------
 315:             yield now_token
 316:         if advance:
 317:             char = stream.read(1)
 318:             index += 1
~319:     pass
 320:     if completed:
 321:         yield now_token
 322: def parse_string(string):
 323:     return parse(StringIO(string))
 324: def parse(file):
-------
 319:     process_char(' ', charcode)
-------
--------------------------------------------------------------------------------
[0.01074 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [#1030] SDL nayajson:321: 
--------------------------------------------------------------------------------
 317:             char = stream.read(1)
 318:             index += 1
 319:     process_char(' ', charcode)
 320:     if completed:
~321:         pass
 322: def parse_string(string):
 323:     return parse(StringIO(string))
 324: def parse(file):
 325:     token_stream = tokenize(file)
 326:     val = __parse(token_stream, next(token_stream))
-------
 321:         yield now_token
-------
--------------------------------------------------------------------------------
[0.00975 s] killed by test_number_parsing (nayajson_test.TestJsonTokenization)
   - [#1031] SDL nayajson:323: 
--------------------------------------------------------------------------------
 319:     process_char(' ', charcode)
 320:     if completed:
 321:         yield now_token
 322: def parse_string(string):
~323:     pass
 324: def parse(file):
 325:     token_stream = tokenize(file)
 326:     val = __parse(token_stream, next(token_stream))
 327:     try:
 328:         next(token_stream)
-------
 323:     return parse(StringIO(string))
-------
--------------------------------------------------------------------------------
[0.00747 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1032] SDL nayajson:325: 
--------------------------------------------------------------------------------
 321:         yield now_token
 322: def parse_string(string):
 323:     return parse(StringIO(string))
 324: def parse(file):
~325:     pass
 326:     val = __parse(token_stream, next(token_stream))
 327:     try:
 328:         next(token_stream)
 329:     except StopIteration:
 330:         return val
-------
 325:     token_stream = tokenize(file)
-------
--------------------------------------------------------------------------------
[0.00817 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1033] SDL nayajson:326: 
--------------------------------------------------------------------------------
 322: def parse_string(string):
 323:     return parse(StringIO(string))
 324: def parse(file):
 325:     token_stream = tokenize(file)
~326:     pass
 327:     try:
 328:         next(token_stream)
 329:     except StopIteration:
 330:         return val
 331:     raise ValueError('Improperly closed JSON object')
-------
 326:     val = __parse(token_stream, next(token_stream))
-------
--------------------------------------------------------------------------------
[0.00805 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1034] SDL nayajson:328: 
--------------------------------------------------------------------------------
 324: def parse(file):
 325:     token_stream = tokenize(file)
 326:     val = __parse(token_stream, next(token_stream))
 327:     try:
~328:         pass
 329:     except StopIteration:
 330:         return val
 331:     raise ValueError('Improperly closed JSON object')
 332: def __parse(token_stream, first_token):
 333:     class KVP:
-------
 328:         next(token_stream)
-------
--------------------------------------------------------------------------------
[0.00730 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1035] SDL nayajson:330: 
--------------------------------------------------------------------------------
 326:     val = __parse(token_stream, next(token_stream))
 327:     try:
 328:         next(token_stream)
 329:     except StopIteration:
~330:         pass
 331:     raise ValueError('Improperly closed JSON object')
 332: def __parse(token_stream, first_token):
 333:     class KVP:
 334:         def __init__(self, key):
 335:             self.key = key
-------
 330:         return val
-------
--------------------------------------------------------------------------------
[0.00733 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1036] SDL nayajson:335: 
--------------------------------------------------------------------------------
 331:     raise ValueError('Improperly closed JSON object')
 332: def __parse(token_stream, first_token):
 333:     class KVP:
 334:         def __init__(self, key):
~335:             pass
 336:             self.value = None
 337:             self.set = False
 338:         def __str__(self):
 339:             if self.set:
 340:                 return '{}: {}'.format(self.key, self.value)
-------
 335:             self.key = key
-------
--------------------------------------------------------------------------------
[0.00970 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1037] SDL nayajson:336: 
--------------------------------------------------------------------------------
 332: def __parse(token_stream, first_token):
 333:     class KVP:
 334:         def __init__(self, key):
 335:             self.key = key
~336:             pass
 337:             self.set = False
 338:         def __str__(self):
 339:             if self.set:
 340:                 return '{}: {}'.format(self.key, self.value)
 341:             else:
-------
 336:             self.value = None
-------
--------------------------------------------------------------------------------
[0.01549 s] +survived
   - [#1038] SDL nayajson:337: 
--------------------------------------------------------------------------------
 333:     class KVP:
 334:         def __init__(self, key):
 335:             self.key = key
 336:             self.value = None
~337:             pass
 338:         def __str__(self):
 339:             if self.set:
 340:                 return '{}: {}'.format(self.key, self.value)
 341:             else:
 342:                 return '{}: <NULL>'.format(self.key)
-------
 337:             self.set = False
-------
--------------------------------------------------------------------------------
[0.00984 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1039] SDL nayajson:340: 
--------------------------------------------------------------------------------
 336:             self.value = None
 337:             self.set = False
 338:         def __str__(self):
 339:             if self.set:
~340:                 pass
 341:             else:
 342:                 return '{}: <NULL>'.format(self.key)
 343:     stack = []
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
-------
 340:                 return '{}: {}'.format(self.key, self.value)
-------
--------------------------------------------------------------------------------
[0.01635 s] +survived
   - [#1040] SDL nayajson:342: 
--------------------------------------------------------------------------------
 338:         def __str__(self):
 339:             if self.set:
 340:                 return '{}: {}'.format(self.key, self.value)
 341:             else:
~342:                 pass
 343:     stack = []
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
 346:         if token == '{':
 347:             stack.append({})
-------
 342:                 return '{}: <NULL>'.format(self.key)
-------
--------------------------------------------------------------------------------
[0.01573 s] +survived
   - [#1041] SDL nayajson:343: 
--------------------------------------------------------------------------------
 339:             if self.set:
 340:                 return '{}: {}'.format(self.key, self.value)
 341:             else:
 342:                 return '{}: <NULL>'.format(self.key)
~343:     pass
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
 346:         if token == '{':
 347:             stack.append({})
 348:         elif token == '[':
-------
 343:     stack = []
-------
--------------------------------------------------------------------------------
[0.00788 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1042] SDL nayajson:344: 
--------------------------------------------------------------------------------
 340:                 return '{}: {}'.format(self.key, self.value)
 341:             else:
 342:                 return '{}: <NULL>'.format(self.key)
 343:     stack = []
~344:     pass
 345:     if token_type == TOKEN_TYPE.OPERATOR:
 346:         if token == '{':
 347:             stack.append({})
 348:         elif token == '[':
 349:             stack.append([])
-------
 344:     (token_type, token) = first_token
-------
--------------------------------------------------------------------------------
[0.00724 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1043] SDL nayajson:347: 
--------------------------------------------------------------------------------
 343:     stack = []
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
 346:         if token == '{':
~347:             pass
 348:         elif token == '[':
 349:             stack.append([])
 350:         else:
 351:             raise ValueError("Expected object or array.  Got '{}'".format(token))
 352:     else:
-------
 347:             stack.append({})
-------
--------------------------------------------------------------------------------
[0.00944 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1044] SDL nayajson:349: 
--------------------------------------------------------------------------------
 345:     if token_type == TOKEN_TYPE.OPERATOR:
 346:         if token == '{':
 347:             stack.append({})
 348:         elif token == '[':
~349:             pass
 350:         else:
 351:             raise ValueError("Expected object or array.  Got '{}'".format(token))
 352:     else:
 353:         raise ValueError("Expected object or array.  Got '{}'".format(token))
 354:     (last_type, last_token) = (token_type, token)
-------
 349:             stack.append([])
-------
--------------------------------------------------------------------------------
[0.00739 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1045] SDL nayajson:354: 
--------------------------------------------------------------------------------
 350:         else:
 351:             raise ValueError("Expected object or array.  Got '{}'".format(token))
 352:     else:
 353:         raise ValueError("Expected object or array.  Got '{}'".format(token))
~354:     pass
 355:     try:
 356:         (token_type, token) = next(token_stream)
 357:     except StopIteration as e:
 358:         raise ValueError('Too many opening braces') from e
 359:     try:
-------
 354:     (last_type, last_token) = (token_type, token)
-------
--------------------------------------------------------------------------------
[0.00763 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1046] SDL nayajson:356: 
--------------------------------------------------------------------------------
 352:     else:
 353:         raise ValueError("Expected object or array.  Got '{}'".format(token))
 354:     (last_type, last_token) = (token_type, token)
 355:     try:
~356:         pass
 357:     except StopIteration as e:
 358:         raise ValueError('Too many opening braces') from e
 359:     try:
 360:         while True:
 361:             if isinstance(stack[(-1)], list):
-------
 356:         (token_type, token) = next(token_stream)
-------
--------------------------------------------------------------------------------
[0.00767 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1047] SDL nayajson:366: 
--------------------------------------------------------------------------------
 362:                 if last_type == TOKEN_TYPE.OPERATOR:
 363:                     if last_token == '[':
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
~366:                                 pass
 367:                             elif token == '[':
 368:                                 stack.append([])
 369:                             elif token != ']':
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
 371:                         else:
-------
 366:                                 stack.append({})
-------
--------------------------------------------------------------------------------
[0.01138 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1048] SDL nayajson:368: 
--------------------------------------------------------------------------------
 364:                         if token_type == TOKEN_TYPE.OPERATOR:
 365:                             if token == '{':
 366:                                 stack.append({})
 367:                             elif token == '[':
~368:                                 pass
 369:                             elif token != ']':
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
 371:                         else:
 372:                             stack.append(token)
 373:                     elif last_token == ',':
-------
 368:                                 stack.append([])
-------
--------------------------------------------------------------------------------
[0.01565 s] +survived
   - [#1049] SDL nayajson:372: 
--------------------------------------------------------------------------------
 368:                                 stack.append([])
 369:                             elif token != ']':
 370:                                 raise ValueError("Array must either be empty or contain a value.  Got '{}'".format(token))
 371:                         else:
~372:                             pass
 373:                     elif last_token == ',':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
 375:                             if token == '{':
 376:                                 stack.append({})
 377:                             elif token == '[':
-------
 372:                             stack.append(token)
-------
--------------------------------------------------------------------------------
[0.00775 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1050] SDL nayajson:376: 
--------------------------------------------------------------------------------
 372:                             stack.append(token)
 373:                     elif last_token == ',':
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
 375:                             if token == '{':
~376:                                 pass
 377:                             elif token == '[':
 378:                                 stack.append([])
 379:                             else:
 380:                                 raise ValueError("Array value expected.  Got '{}'".format(token))
 381:                         else:
-------
 376:                                 stack.append({})
-------
--------------------------------------------------------------------------------
[0.01280 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1051] SDL nayajson:378: 
--------------------------------------------------------------------------------
 374:                         if token_type == TOKEN_TYPE.OPERATOR:
 375:                             if token == '{':
 376:                                 stack.append({})
 377:                             elif token == '[':
~378:                                 pass
 379:                             else:
 380:                                 raise ValueError("Array value expected.  Got '{}'".format(token))
 381:                         else:
 382:                             stack.append(token)
 383:                     elif last_token == ']':
-------
 378:                                 stack.append([])
-------
--------------------------------------------------------------------------------
[0.00863 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1052] SDL nayajson:382: 
--------------------------------------------------------------------------------
 378:                                 stack.append([])
 379:                             else:
 380:                                 raise ValueError("Array value expected.  Got '{}'".format(token))
 381:                         else:
~382:                             pass
 383:                     elif last_token == ']':
 384:                         value = stack.pop()
 385:                         if len(stack) == 0:
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
-------
 382:                             stack.append(token)
-------
--------------------------------------------------------------------------------
[0.00783 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1053] SDL nayajson:384: 
--------------------------------------------------------------------------------
 380:                                 raise ValueError("Array value expected.  Got '{}'".format(token))
 381:                         else:
 382:                             stack.append(token)
 383:                     elif last_token == ']':
~384:                         pass
 385:                         if len(stack) == 0:
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
-------
 384:                         value = stack.pop()
-------
--------------------------------------------------------------------------------
[0.00842 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1054] SDL nayajson:386: 
--------------------------------------------------------------------------------
 382:                             stack.append(token)
 383:                     elif last_token == ']':
 384:                         value = stack.pop()
 385:                         if len(stack) == 0:
~386:                             pass
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
-------
 386:                             return value
-------
--------------------------------------------------------------------------------
[0.01075 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1055] SDL nayajson:388: 
--------------------------------------------------------------------------------
 384:                         value = stack.pop()
 385:                         if len(stack) == 0:
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
~388:                             pass
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
-------
 388:                             stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.00942 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1056] SDL nayajson:390: 
--------------------------------------------------------------------------------
 386:                             return value
 387:                         if isinstance(stack[(-1)], list):
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
~390:                             pass
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
-------
 390:                             stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01361 s] +survived
   - [#1057] SDL nayajson:392: 
--------------------------------------------------------------------------------
 388:                             stack[(-1)].append(value)
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
~392:                             pass
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
-------
 392:                             stack[(-1)].value = value
-------
--------------------------------------------------------------------------------
[0.01368 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1058] SDL nayajson:393: 
--------------------------------------------------------------------------------
 389:                         elif isinstance(stack[(-1)], dict):
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
~393:                             pass
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
 398:                                 stack[(-1)].append(value)
-------
 393:                             stack[(-1)].set = True
-------
--------------------------------------------------------------------------------
[0.01628 s] +survived
   - [#1059] SDL nayajson:394: 
--------------------------------------------------------------------------------
 390:                             stack[(-1)][value.key] = value.value
 391:                         elif isinstance(stack[(-1)], KVP):
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
~394:                             pass
 395:                             if len(stack) == 0:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
 398:                                 stack[(-1)].append(value)
 399:                             elif isinstance(stack[(-1)], dict):
-------
 394:                             value = stack.pop()
-------
--------------------------------------------------------------------------------
[0.01241 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1060] SDL nayajson:396: 
--------------------------------------------------------------------------------
 392:                             stack[(-1)].value = value
 393:                             stack[(-1)].set = True
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
~396:                                 pass
 397:                             if isinstance(stack[(-1)], list):
 398:                                 stack[(-1)].append(value)
 399:                             elif isinstance(stack[(-1)], dict):
 400:                                 stack[(-1)][value.key] = value.value
 401:                             else:
-------
 396:                                 return value
-------
--------------------------------------------------------------------------------
[0.01637 s] +survived
   - [#1061] SDL nayajson:398: 
--------------------------------------------------------------------------------
 394:                             value = stack.pop()
 395:                             if len(stack) == 0:
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
~398:                                 pass
 399:                             elif isinstance(stack[(-1)], dict):
 400:                                 stack[(-1)][value.key] = value.value
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
-------
 398:                                 stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.01673 s] +survived
   - [#1062] SDL nayajson:400: 
--------------------------------------------------------------------------------
 396:                                 return value
 397:                             if isinstance(stack[(-1)], list):
 398:                                 stack[(-1)].append(value)
 399:                             elif isinstance(stack[(-1)], dict):
~400:                                 pass
 401:                             else:
 402:                                 raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 403:                         else:
 404:                             raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 405:                     elif last_token == '}':
-------
 400:                                 stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01417 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1063] SDL nayajson:416: 
--------------------------------------------------------------------------------
 412:                 if last_type == TOKEN_TYPE.OPERATOR:
 413:                     if last_token == '{':
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
~416:                                 pass
 417:                             elif token == '[':
 418:                                 stack.append([])
 419:                             elif token != '}':
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
 421:                         elif token_type == TOKEN_TYPE.STRING:
-------
 416:                                 stack.append({})
-------
--------------------------------------------------------------------------------
[0.01823 s] +survived
   - [#1064] SDL nayajson:418: 
--------------------------------------------------------------------------------
 414:                         if token_type == TOKEN_TYPE.OPERATOR:
 415:                             if token == '{':
 416:                                 stack.append({})
 417:                             elif token == '[':
~418:                                 pass
 419:                             elif token != '}':
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
 421:                         elif token_type == TOKEN_TYPE.STRING:
 422:                             stack.append(KVP(token))
 423:                         else:
-------
 418:                                 stack.append([])
-------
--------------------------------------------------------------------------------
[0.01635 s] +survived
   - [#1065] SDL nayajson:422: 
--------------------------------------------------------------------------------
 418:                                 stack.append([])
 419:                             elif token != '}':
 420:                                 raise ValueError("Object must either be empty or contain key value pairs.  Got '{}'".format(token))
 421:                         elif token_type == TOKEN_TYPE.STRING:
~422:                             pass
 423:                         else:
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 425:                     elif last_token == ',':
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
 427:                             if token == '{':
-------
 422:                             stack.append(KVP(token))
-------
--------------------------------------------------------------------------------
[0.01001 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1066] SDL nayajson:428: 
--------------------------------------------------------------------------------
 424:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 425:                     elif last_token == ',':
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
 427:                             if token == '{':
~428:                                 pass
 429:                             elif token == '[':
 430:                                 stack.append([])
 431:                             else:
 432:                                 raise ValueError("Object key expected.  Got '{}'".format(token))
 433:                         elif token_type == TOKEN_TYPE.STRING:
-------
 428:                                 stack.append({})
-------
--------------------------------------------------------------------------------
[0.01625 s] +survived
   - [#1067] SDL nayajson:430: 
--------------------------------------------------------------------------------
 426:                         if token_type == TOKEN_TYPE.OPERATOR:
 427:                             if token == '{':
 428:                                 stack.append({})
 429:                             elif token == '[':
~430:                                 pass
 431:                             else:
 432:                                 raise ValueError("Object key expected.  Got '{}'".format(token))
 433:                         elif token_type == TOKEN_TYPE.STRING:
 434:                             stack.append(KVP(token))
 435:                         else:
-------
 430:                                 stack.append([])
-------
--------------------------------------------------------------------------------
[0.01657 s] +survived
   - [#1068] SDL nayajson:434: 
--------------------------------------------------------------------------------
 430:                                 stack.append([])
 431:                             else:
 432:                                 raise ValueError("Object key expected.  Got '{}'".format(token))
 433:                         elif token_type == TOKEN_TYPE.STRING:
~434:                             pass
 435:                         else:
 436:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 437:                     elif last_token == '}':
 438:                         value = stack.pop()
 439:                         if len(stack) == 0:
-------
 434:                             stack.append(KVP(token))
-------
--------------------------------------------------------------------------------
[0.00992 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1069] SDL nayajson:438: 
--------------------------------------------------------------------------------
 434:                             stack.append(KVP(token))
 435:                         else:
 436:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 437:                     elif last_token == '}':
~438:                         pass
 439:                         if len(stack) == 0:
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
-------
 438:                         value = stack.pop()
-------
--------------------------------------------------------------------------------
[0.01032 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1070] SDL nayajson:440: 
--------------------------------------------------------------------------------
 436:                             raise ValueError("Object keys must be strings.  Got '{}'".format(token))
 437:                     elif last_token == '}':
 438:                         value = stack.pop()
 439:                         if len(stack) == 0:
~440:                             pass
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
-------
 440:                             return value
-------
--------------------------------------------------------------------------------
[0.01886 s] +survived
   - [#1071] SDL nayajson:442: 
--------------------------------------------------------------------------------
 438:                         value = stack.pop()
 439:                         if len(stack) == 0:
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
~442:                             pass
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
-------
 442:                             stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.01554 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1072] SDL nayajson:444: 
--------------------------------------------------------------------------------
 440:                             return value
 441:                         if isinstance(stack[(-1)], list):
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
~444:                             pass
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
-------
 444:                             stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01635 s] +survived
   - [#1073] SDL nayajson:446: 
--------------------------------------------------------------------------------
 442:                             stack[(-1)].append(value)
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
~446:                             pass
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
-------
 446:                             stack[(-1)].value = value
-------
--------------------------------------------------------------------------------
[0.01005 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1074] SDL nayajson:447: 
--------------------------------------------------------------------------------
 443:                         elif isinstance(stack[(-1)], dict):
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
~447:                             pass
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
 452:                                 stack[(-1)].append(value)
-------
 447:                             stack[(-1)].set = True
-------
--------------------------------------------------------------------------------
[0.01624 s] +survived
   - [#1075] SDL nayajson:448: 
--------------------------------------------------------------------------------
 444:                             stack[(-1)][value.key] = value.value
 445:                         elif isinstance(stack[(-1)], KVP):
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
~448:                             pass
 449:                             if len(stack) == 0:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
 452:                                 stack[(-1)].append(value)
 453:                             elif isinstance(stack[(-1)], dict):
-------
 448:                             value = stack.pop()
-------
--------------------------------------------------------------------------------
[0.01032 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1076] SDL nayajson:450: 
--------------------------------------------------------------------------------
 446:                             stack[(-1)].value = value
 447:                             stack[(-1)].set = True
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
~450:                                 pass
 451:                             if isinstance(stack[(-1)], list):
 452:                                 stack[(-1)].append(value)
 453:                             elif isinstance(stack[(-1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
-------
 450:                                 return value
-------
--------------------------------------------------------------------------------
[0.01668 s] +survived
   - [#1077] SDL nayajson:452: 
--------------------------------------------------------------------------------
 448:                             value = stack.pop()
 449:                             if len(stack) == 0:
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
~452:                                 pass
 453:                             elif isinstance(stack[(-1)], dict):
 454:                                 stack[(-1)][value.key] = value.value
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 457:                     elif last_token == ']':
-------
 452:                                 stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.01681 s] +survived
   - [#1078] SDL nayajson:454: 
--------------------------------------------------------------------------------
 450:                                 return value
 451:                             if isinstance(stack[(-1)], list):
 452:                                 stack[(-1)].append(value)
 453:                             elif isinstance(stack[(-1)], dict):
~454:                                 pass
 455:                             else:
 456:                                 raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 457:                     elif last_token == ']':
 458:                         raise ValueError("Object closed with a ']'")
 459:                     else:
-------
 454:                                 stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01035 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1079] SDL nayajson:466: 
--------------------------------------------------------------------------------
 462:                 if stack[(-1)].set:
 463:                     if token_type == TOKEN_TYPE.OPERATOR:
 464:                         if (token != '}' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
~466:                         pass
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
 471:                         elif isinstance(stack[(-1)], dict):
-------
 466:                         value = stack.pop()
-------
--------------------------------------------------------------------------------
[0.01067 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1080] SDL nayajson:468: 
--------------------------------------------------------------------------------
 464:                         if (token != '}' and token != ','):
 465:                             raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
~468:                             pass
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
-------
 468:                             return value
-------
--------------------------------------------------------------------------------
[0.01875 s] +survived
   - [#1081] SDL nayajson:470: 
--------------------------------------------------------------------------------
 466:                         value = stack.pop()
 467:                         if len(stack) == 0:
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
~470:                             pass
 471:                         elif isinstance(stack[(-1)], dict):
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
-------
 470:                             stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.01716 s] +survived
   - [#1082] SDL nayajson:472: 
--------------------------------------------------------------------------------
 468:                             return value
 469:                         if isinstance(stack[(-1)], list):
 470:                             stack[(-1)].append(value)
 471:                         elif isinstance(stack[(-1)], dict):
~472:                             pass
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
 476:                             return stack[0]
 477:                     else:
-------
 472:                             stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01083 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1083] SDL nayajson:476: 
--------------------------------------------------------------------------------
 472:                             stack[(-1)][value.key] = value.value
 473:                         else:
 474:                             raise ValueError("Object key value pairs must be followed by a comma or closing bracket.  Got '{}'".format(value))
 475:                         if (token == '}' and len(stack) == 1):
~476:                             pass
 477:                     else:
 478:                         raise ValueError("Object key value pairs should be followed by ',' or '}'.  Got '" + token + "'")
 479:                 elif (
 480:                 token_type == TOKEN_TYPE.OPERATOR and token == ':' and last_type == TOKEN_TYPE.STRING):
 481:                     pass
-------
 476:                             return stack[0]
-------
--------------------------------------------------------------------------------
[0.01169 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1084] SDL nayajson:485: 
--------------------------------------------------------------------------------
 481:                     pass
 482:                 elif (last_type == TOKEN_TYPE.OPERATOR and last_token == ':'):
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
~485:                             pass
 486:                         elif token == '[':
 487:                             stack.append([])
 488:                         else:
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
 490:                     else:
-------
 485:                             stack.append({})
-------
--------------------------------------------------------------------------------
[0.01039 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1085] SDL nayajson:487: 
--------------------------------------------------------------------------------
 483:                     if token_type == TOKEN_TYPE.OPERATOR:
 484:                         if token == '{':
 485:                             stack.append({})
 486:                         elif token == '[':
~487:                             pass
 488:                         else:
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
 490:                     else:
 491:                         stack[(-1)].value = token
 492:                         stack[(-1)].set = True
-------
 487:                             stack.append([])
-------
--------------------------------------------------------------------------------
[0.01156 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1086] SDL nayajson:491: 
--------------------------------------------------------------------------------
 487:                             stack.append([])
 488:                         else:
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
 490:                     else:
~491:                         pass
 492:                         stack[(-1)].set = True
 493:                 else:
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
 495:             else:
 496:                 value = stack.pop()
-------
 491:                         stack[(-1)].value = token
-------
--------------------------------------------------------------------------------
[0.01007 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1087] SDL nayajson:492: 
--------------------------------------------------------------------------------
 488:                         else:
 489:                             raise ValueError("Object property value expected.  Got '{}'".format(token))
 490:                     else:
 491:                         stack[(-1)].value = token
~492:                         pass
 493:                 else:
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
 495:             else:
 496:                 value = stack.pop()
 497:                 if isinstance(stack[(-1)], list):
-------
 492:                         stack[(-1)].set = True
-------
--------------------------------------------------------------------------------
[0.01024 s] killed by test_objects (nayajson_test.TestJsonTokenization)
   - [#1088] SDL nayajson:496: 
--------------------------------------------------------------------------------
 492:                         stack[(-1)].set = True
 493:                 else:
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
 495:             else:
~496:                 pass
 497:                 if isinstance(stack[(-1)], list):
 498:                     stack[(-1)].append(value)
 499:                 elif isinstance(stack[(-1)], dict):
 500:                     stack[(-1)][value.key] = value.value
 501:                 else:
-------
 496:                 value = stack.pop()
-------
--------------------------------------------------------------------------------
[0.00806 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1089] SDL nayajson:498: 
--------------------------------------------------------------------------------
 494:                     raise ValueError("Object keys must be separated from values by a single ':'.  Got '{}'".format(token))
 495:             else:
 496:                 value = stack.pop()
 497:                 if isinstance(stack[(-1)], list):
~498:                     pass
 499:                 elif isinstance(stack[(-1)], dict):
 500:                     stack[(-1)][value.key] = value.value
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 503:             (last_type, last_token) = (token_type, token)
-------
 498:                     stack[(-1)].append(value)
-------
--------------------------------------------------------------------------------
[0.00807 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1090] SDL nayajson:500: 
--------------------------------------------------------------------------------
 496:                 value = stack.pop()
 497:                 if isinstance(stack[(-1)], list):
 498:                     stack[(-1)].append(value)
 499:                 elif isinstance(stack[(-1)], dict):
~500:                     pass
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 503:             (last_type, last_token) = (token_type, token)
 504:             (token_type, token) = next(token_stream)
 505:     except StopIteration as e:
-------
 500:                     stack[(-1)][value.key] = value.value
-------
--------------------------------------------------------------------------------
[0.01647 s] +survived
   - [#1091] SDL nayajson:503: 
--------------------------------------------------------------------------------
 499:                 elif isinstance(stack[(-1)], dict):
 500:                     stack[(-1)][value.key] = value.value
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
~503:             pass
 504:             (token_type, token) = next(token_stream)
 505:     except StopIteration as e:
 506:         if len(stack) == 1:
 507:             return stack[0]
 508:         else:
-------
 503:             (last_type, last_token) = (token_type, token)
-------
--------------------------------------------------------------------------------
[0.00879 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1092] SDL nayajson:504: 
--------------------------------------------------------------------------------
 500:                     stack[(-1)][value.key] = value.value
 501:                 else:
 502:                     raise ValueError("Array items must be followed by a comma or closing bracket.  Got '{}'".format(value))
 503:             (last_type, last_token) = (token_type, token)
~504:             pass
 505:     except StopIteration as e:
 506:         if len(stack) == 1:
 507:             return stack[0]
 508:         else:
 509:             raise ValueError('JSON Object not properly closed') from e
-------
 504:             (token_type, token) = next(token_stream)
-------
--------------------------------------------------------------------------------
[0.00795 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1093] SDL nayajson:507: 
--------------------------------------------------------------------------------
 503:             (last_type, last_token) = (token_type, token)
 504:             (token_type, token) = next(token_stream)
 505:     except StopIteration as e:
 506:         if len(stack) == 1:
~507:             pass
 508:         else:
 509:             raise ValueError('JSON Object not properly closed') from e
-------
 507:             return stack[0]
-------
--------------------------------------------------------------------------------
[0.00728 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1094] SVD nayajson:335: 
--------------------------------------------------------------------------------
 331:     raise ValueError('Improperly closed JSON object')
 332: def __parse(token_stream, first_token):
 333:     class KVP:
 334:         def __init__(self, key):
~335:             key = key
 336:             self.value = None
 337:             self.set = False
 338:         def __str__(self):
 339:             if self.set:
 340:                 return '{}: {}'.format(self.key, self.value)
-------
 335:             self.key = key
-------
--------------------------------------------------------------------------------
[0.00000 s] incompetent
   - [#1095] SVD nayajson:336: 
--------------------------------------------------------------------------------
 332: def __parse(token_stream, first_token):
 333:     class KVP:
 334:         def __init__(self, key):
 335:             self.key = key
~336:             value = None
 337:             self.set = False
 338:         def __str__(self):
 339:             if self.set:
 340:                 return '{}: {}'.format(self.key, self.value)
 341:             else:
-------
 336:             self.value = None
-------
--------------------------------------------------------------------------------
[0.00000 s] incompetent
   - [#1096] SVD nayajson:337: 
--------------------------------------------------------------------------------
 333:     class KVP:
 334:         def __init__(self, key):
 335:             self.key = key
 336:             self.value = None
~337:             set = False
 338:         def __str__(self):
 339:             if self.set:
 340:                 return '{}: {}'.format(self.key, self.value)
 341:             else:
 342:                 return '{}: <NULL>'.format(self.key)
-------
 337:             self.set = False
-------
--------------------------------------------------------------------------------
[0.00000 s] incompetent
   - [#1097] SVD nayajson:339: 
--------------------------------------------------------------------------------
 335:             self.key = key
 336:             self.value = None
 337:             self.set = False
 338:         def __str__(self):
~339:             if set:
 340:                 return '{}: {}'.format(self.key, self.value)
 341:             else:
 342:                 return '{}: <NULL>'.format(self.key)
 343:     stack = []
 344:     (token_type, token) = first_token
-------
 339:             if self.set:
-------
--------------------------------------------------------------------------------
[0.01780 s] +survived
   - [#1098] SVD nayajson:340: 
--------------------------------------------------------------------------------
 336:             self.value = None
 337:             self.set = False
 338:         def __str__(self):
 339:             if self.set:
~340:                 return '{}: {}'.format(key, self.value)
 341:             else:
 342:                 return '{}: <NULL>'.format(self.key)
 343:     stack = []
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
-------
 340:                 return '{}: {}'.format(self.key, self.value)
-------
--------------------------------------------------------------------------------
[0.01631 s] +survived
   - [#1099] SVD nayajson:340: 
--------------------------------------------------------------------------------
 336:             self.value = None
 337:             self.set = False
 338:         def __str__(self):
 339:             if self.set:
~340:                 return '{}: {}'.format(self.key, value)
 341:             else:
 342:                 return '{}: <NULL>'.format(self.key)
 343:     stack = []
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
-------
 340:                 return '{}: {}'.format(self.key, self.value)
-------
--------------------------------------------------------------------------------
[0.01639 s] +survived
   - [#1100] SVD nayajson:342: 
--------------------------------------------------------------------------------
 338:         def __str__(self):
 339:             if self.set:
 340:                 return '{}: {}'.format(self.key, self.value)
 341:             else:
~342:                 return '{}: <NULL>'.format(key)
 343:     stack = []
 344:     (token_type, token) = first_token
 345:     if token_type == TOKEN_TYPE.OPERATOR:
 346:         if token == '{':
 347:             stack.append({})
-------
 342:                 return '{}: <NULL>'.format(self.key)
-------
--------------------------------------------------------------------------------
[0.01635 s] +survived
   - [#1101] ZIL nayajson:307: 
--------------------------------------------------------------------------------
 303:         return (advance, next_state, charcode)
 304:     state = __TOKENIZER_STATE.WHITESPACE
 305:     char = stream.read(1)
 306:     index = 0
~307:     while char:
 308:         break
 309:     
 310:     
 311:     
 312:     
-------
 307:     while char:
-------
--------------------------------------------------------------------------------
[0.00782 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
   - [#1102] ZIL nayajson:360: 
--------------------------------------------------------------------------------
 356:         (token_type, token) = next(token_stream)
 357:     except StopIteration as e:
 358:         raise ValueError('Too many opening braces') from e
 359:     try:
~360:         while True:
 361:             break
 362:     
 363:     
 364:     
 365:     
-------
 360:         while True:
-------
--------------------------------------------------------------------------------
[0.00765 s] killed by test_arrays (nayajson_test.TestJsonTokenization)
[*] Mutation score [112.32299 s]: 73.4%
   - all: 1102
   - killed: 796 (72.2%)
   - survived: 289 (26.2%)
   - incompetent: 14 (1.3%)
   - timeout: 3 (0.3%)
